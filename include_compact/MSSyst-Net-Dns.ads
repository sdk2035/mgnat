-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.IAsyncResult.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.AsyncCallback.Ref is access;
with type MSSyst.Net.IPAddress.Ref is access;
with type MSSyst.Net.IPAddress.Ref_array is access;
with type MSSyst.Net.IPHostEntry.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Net.Dns is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   function BeginGetHostAddresses(
      hostNameOrAddress : MSSyst.String.Ref;
      requestCallback : MSSyst.AsyncCallback.Ref;
      state : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginGetHostByName(
      hostName : MSSyst.String.Ref;
      requestCallback : MSSyst.AsyncCallback.Ref;
      stateObject : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginGetHostEntry(
      hostNameOrAddress : MSSyst.String.Ref;
      requestCallback : MSSyst.AsyncCallback.Ref;
      stateObject : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginGetHostEntry(
      address : MSSyst.Net.IPAddress.Ref;
      requestCallback : MSSyst.AsyncCallback.Ref;
      stateObject : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginResolve(
      hostName : MSSyst.String.Ref;
      requestCallback : MSSyst.AsyncCallback.Ref;
      stateObject : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function EndGetHostAddresses(
      asyncResult : MSSyst.IAsyncResult.Ref) return MSSyst.Net.IPAddress.Ref_array;
   function EndGetHostByName(
      asyncResult : MSSyst.IAsyncResult.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function EndGetHostEntry(
      asyncResult : MSSyst.IAsyncResult.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function EndResolve(
      asyncResult : MSSyst.IAsyncResult.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function GetHostAddresses(
      hostNameOrAddress : MSSyst.String.Ref) return MSSyst.Net.IPAddress.Ref_array;
   function GetHostByAddress(
      address : MSSyst.Net.IPAddress.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function GetHostByAddress(
      address : MSSyst.String.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function GetHostByName(
      hostName : MSSyst.String.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function GetHostEntry(
      address : MSSyst.Net.IPAddress.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function GetHostEntry(
      hostNameOrAddress : MSSyst.String.Ref) return MSSyst.Net.IPHostEntry.Ref;
   function GetHostName return MSSyst.String.Ref;
   function Resolve(
      hostName : MSSyst.String.Ref) return MSSyst.Net.IPHostEntry.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,BeginGetHostAddresses,"BeginGetHostAddresses");
   pragma Import(MSIL,BeginGetHostByName,"BeginGetHostByName");
   pragma Import(MSIL,BeginGetHostEntry,"BeginGetHostEntry");
   pragma Import(MSIL,BeginResolve,"BeginResolve");
   pragma Import(MSIL,EndGetHostAddresses,"EndGetHostAddresses");
   pragma Import(MSIL,EndGetHostByName,"EndGetHostByName");
   pragma Import(MSIL,EndGetHostEntry,"EndGetHostEntry");
   pragma Import(MSIL,EndResolve,"EndResolve");
   pragma Import(MSIL,GetHostAddresses,"GetHostAddresses");
   pragma Import(MSIL,GetHostByAddress,"GetHostByAddress");
   pragma Import(MSIL,GetHostByName,"GetHostByName");
   pragma Import(MSIL,GetHostEntry,"GetHostEntry");
   pragma Import(MSIL,GetHostName,"GetHostName");
   pragma Import(MSIL,Resolve,"Resolve");
end MSSyst.Net.Dns;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.Dns,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Dns");
