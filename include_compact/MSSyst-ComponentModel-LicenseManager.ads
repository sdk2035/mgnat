-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.ComponentModel.LicenseContext.Ref is access;
with type MSSyst.Object.Ref_array is access;
with MSSyst.ComponentModel.LicenseUsageMode;
with type MSSyst.ComponentModel.License.Ref_addrof is access;
with type MSSyst.String.Ref is access;
with type MSSyst.ComponentModel.License.Ref is access;
package MSSyst.ComponentModel.LicenseManager is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function CreateWithContext(
      type_k : MSSyst.Type_k.Ref;
      creationContext : MSSyst.ComponentModel.LicenseContext.Ref) return MSSyst.Object.Ref;
   function CreateWithContext(
      type_k : MSSyst.Type_k.Ref;
      creationContext : MSSyst.ComponentModel.LicenseContext.Ref;
      args : MSSyst.Object.Ref_array) return MSSyst.Object.Ref;
   function get_CurrentContext return MSSyst.ComponentModel.LicenseContext.Ref;
   function get_UsageMode return MSSyst.ComponentModel.LicenseUsageMode.Valuetype;
   function IsLicensed(
      type_k : MSSyst.Type_k.Ref) return Standard.Boolean;
   function IsValid(
      type_k : MSSyst.Type_k.Ref) return Standard.Boolean;
   function IsValid(
      type_k : MSSyst.Type_k.Ref;
      instance : MSSyst.Object.Ref;
      license : MSSyst.ComponentModel.License.Ref_addrof) return Standard.Boolean;
   procedure LockContext(
      contextUser : MSSyst.Object.Ref);
   procedure set_CurrentContext(
      value : MSSyst.ComponentModel.LicenseContext.Ref);
   procedure UnlockContext(
      contextUser : MSSyst.Object.Ref);
   procedure Validate(
      type_k : MSSyst.Type_k.Ref);
   function Validate(
      type_k : MSSyst.Type_k.Ref;
      instance : MSSyst.Object.Ref) return MSSyst.ComponentModel.License.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,CreateWithContext,"CreateWithContext");
   pragma Import(MSIL,get_CurrentContext,"get_CurrentContext");
   pragma Import(MSIL,get_UsageMode,"get_UsageMode");
   pragma Import(MSIL,IsLicensed,"IsLicensed");
   pragma Import(MSIL,IsValid,"IsValid");
   pragma Import(MSIL,LockContext,"LockContext");
   pragma Import(MSIL,set_CurrentContext,"set_CurrentContext");
   pragma Import(MSIL,UnlockContext,"UnlockContext");
   pragma Import(MSIL,Validate,"Validate");
end MSSyst.ComponentModel.LicenseManager;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.ComponentModel.LicenseManager,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.ComponentModel.LicenseManager");
