-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Security.Policy.CodeGroup;
with type MSSyst.String.Ref is access;
with type MSSyst.Security.Policy.CodeConnectAccess.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Security.SecurityElement.Ref is access;
with type MSSyst.Security.Policy.PolicyLevel.Ref is access;
with type MSSyst.Collections.IList.Ref is access;
with type MSSyst.Security.Policy.IMembershipCondition.Ref is access;
with type MSSyst.Security.Policy.PolicyStatement.Ref is access;
with MSSyst.Collections.DictionaryEntry;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Security.Policy.Evidence.Ref is access;
package MSSyst.Security.Policy.NetCodeGroup is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Security.Policy.CodeGroup.Typ   with record
      null;
   end record;
   AnyOtherOriginScheme : MSSyst.String.Ref;
   pragma Import(MSIL,AnyOtherOriginScheme,"AnyOtherOriginScheme");
   AbsentOriginScheme : MSSyst.String.Ref;
   pragma Import(MSIL,AbsentOriginScheme,"AbsentOriginScheme");
   function new_NetCodeGroup(
      This : Ref := null;
      membershipCondition : MSSyst.Security.Policy.IMembershipCondition.Ref) return Ref;
   procedure AddConnectAccess(
      This : access Typ;
      originScheme : MSSyst.String.Ref;
      connectAccess : MSSyst.Security.Policy.CodeConnectAccess.Ref);
   function Copy(
      This : access Typ) return MSSyst.Security.Policy.CodeGroup.Ref;
   function Equals(
      This : access Typ;
      o : MSSyst.Object.Ref) return Standard.Boolean;
   function get_AttributeString(
      This : access Typ) return MSSyst.String.Ref;
   function get_MergeLogic(
      This : access Typ) return MSSyst.String.Ref;
   function get_PermissionSetName(
      This : access Typ) return MSSyst.String.Ref;
   function GetConnectAccessRules(
      This : access Typ) return MSSyst.Collections.DictionaryEntry.Valuetype_array;
   function GetHashCode(
      This : access Typ) return Integer;
   procedure ResetConnectAccess(
      This : access Typ);
   function Resolve(
      This : access Typ;
      evidence : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Security.Policy.PolicyStatement.Ref;
   function ResolveMatchingCodeGroups(
      This : access Typ;
      evidence : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Security.Policy.CodeGroup.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_NetCodeGroup);
   pragma Import(MSIL,AddConnectAccess,"AddConnectAccess");
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_AttributeString,"get_AttributeString");
   pragma Import(MSIL,get_MergeLogic,"get_MergeLogic");
   pragma Import(MSIL,get_PermissionSetName,"get_PermissionSetName");
   pragma Import(MSIL,GetConnectAccessRules,"GetConnectAccessRules");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,ResetConnectAccess,"ResetConnectAccess");
   pragma Import(MSIL,Resolve,"Resolve");
   pragma Import(MSIL,ResolveMatchingCodeGroups,"ResolveMatchingCodeGroups");
end MSSyst.Security.Policy.NetCodeGroup;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Policy.NetCodeGroup,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Policy.NetCodeGroup");
