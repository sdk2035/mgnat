-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Security.Cryptography.X509Certificates.X509CertificateCollection;
with MSSyst.Collections.IList;
with MSSyst.Collections.ICollection;
with type MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref is access;
with type MSSyst.Security.Cryptography.X509Certificates.X509Certificate.Ref is access;
with type MSSyst.Security.Cryptography.X509Certificates.X509Certificate.Ref_array is access;
with type MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref_array is access;
with type MSSyst.Object.Ref is access;
with MSSyst.Security.Cryptography.X509Certificates.X509ContentType;
with type MSSyst.String.Ref is access;
with MSSyst.Security.Cryptography.X509Certificates.X509FindType;
with type MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Ref is access;
with type MSSyst.Security.Cryptography.X509Certificates.X509CertificateCollection.X509CertificateEnumerator.Ref is access;
with type MSSyst.Collections.IEnumerator.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
package MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Security.Cryptography.X509Certificates.X509CertificateCollection.Typ
         and MSSyst.Collections.IList.Typ
         and MSSyst.Collections.ICollection.Typ
   with record
      null;
   end record;
   function new_X509Certificate2Collection(
      This : Ref := null) return Ref;
   function new_X509Certificate2Collection(
      This : Ref := null;
      certificate : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref) return Ref;
   function new_X509Certificate2Collection(
      This : Ref := null;
      certificates : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection.Ref) return Ref;
   function new_X509Certificate2Collection(
      This : Ref := null;
      certificates : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref_array) return Ref;
   function Add(
      This : access Typ;
      certificate : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref) return Integer;
   procedure AddRange(
      This : access Typ;
      certificates : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection.Ref);
   procedure AddRange(
      This : access Typ;
      certificates : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref_array);
   function Contains(
      This : access Typ;
      certificate : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref) return Standard.Boolean;
   function Export(
      This : access Typ;
      contentType : MSSyst.Security.Cryptography.X509Certificates.X509ContentType.Valuetype) return MSIL_Types.unsigned_int8_Array;
   function Export(
      This : access Typ;
      contentType : MSSyst.Security.Cryptography.X509Certificates.X509ContentType.Valuetype;
      password : MSSyst.String.Ref) return MSIL_Types.unsigned_int8_Array;
   function Find(
      This : access Typ;
      findType : MSSyst.Security.Cryptography.X509Certificates.X509FindType.Valuetype;
      findValue : MSSyst.Object.Ref;
      validOnly : Standard.Boolean) return MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection.Ref;
   function get_Item(
      This : access Typ;
      index : Integer) return MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref;
   function GetEnumerator(
      This : access Typ) return MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Enumerator.Ref;
   procedure Import(
      This : access Typ;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : MSSyst.String.Ref;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype);
   procedure Import(
      This : access Typ;
      fileName : MSSyst.String.Ref);
   procedure Import(
      This : access Typ;
      rawData : MSIL_Types.unsigned_int8_Arr);
   procedure Import(
      This : access Typ;
      fileName : MSSyst.String.Ref;
      password : MSSyst.String.Ref;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype);
   procedure Insert(
      This : access Typ;
      index : Integer;
      certificate : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref);
   procedure Remove(
      This : access Typ;
      certificate : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref);
   procedure RemoveRange(
      This : access Typ;
      certificates : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref_array);
   procedure RemoveRange(
      This : access Typ;
      certificates : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection.Ref);
   procedure set_Item(
      This : access Typ;
      index : Integer;
      value : MSSyst.Security.Cryptography.X509Certificates.X509Certificate2.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_X509Certificate2Collection);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,AddRange,"AddRange");
   pragma Import(MSIL,Contains,"Contains");
   pragma Import(MSIL,Export,"Export");
   pragma Import(MSIL,Find,"Find");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,Import,"Import");
   pragma Import(MSIL,Insert,"Insert");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,RemoveRange,"RemoveRange");
   pragma Import(MSIL,set_Item,"set_Item");
end MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Cryptography.X509Certificates.X509Certificate2Collection,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Security.Cryptography.X509Certificates.X509Certificate2Collection");
