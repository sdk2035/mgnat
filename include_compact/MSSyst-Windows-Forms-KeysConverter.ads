-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.TypeConverter;
with MSSyst.Collections.IComparer;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.ComponentModel.ITypeDescriptorContext.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Collections.IDictionary.Ref is access;
with type MSSyst.ComponentModel.PropertyDescriptorCollection.Ref is access;
with type MSSyst.Attribute.Ref_array is access;
with type MSSyst.Collections.ICollection.Ref is access;
with type MSSyst.ComponentModel.TypeConverter.StandardValuesCollection.Ref is access;
package MSSyst.Windows.Forms.KeysConverter is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.ComponentModel.TypeConverter.Typ
         and MSSyst.Collections.IComparer.Typ
   with record
      null;
   end record;
   function new_KeysConverter(
      This : Ref := null) return Ref;
   function CanConvertFrom(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref;
      sourceType : MSSyst.Type_k.Ref) return Standard.Boolean;
   function CanConvertTo(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref;
      destinationType : MSSyst.Type_k.Ref) return Standard.Boolean;
   function Compare(
      This : access Typ;
      a : MSSyst.Object.Ref;
      b : MSSyst.Object.Ref) return Integer;
   function ConvertFrom(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      value : MSSyst.Object.Ref) return MSSyst.Object.Ref;
   function ConvertTo(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      value : MSSyst.Object.Ref;
      destinationType : MSSyst.Type_k.Ref) return MSSyst.Object.Ref;
   function GetStandardValues(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref) return MSSyst.ComponentModel.TypeConverter.StandardValuesCollection.Ref;
   function GetStandardValuesExclusive(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref) return Standard.Boolean;
   function GetStandardValuesSupported(
      This : access Typ;
      context : MSSyst.ComponentModel.ITypeDescriptorContext.Ref) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_KeysConverter);
   pragma Import(MSIL,CanConvertFrom,"CanConvertFrom");
   pragma Import(MSIL,CanConvertTo,"CanConvertTo");
   pragma Import(MSIL,Compare,"Compare");
   pragma Import(MSIL,ConvertFrom,"ConvertFrom");
   pragma Import(MSIL,ConvertTo,"ConvertTo");
   pragma Import(MSIL,GetStandardValues,"GetStandardValues");
   pragma Import(MSIL,GetStandardValuesExclusive,"GetStandardValuesExclusive");
   pragma Import(MSIL,GetStandardValuesSupported,"GetStandardValuesSupported");
end MSSyst.Windows.Forms.KeysConverter;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Windows.Forms.KeysConverter,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System.Windows.Forms]System.Windows.Forms.KeysConverter");
