-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.ConsoleCancelEventHandler.Ref is access;
with MSSyst.ConsoleColor;
with type MSSyst.IO.TextWriter.Ref is access;
with type MSSyst.IO.TextReader.Ref is access;
with type MSSyst.Text.Encoding.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.IO.Stream.Ref is access;
with type MSSyst.ConsoleKeyInfo.Valuetype is tagged;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Decimal.Valuetype is tagged;
package MSSyst.Console is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   procedure add_CancelKeyPress(
      value : MSSyst.ConsoleCancelEventHandler.Ref);
   procedure Beep;
   procedure Beep(
      frequency : Integer;
      duration_k : Integer);
   procedure Clear;
   function get_BackgroundColor return MSSyst.ConsoleColor.Valuetype;
   function get_BufferHeight return Integer;
   function get_BufferWidth return Integer;
   function get_CapsLock return Standard.Boolean;
   function get_CursorLeft return Integer;
   function get_CursorSize return Integer;
   function get_CursorTop return Integer;
   function get_CursorVisible return Standard.Boolean;
   function get_Error return MSSyst.IO.TextWriter.Ref;
   function get_ForegroundColor return MSSyst.ConsoleColor.Valuetype;
   function get_In return MSSyst.IO.TextReader.Ref;
   function get_InputEncoding return MSSyst.Text.Encoding.Ref;
   function get_KeyAvailable return Standard.Boolean;
   function get_LargestWindowHeight return Integer;
   function get_LargestWindowWidth return Integer;
   function get_NumberLock return Standard.Boolean;
   function get_Out return MSSyst.IO.TextWriter.Ref;
   function get_OutputEncoding return MSSyst.Text.Encoding.Ref;
   function get_Title return MSSyst.String.Ref;
   function get_TreatControlCAsInput return Standard.Boolean;
   function get_WindowHeight return Integer;
   function get_WindowLeft return Integer;
   function get_WindowTop return Integer;
   function get_WindowWidth return Integer;
   procedure MoveBufferArea(
      sourceLeft : Integer;
      sourceTop : Integer;
      sourceWidth : Integer;
      sourceHeight : Integer;
      targetLeft : Integer;
      targetTop : Integer);
   procedure MoveBufferArea(
      sourceLeft : Integer;
      sourceTop : Integer;
      sourceWidth : Integer;
      sourceHeight : Integer;
      targetLeft : Integer;
      targetTop : Integer;
      sourceChar : Wide_Character;
      sourceForeColor : MSSyst.ConsoleColor.Valuetype;
      sourceBackColor : MSSyst.ConsoleColor.Valuetype);
   function OpenStandardError return MSSyst.IO.Stream.Ref;
   function OpenStandardError(
      bufferSize : Integer) return MSSyst.IO.Stream.Ref;
   function OpenStandardInput return MSSyst.IO.Stream.Ref;
   function OpenStandardInput(
      bufferSize : Integer) return MSSyst.IO.Stream.Ref;
   function OpenStandardOutput return MSSyst.IO.Stream.Ref;
   function OpenStandardOutput(
      bufferSize : Integer) return MSSyst.IO.Stream.Ref;
   function Read return Integer;
   function ReadKey return MSSyst.ConsoleKeyInfo.Valuetype;
   function ReadKey(
      intercept : Standard.Boolean) return MSSyst.ConsoleKeyInfo.Valuetype;
   function ReadLine return MSSyst.String.Ref;
   procedure remove_CancelKeyPress(
      value : MSSyst.ConsoleCancelEventHandler.Ref);
   procedure ResetColor;
   procedure set_BackgroundColor(
      value : MSSyst.ConsoleColor.Valuetype);
   procedure set_BufferHeight(
      value : Integer);
   procedure set_BufferWidth(
      value : Integer);
   procedure set_CursorLeft(
      value : Integer);
   procedure set_CursorSize(
      value : Integer);
   procedure set_CursorTop(
      value : Integer);
   procedure set_CursorVisible(
      value : Standard.Boolean);
   procedure set_ForegroundColor(
      value : MSSyst.ConsoleColor.Valuetype);
   procedure set_InputEncoding(
      value : MSSyst.Text.Encoding.Ref);
   procedure set_OutputEncoding(
      value : MSSyst.Text.Encoding.Ref);
   procedure set_Title(
      value : MSSyst.String.Ref);
   procedure set_TreatControlCAsInput(
      value : Standard.Boolean);
   procedure set_WindowHeight(
      value : Integer);
   procedure set_WindowLeft(
      value : Integer);
   procedure set_WindowTop(
      value : Integer);
   procedure set_WindowWidth(
      value : Integer);
   procedure SetBufferSize(
      width : Integer;
      height : Integer);
   procedure SetCursorPosition(
      left : Integer;
      top : Integer);
   procedure SetError(
      newError : MSSyst.IO.TextWriter.Ref);
   procedure SetIn(
      newIn : MSSyst.IO.TextReader.Ref);
   procedure SetOut(
      newOut : MSSyst.IO.TextWriter.Ref);
   procedure SetWindowPosition(
      left : Integer;
      top : Integer);
   procedure SetWindowSize(
      width : Integer;
      height : Integer);
   procedure Write(
      value : Wide_Character);
   procedure Write(
      value : Standard.Boolean);
   procedure Write(
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer);
   procedure Write(
      buffer : MSIL_Types.Char_Arr);
   procedure Write(
      format : MSSyst.String.Ref;
      arg : MSSyst.Object.Ref_array);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref;
      arg3 : MSSyst.Object.Ref);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref);
   procedure Write(
      value : MSIL_Types.Unsigned_Long_Long_Integer);
   procedure Write(
      value : Long_Long_Integer);
   procedure Write(
      value : MSSyst.String.Ref);
   procedure Write(
      value : MSSyst.Object.Ref);
   procedure Write(
      value : MSIL_Types.Unsigned_Integer);
   procedure Write(
      value : MSSyst.Decimal.Valuetype);
   procedure Write(
      value : Long_Float);
   procedure Write(
      value : Integer);
   procedure Write(
      value : Float);
   procedure WriteLine(
      value : Long_Float);
   procedure WriteLine(
      value : MSSyst.Decimal.Valuetype);
   procedure WriteLine(
      value : Integer);
   procedure WriteLine(
      value : Float);
   procedure WriteLine(
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer);
   procedure WriteLine(
      value : Standard.Boolean);
   procedure WriteLine;
   procedure WriteLine(
      buffer : MSIL_Types.Char_Arr);
   procedure WriteLine(
      value : Wide_Character);
   procedure WriteLine(
      value : MSIL_Types.Unsigned_Integer);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg : MSSyst.Object.Ref_array);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref;
      arg3 : MSSyst.Object.Ref);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref);
   procedure WriteLine(
      value : MSIL_Types.Unsigned_Long_Long_Integer);
   procedure WriteLine(
      value : Long_Long_Integer);
   procedure WriteLine(
      value : MSSyst.String.Ref);
   procedure WriteLine(
      value : MSSyst.Object.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,add_CancelKeyPress,"add_CancelKeyPress");
   pragma Import(MSIL,Beep,"Beep");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,get_BackgroundColor,"get_BackgroundColor");
   pragma Import(MSIL,get_BufferHeight,"get_BufferHeight");
   pragma Import(MSIL,get_BufferWidth,"get_BufferWidth");
   pragma Import(MSIL,get_CapsLock,"get_CapsLock");
   pragma Import(MSIL,get_CursorLeft,"get_CursorLeft");
   pragma Import(MSIL,get_CursorSize,"get_CursorSize");
   pragma Import(MSIL,get_CursorTop,"get_CursorTop");
   pragma Import(MSIL,get_CursorVisible,"get_CursorVisible");
   pragma Import(MSIL,get_Error,"get_Error");
   pragma Import(MSIL,get_ForegroundColor,"get_ForegroundColor");
   pragma Import(MSIL,get_In,"get_In");
   pragma Import(MSIL,get_InputEncoding,"get_InputEncoding");
   pragma Import(MSIL,get_KeyAvailable,"get_KeyAvailable");
   pragma Import(MSIL,get_LargestWindowHeight,"get_LargestWindowHeight");
   pragma Import(MSIL,get_LargestWindowWidth,"get_LargestWindowWidth");
   pragma Import(MSIL,get_NumberLock,"get_NumberLock");
   pragma Import(MSIL,get_Out,"get_Out");
   pragma Import(MSIL,get_OutputEncoding,"get_OutputEncoding");
   pragma Import(MSIL,get_Title,"get_Title");
   pragma Import(MSIL,get_TreatControlCAsInput,"get_TreatControlCAsInput");
   pragma Import(MSIL,get_WindowHeight,"get_WindowHeight");
   pragma Import(MSIL,get_WindowLeft,"get_WindowLeft");
   pragma Import(MSIL,get_WindowTop,"get_WindowTop");
   pragma Import(MSIL,get_WindowWidth,"get_WindowWidth");
   pragma Import(MSIL,MoveBufferArea,"MoveBufferArea");
   pragma Import(MSIL,OpenStandardError,"OpenStandardError");
   pragma Import(MSIL,OpenStandardInput,"OpenStandardInput");
   pragma Import(MSIL,OpenStandardOutput,"OpenStandardOutput");
   pragma Import(MSIL,Read,"Read");
   pragma Import(MSIL,ReadKey,"ReadKey");
   pragma Import(MSIL,ReadLine,"ReadLine");
   pragma Import(MSIL,remove_CancelKeyPress,"remove_CancelKeyPress");
   pragma Import(MSIL,ResetColor,"ResetColor");
   pragma Import(MSIL,set_BackgroundColor,"set_BackgroundColor");
   pragma Import(MSIL,set_BufferHeight,"set_BufferHeight");
   pragma Import(MSIL,set_BufferWidth,"set_BufferWidth");
   pragma Import(MSIL,set_CursorLeft,"set_CursorLeft");
   pragma Import(MSIL,set_CursorSize,"set_CursorSize");
   pragma Import(MSIL,set_CursorTop,"set_CursorTop");
   pragma Import(MSIL,set_CursorVisible,"set_CursorVisible");
   pragma Import(MSIL,set_ForegroundColor,"set_ForegroundColor");
   pragma Import(MSIL,set_InputEncoding,"set_InputEncoding");
   pragma Import(MSIL,set_OutputEncoding,"set_OutputEncoding");
   pragma Import(MSIL,set_Title,"set_Title");
   pragma Import(MSIL,set_TreatControlCAsInput,"set_TreatControlCAsInput");
   pragma Import(MSIL,set_WindowHeight,"set_WindowHeight");
   pragma Import(MSIL,set_WindowLeft,"set_WindowLeft");
   pragma Import(MSIL,set_WindowTop,"set_WindowTop");
   pragma Import(MSIL,set_WindowWidth,"set_WindowWidth");
   pragma Import(MSIL,SetBufferSize,"SetBufferSize");
   pragma Import(MSIL,SetCursorPosition,"SetCursorPosition");
   pragma Import(MSIL,SetError,"SetError");
   pragma Import(MSIL,SetIn,"SetIn");
   pragma Import(MSIL,SetOut,"SetOut");
   pragma Import(MSIL,SetWindowPosition,"SetWindowPosition");
   pragma Import(MSIL,SetWindowSize,"SetWindowSize");
   pragma Import(MSIL,Write,"Write");
   pragma Import(MSIL,WriteLine,"WriteLine");
end MSSyst.Console;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Console,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Console");
