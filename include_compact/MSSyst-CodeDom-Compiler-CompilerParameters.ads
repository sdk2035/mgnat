-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.String.Ref is access;
with type MSSyst.Collections.Specialized.StringCollection.Ref is access;
with type MSSyst.Security.Policy.Evidence.Ref is access;
with type MSSyst.CodeDom.Compiler.TempFileCollection.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref_array is access;
package MSSyst.CodeDom.Compiler.CompilerParameters is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function new_CompilerParameters(
      This : Ref := null) return Ref;
   function new_CompilerParameters(
      This : Ref := null;
      assemblyNames : MSSyst.String.Ref_array) return Ref;
   function new_CompilerParameters(
      This : Ref := null;
      assemblyNames : MSSyst.String.Ref_array;
      outputName : MSSyst.String.Ref) return Ref;
   function new_CompilerParameters(
      This : Ref := null;
      assemblyNames : MSSyst.String.Ref_array;
      outputName : MSSyst.String.Ref;
      includeDebugInformation : Standard.Boolean) return Ref;
   function get_CompilerOptions(
      This : access Typ) return MSSyst.String.Ref;
   function get_EmbeddedResources(
      This : access Typ) return MSSyst.Collections.Specialized.StringCollection.Ref;
   function get_Evidence(
      This : access Typ) return MSSyst.Security.Policy.Evidence.Ref;
   function get_GenerateExecutable(
      This : access Typ) return Standard.Boolean;
   function get_GenerateInMemory(
      This : access Typ) return Standard.Boolean;
   function get_IncludeDebugInformation(
      This : access Typ) return Standard.Boolean;
   function get_LinkedResources(
      This : access Typ) return MSSyst.Collections.Specialized.StringCollection.Ref;
   function get_MainClass(
      This : access Typ) return MSSyst.String.Ref;
   function get_OutputAssembly(
      This : access Typ) return MSSyst.String.Ref;
   function get_ReferencedAssemblies(
      This : access Typ) return MSSyst.Collections.Specialized.StringCollection.Ref;
   function get_TempFiles(
      This : access Typ) return MSSyst.CodeDom.Compiler.TempFileCollection.Ref;
   function get_TreatWarningsAsErrors(
      This : access Typ) return Standard.Boolean;
   function get_UserToken(
      This : access Typ) return MSIL_Types.native_int;
   function get_WarningLevel(
      This : access Typ) return Integer;
   function get_Win32Resource(
      This : access Typ) return MSSyst.String.Ref;
   procedure set_CompilerOptions(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Evidence(
      This : access Typ;
      value : MSSyst.Security.Policy.Evidence.Ref);
   procedure set_GenerateExecutable(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_GenerateInMemory(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_IncludeDebugInformation(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_MainClass(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_OutputAssembly(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_TempFiles(
      This : access Typ;
      value : MSSyst.CodeDom.Compiler.TempFileCollection.Ref);
   procedure set_TreatWarningsAsErrors(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_UserToken(
      This : access Typ;
      value : MSIL_Types.native_int);
   procedure set_WarningLevel(
      This : access Typ;
      value : Integer);
   procedure set_Win32Resource(
      This : access Typ;
      value : MSSyst.String.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_CompilerParameters);
   pragma Import(MSIL,get_CompilerOptions,"get_CompilerOptions");
   pragma Import(MSIL,get_EmbeddedResources,"get_EmbeddedResources");
   pragma Import(MSIL,get_Evidence,"get_Evidence");
   pragma Import(MSIL,get_GenerateExecutable,"get_GenerateExecutable");
   pragma Import(MSIL,get_GenerateInMemory,"get_GenerateInMemory");
   pragma Import(MSIL,get_IncludeDebugInformation,"get_IncludeDebugInformation");
   pragma Import(MSIL,get_LinkedResources,"get_LinkedResources");
   pragma Import(MSIL,get_MainClass,"get_MainClass");
   pragma Import(MSIL,get_OutputAssembly,"get_OutputAssembly");
   pragma Import(MSIL,get_ReferencedAssemblies,"get_ReferencedAssemblies");
   pragma Import(MSIL,get_TempFiles,"get_TempFiles");
   pragma Import(MSIL,get_TreatWarningsAsErrors,"get_TreatWarningsAsErrors");
   pragma Import(MSIL,get_UserToken,"get_UserToken");
   pragma Import(MSIL,get_WarningLevel,"get_WarningLevel");
   pragma Import(MSIL,get_Win32Resource,"get_Win32Resource");
   pragma Import(MSIL,set_CompilerOptions,"set_CompilerOptions");
   pragma Import(MSIL,set_Evidence,"set_Evidence");
   pragma Import(MSIL,set_GenerateExecutable,"set_GenerateExecutable");
   pragma Import(MSIL,set_GenerateInMemory,"set_GenerateInMemory");
   pragma Import(MSIL,set_IncludeDebugInformation,"set_IncludeDebugInformation");
   pragma Import(MSIL,set_MainClass,"set_MainClass");
   pragma Import(MSIL,set_OutputAssembly,"set_OutputAssembly");
   pragma Import(MSIL,set_TempFiles,"set_TempFiles");
   pragma Import(MSIL,set_TreatWarningsAsErrors,"set_TreatWarningsAsErrors");
   pragma Import(MSIL,set_UserToken,"set_UserToken");
   pragma Import(MSIL,set_WarningLevel,"set_WarningLevel");
   pragma Import(MSIL,set_Win32Resource,"set_Win32Resource");
end MSSyst.CodeDom.Compiler.CompilerParameters;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.CodeDom.Compiler.CompilerParameters,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.CodeDom.Compiler.CompilerParameters");
