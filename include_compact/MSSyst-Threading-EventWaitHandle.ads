-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Threading.WaitHandle;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Object.Ref is access;
with type Microsoft.Win32.SafeHandles.SafeWaitHandle.Ref is access;
with type MSSyst.Security.AccessControl.EventWaitHandleSecurity.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Security.AccessControl.EventWaitHandleRights;
with type MSSyst.TimeSpan.Valuetype is tagged;
with MSSyst.Threading.EventResetMode;
package MSSyst.Threading.EventWaitHandle is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Threading.WaitHandle.Typ   with record
      null;
   end record;
   function new_EventWaitHandle(
      This : Ref := null;
      initialState : Standard.Boolean;
      mode : MSSyst.Threading.EventResetMode.Valuetype) return Ref;
   function new_EventWaitHandle(
      This : Ref := null;
      initialState : Standard.Boolean;
      mode : MSSyst.Threading.EventResetMode.Valuetype;
      name : MSSyst.String.Ref) return Ref;
   function new_EventWaitHandle(
      This : Ref := null;
      initialState : Standard.Boolean;
      mode : MSSyst.Threading.EventResetMode.Valuetype;
      name : MSSyst.String.Ref;
      createdNew : MSIL_Types.Bool_addrof) return Ref;
   function new_EventWaitHandle(
      This : Ref := null;
      initialState : Standard.Boolean;
      mode : MSSyst.Threading.EventResetMode.Valuetype;
      name : MSSyst.String.Ref;
      createdNew : MSIL_Types.Bool_addrof;
      eventSecurity : MSSyst.Security.AccessControl.EventWaitHandleSecurity.Ref) return Ref;
   function GetAccessControl(
      This : access Typ) return MSSyst.Security.AccessControl.EventWaitHandleSecurity.Ref;
   function OpenExisting(
      name : MSSyst.String.Ref;
      rights : MSSyst.Security.AccessControl.EventWaitHandleRights.Valuetype) return MSSyst.Threading.EventWaitHandle.Ref;
   function OpenExisting(
      name : MSSyst.String.Ref) return MSSyst.Threading.EventWaitHandle.Ref;
   function Reset(
      This : access Typ) return Standard.Boolean;
   function Set(
      This : access Typ) return Standard.Boolean;
   procedure SetAccessControl(
      This : access Typ;
      eventSecurity : MSSyst.Security.AccessControl.EventWaitHandleSecurity.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_EventWaitHandle);
   pragma Import(MSIL,GetAccessControl,"GetAccessControl");
   pragma Import(MSIL,OpenExisting,"OpenExisting");
   pragma Import(MSIL,Reset,"Reset");
   pragma Import(MSIL,Set,"Set");
   pragma Import(MSIL,SetAccessControl,"SetAccessControl");
end MSSyst.Threading.EventWaitHandle;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Threading.EventWaitHandle,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Threading.EventWaitHandle");
