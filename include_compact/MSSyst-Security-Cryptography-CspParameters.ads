-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.String.Ref is access;
with type MSSyst.Security.AccessControl.CryptoKeySecurity.Ref is access;
with MSSyst.Security.Cryptography.CspProviderFlags;
with type MSSyst.Security.SecureString.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Security.Cryptography.CspParameters is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      ProviderType : Integer;
      pragma Import(MSIL,ProviderType,"ProviderType");
      ProviderName : MSSyst.String.Ref;
      pragma Import(MSIL,ProviderName,"ProviderName");
      KeyContainerName : MSSyst.String.Ref;
      pragma Import(MSIL,KeyContainerName,"KeyContainerName");
      KeyNumber : Integer;
      pragma Import(MSIL,KeyNumber,"KeyNumber");
   end record;
   function new_CspParameters(
      This : Ref := null) return Ref;
   function new_CspParameters(
      This : Ref := null;
      dwTypeIn : Integer) return Ref;
   function new_CspParameters(
      This : Ref := null;
      dwTypeIn : Integer;
      strProviderNameIn : MSSyst.String.Ref) return Ref;
   function new_CspParameters(
      This : Ref := null;
      dwTypeIn : Integer;
      strProviderNameIn : MSSyst.String.Ref;
      strContainerNameIn : MSSyst.String.Ref) return Ref;
   function new_CspParameters(
      This : Ref := null;
      providerType : Integer;
      providerName : MSSyst.String.Ref;
      keyContainerName : MSSyst.String.Ref;
      cryptoKeySecurity : MSSyst.Security.AccessControl.CryptoKeySecurity.Ref;
      keyPassword : MSSyst.Security.SecureString.Ref) return Ref;
   function new_CspParameters(
      This : Ref := null;
      providerType : Integer;
      providerName : MSSyst.String.Ref;
      keyContainerName : MSSyst.String.Ref;
      cryptoKeySecurity : MSSyst.Security.AccessControl.CryptoKeySecurity.Ref;
      parentWindowHandle : MSIL_Types.native_int) return Ref;
   function get_CryptoKeySecurity(
      This : access Typ) return MSSyst.Security.AccessControl.CryptoKeySecurity.Ref;
   function get_Flags(
      This : access Typ) return MSSyst.Security.Cryptography.CspProviderFlags.Valuetype;
   function get_KeyPassword(
      This : access Typ) return MSSyst.Security.SecureString.Ref;
   function get_ParentWindowHandle(
      This : access Typ) return MSIL_Types.native_int;
   procedure set_CryptoKeySecurity(
      This : access Typ;
      value : MSSyst.Security.AccessControl.CryptoKeySecurity.Ref);
   procedure set_Flags(
      This : access Typ;
      value : MSSyst.Security.Cryptography.CspProviderFlags.Valuetype);
   procedure set_KeyPassword(
      This : access Typ;
      value : MSSyst.Security.SecureString.Ref);
   procedure set_ParentWindowHandle(
      This : access Typ;
      value : MSIL_Types.native_int);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_CspParameters);
   pragma Import(MSIL,get_CryptoKeySecurity,"get_CryptoKeySecurity");
   pragma Import(MSIL,get_Flags,"get_Flags");
   pragma Import(MSIL,get_KeyPassword,"get_KeyPassword");
   pragma Import(MSIL,get_ParentWindowHandle,"get_ParentWindowHandle");
   pragma Import(MSIL,set_CryptoKeySecurity,"set_CryptoKeySecurity");
   pragma Import(MSIL,set_Flags,"set_Flags");
   pragma Import(MSIL,set_KeyPassword,"set_KeyPassword");
   pragma Import(MSIL,set_ParentWindowHandle,"set_ParentWindowHandle");
end MSSyst.Security.Cryptography.CspParameters;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Cryptography.CspParameters,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Cryptography.CspParameters");
