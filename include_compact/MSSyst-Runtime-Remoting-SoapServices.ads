-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.String.Ref is access;
with type MSSyst.String.Ref_addrof is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Type_k.Ref_addrof is access;
with type MSSyst.Reflection.MethodBase.Ref is access;
with type MSSyst.Reflection.Assembly.Ref is access;
package MSSyst.Runtime.Remoting.SoapServices is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function CodeXmlNamespaceForClrTypeNamespace(
      typeNamespace : MSSyst.String.Ref;
      assemblyName : MSSyst.String.Ref) return MSSyst.String.Ref;
   function DecodeXmlNamespaceForClrTypeNamespace(
      inNamespace : MSSyst.String.Ref;
      typeNamespace : MSSyst.String.Ref_addrof;
      assemblyName : MSSyst.String.Ref_addrof) return Standard.Boolean;
   function get_XmlNsForClrType return MSSyst.String.Ref;
   function get_XmlNsForClrTypeWithAssembly return MSSyst.String.Ref;
   function get_XmlNsForClrTypeWithNs return MSSyst.String.Ref;
   function get_XmlNsForClrTypeWithNsAndAssembly return MSSyst.String.Ref;
   procedure GetInteropFieldTypeAndNameFromXmlAttribute(
      containingType : MSSyst.Type_k.Ref;
      xmlAttribute : MSSyst.String.Ref;
      xmlNamespace : MSSyst.String.Ref;
      type_k : MSSyst.Type_k.Ref_addrof;
      name : MSSyst.String.Ref_addrof);
   procedure GetInteropFieldTypeAndNameFromXmlElement(
      containingType : MSSyst.Type_k.Ref;
      xmlElement : MSSyst.String.Ref;
      xmlNamespace : MSSyst.String.Ref;
      type_k : MSSyst.Type_k.Ref_addrof;
      name : MSSyst.String.Ref_addrof);
   function GetInteropTypeFromXmlElement(
      xmlElement : MSSyst.String.Ref;
      xmlNamespace : MSSyst.String.Ref) return MSSyst.Type_k.Ref;
   function GetInteropTypeFromXmlType(
      xmlType : MSSyst.String.Ref;
      xmlTypeNamespace : MSSyst.String.Ref) return MSSyst.Type_k.Ref;
   function GetSoapActionFromMethodBase(
      mb : MSSyst.Reflection.MethodBase.Ref) return MSSyst.String.Ref;
   function GetTypeAndMethodNameFromSoapAction(
      soapAction : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref_addrof;
      methodName : MSSyst.String.Ref_addrof) return Standard.Boolean;
   function GetXmlElementForInteropType(
      type_k : MSSyst.Type_k.Ref;
      xmlElement : MSSyst.String.Ref_addrof;
      xmlNamespace : MSSyst.String.Ref_addrof) return Standard.Boolean;
   function GetXmlNamespaceForMethodCall(
      mb : MSSyst.Reflection.MethodBase.Ref) return MSSyst.String.Ref;
   function GetXmlNamespaceForMethodResponse(
      mb : MSSyst.Reflection.MethodBase.Ref) return MSSyst.String.Ref;
   function GetXmlTypeForInteropType(
      type_k : MSSyst.Type_k.Ref;
      xmlType : MSSyst.String.Ref_addrof;
      xmlTypeNamespace : MSSyst.String.Ref_addrof) return Standard.Boolean;
   function IsClrTypeNamespace(
      namespaceString : MSSyst.String.Ref) return Standard.Boolean;
   function IsSoapActionValidForMethodBase(
      soapAction : MSSyst.String.Ref;
      mb : MSSyst.Reflection.MethodBase.Ref) return Standard.Boolean;
   procedure PreLoad(
      assembly : MSSyst.Reflection.Assembly.Ref);
   procedure PreLoad(
      type_k : MSSyst.Type_k.Ref);
   procedure RegisterInteropXmlElement(
      xmlElement : MSSyst.String.Ref;
      xmlNamespace : MSSyst.String.Ref;
      type_k : MSSyst.Type_k.Ref);
   procedure RegisterInteropXmlType(
      xmlType : MSSyst.String.Ref;
      xmlTypeNamespace : MSSyst.String.Ref;
      type_k : MSSyst.Type_k.Ref);
   procedure RegisterSoapActionForMethodBase(
      mb : MSSyst.Reflection.MethodBase.Ref);
   procedure RegisterSoapActionForMethodBase(
      mb : MSSyst.Reflection.MethodBase.Ref;
      soapAction : MSSyst.String.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,CodeXmlNamespaceForClrTypeNamespace,"CodeXmlNamespaceForClrTypeNamespace");
   pragma Import(MSIL,DecodeXmlNamespaceForClrTypeNamespace,"DecodeXmlNamespaceForClrTypeNamespace");
   pragma Import(MSIL,get_XmlNsForClrType,"get_XmlNsForClrType");
   pragma Import(MSIL,get_XmlNsForClrTypeWithAssembly,"get_XmlNsForClrTypeWithAssembly");
   pragma Import(MSIL,get_XmlNsForClrTypeWithNs,"get_XmlNsForClrTypeWithNs");
   pragma Import(MSIL,get_XmlNsForClrTypeWithNsAndAssembly,"get_XmlNsForClrTypeWithNsAndAssembly");
   pragma Import(MSIL,GetInteropFieldTypeAndNameFromXmlAttribute,"GetInteropFieldTypeAndNameFromXmlAttribute");
   pragma Import(MSIL,GetInteropFieldTypeAndNameFromXmlElement,"GetInteropFieldTypeAndNameFromXmlElement");
   pragma Import(MSIL,GetInteropTypeFromXmlElement,"GetInteropTypeFromXmlElement");
   pragma Import(MSIL,GetInteropTypeFromXmlType,"GetInteropTypeFromXmlType");
   pragma Import(MSIL,GetSoapActionFromMethodBase,"GetSoapActionFromMethodBase");
   pragma Import(MSIL,GetTypeAndMethodNameFromSoapAction,"GetTypeAndMethodNameFromSoapAction");
   pragma Import(MSIL,GetXmlElementForInteropType,"GetXmlElementForInteropType");
   pragma Import(MSIL,GetXmlNamespaceForMethodCall,"GetXmlNamespaceForMethodCall");
   pragma Import(MSIL,GetXmlNamespaceForMethodResponse,"GetXmlNamespaceForMethodResponse");
   pragma Import(MSIL,GetXmlTypeForInteropType,"GetXmlTypeForInteropType");
   pragma Import(MSIL,IsClrTypeNamespace,"IsClrTypeNamespace");
   pragma Import(MSIL,IsSoapActionValidForMethodBase,"IsSoapActionValidForMethodBase");
   pragma Import(MSIL,PreLoad,"PreLoad");
   pragma Import(MSIL,RegisterInteropXmlElement,"RegisterInteropXmlElement");
   pragma Import(MSIL,RegisterInteropXmlType,"RegisterInteropXmlType");
   pragma Import(MSIL,RegisterSoapActionForMethodBase,"RegisterSoapActionForMethodBase");
end MSSyst.Runtime.Remoting.SoapServices;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Runtime.Remoting.SoapServices,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Runtime.Remoting.SoapServices");
