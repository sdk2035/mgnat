-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.String.Ref is access;
with MSSyst.Runtime.Remoting.CustomErrorsModes;
with type MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref_array is access;
with type MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry.Ref_array is access;
with type MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref_array is access;
with type MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref is access;
with type MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref is access;
with type MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry.Ref is access;
with type MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry.Ref is access;
with MSSyst.Runtime.Remoting.WellKnownObjectMode;
package MSSyst.Runtime.Remoting.RemotingConfiguration is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   procedure Configure(
      filename : MSSyst.String.Ref;
      ensureSecurity : Standard.Boolean);
   procedure Configure(
      filename : MSSyst.String.Ref);
   function CustomErrorsEnabled(
      isLocalRequest : Standard.Boolean) return Standard.Boolean;
   function get_ApplicationId return MSSyst.String.Ref;
   function get_ApplicationName return MSSyst.String.Ref;
   function get_CustomErrorsMode return MSSyst.Runtime.Remoting.CustomErrorsModes.Valuetype;
   function get_ProcessId return MSSyst.String.Ref;
   function GetRegisteredActivatedClientTypes return MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref_array;
   function GetRegisteredActivatedServiceTypes return MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry.Ref_array;
   function GetRegisteredWellKnownClientTypes return MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref_array;
   function GetRegisteredWellKnownServiceTypes return MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry.Ref_array;
   function IsActivationAllowed(
      svrType : MSSyst.Type_k.Ref) return Standard.Boolean;
   function IsRemotelyActivatedClientType(
      typeName : MSSyst.String.Ref;
      assemblyName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref;
   function IsRemotelyActivatedClientType(
      svrType : MSSyst.Type_k.Ref) return MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref;
   function IsWellKnownClientType(
      svrType : MSSyst.Type_k.Ref) return MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref;
   function IsWellKnownClientType(
      typeName : MSSyst.String.Ref;
      assemblyName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref;
   procedure RegisterActivatedClientType(
      entry_k : MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref);
   procedure RegisterActivatedClientType(
      type_k : MSSyst.Type_k.Ref;
      appUrl : MSSyst.String.Ref);
   procedure RegisterActivatedServiceType(
      type_k : MSSyst.Type_k.Ref);
   procedure RegisterActivatedServiceType(
      entry_k : MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry.Ref);
   procedure RegisterWellKnownClientType(
      type_k : MSSyst.Type_k.Ref;
      objectUrl : MSSyst.String.Ref);
   procedure RegisterWellKnownClientType(
      entry_k : MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref);
   procedure RegisterWellKnownServiceType(
      entry_k : MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry.Ref);
   procedure RegisterWellKnownServiceType(
      type_k : MSSyst.Type_k.Ref;
      objectUri : MSSyst.String.Ref;
      mode : MSSyst.Runtime.Remoting.WellKnownObjectMode.Valuetype);
   procedure set_ApplicationName(
      value : MSSyst.String.Ref);
   procedure set_CustomErrorsMode(
      value : MSSyst.Runtime.Remoting.CustomErrorsModes.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Configure,"Configure");
   pragma Import(MSIL,CustomErrorsEnabled,"CustomErrorsEnabled");
   pragma Import(MSIL,get_ApplicationId,"get_ApplicationId");
   pragma Import(MSIL,get_ApplicationName,"get_ApplicationName");
   pragma Import(MSIL,get_CustomErrorsMode,"get_CustomErrorsMode");
   pragma Import(MSIL,get_ProcessId,"get_ProcessId");
   pragma Import(MSIL,GetRegisteredActivatedClientTypes,"GetRegisteredActivatedClientTypes");
   pragma Import(MSIL,GetRegisteredActivatedServiceTypes,"GetRegisteredActivatedServiceTypes");
   pragma Import(MSIL,GetRegisteredWellKnownClientTypes,"GetRegisteredWellKnownClientTypes");
   pragma Import(MSIL,GetRegisteredWellKnownServiceTypes,"GetRegisteredWellKnownServiceTypes");
   pragma Import(MSIL,IsActivationAllowed,"IsActivationAllowed");
   pragma Import(MSIL,IsRemotelyActivatedClientType,"IsRemotelyActivatedClientType");
   pragma Import(MSIL,IsWellKnownClientType,"IsWellKnownClientType");
   pragma Import(MSIL,RegisterActivatedClientType,"RegisterActivatedClientType");
   pragma Import(MSIL,RegisterActivatedServiceType,"RegisterActivatedServiceType");
   pragma Import(MSIL,RegisterWellKnownClientType,"RegisterWellKnownClientType");
   pragma Import(MSIL,RegisterWellKnownServiceType,"RegisterWellKnownServiceType");
   pragma Import(MSIL,set_ApplicationName,"set_ApplicationName");
   pragma Import(MSIL,set_CustomErrorsMode,"set_CustomErrorsMode");
end MSSyst.Runtime.Remoting.RemotingConfiguration;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Runtime.Remoting.RemotingConfiguration,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Runtime.Remoting.RemotingConfiguration");
