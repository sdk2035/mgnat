-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.MemberDescriptor;
with type MSSyst.Object.Ref is access;
with type MSSyst.Delegate.Ref is access;
with type MSSyst.ComponentModel.AttributeCollection.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.ComponentModel.EventDescriptor is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.ComponentModel.MemberDescriptor.Typ   with record
      null;
   end record;
   procedure AddEventHandler(
      This : access Typ;
      component : MSSyst.Object.Ref;
      value : MSSyst.Delegate.Ref);
   function get_ComponentType(
      This : access Typ) return MSSyst.Type_k.Ref;
   function get_EventType(
      This : access Typ) return MSSyst.Type_k.Ref;
   function get_IsMulticast(
      This : access Typ) return Standard.Boolean;
   procedure RemoveEventHandler(
      This : access Typ;
      component : MSSyst.Object.Ref;
      value : MSSyst.Delegate.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,AddEventHandler,"AddEventHandler");
   pragma Import(MSIL,get_ComponentType,"get_ComponentType");
   pragma Import(MSIL,get_EventType,"get_EventType");
   pragma Import(MSIL,get_IsMulticast,"get_IsMulticast");
   pragma Import(MSIL,RemoveEventHandler,"RemoveEventHandler");
end MSSyst.ComponentModel.EventDescriptor;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.ComponentModel.EventDescriptor,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.ComponentModel.EventDescriptor");
