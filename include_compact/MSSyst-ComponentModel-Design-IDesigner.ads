-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.ComponentModel.IComponent.Ref is access;
with type MSSyst.ComponentModel.Design.DesignerVerbCollection.Ref is access;
package MSSyst.ComponentModel.Design.IDesigner is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is interface;
   procedure DoDefaultAction(
      This : access Typ) is abstract;
   function get_Component(
      This : access Typ) return MSSyst.ComponentModel.IComponent.Ref is abstract;
   function get_Verbs(
      This : access Typ) return MSSyst.ComponentModel.Design.DesignerVerbCollection.Ref is abstract;
   procedure Initialize(
      This : access Typ;
      component : MSSyst.ComponentModel.IComponent.Ref) is abstract;
private
   pragma Import(MSIL,DoDefaultAction,"DoDefaultAction");
   pragma Import(MSIL,get_Component,"get_Component");
   pragma Import(MSIL,get_Verbs,"get_Verbs");
   pragma Import(MSIL,Initialize,"Initialize");
end MSSyst.ComponentModel.Design.IDesigner;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.ComponentModel.Design.IDesigner,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.ComponentModel.Design.IDesigner");
