-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.ComponentModel.IContainer.Ref is access;
with MSSyst.Diagnostics.ThreadPriorityLevel;
with type MSSyst.TimeSpan.Valuetype is tagged;
with type MSSyst.ComponentModel.ISite.Ref is access;
with type MSSyst.DateTime.Valuetype is tagged;
with MSSyst.Diagnostics.ThreadState;
with MSSyst.Diagnostics.ThreadWaitReason;
with type MSSyst.String.Ref is access;
package MSSyst.Diagnostics.ProcessThread is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
   with record
      null;
   end record;
   function get_BasePriority(
      This : access Typ) return Integer;
   function get_CurrentPriority(
      This : access Typ) return Integer;
   function get_Id(
      This : access Typ) return Integer;
   function get_PriorityBoostEnabled(
      This : access Typ) return Standard.Boolean;
   function get_PriorityLevel(
      This : access Typ) return MSSyst.Diagnostics.ThreadPriorityLevel.Valuetype;
   function get_PrivilegedProcessorTime(
      This : access Typ) return MSSyst.TimeSpan.Valuetype;
   function get_StartAddress(
      This : access Typ) return MSIL_Types.native_int;
   function get_StartTime(
      This : access Typ) return MSSyst.DateTime.Valuetype;
   function get_ThreadState(
      This : access Typ) return MSSyst.Diagnostics.ThreadState.Valuetype;
   function get_TotalProcessorTime(
      This : access Typ) return MSSyst.TimeSpan.Valuetype;
   function get_UserProcessorTime(
      This : access Typ) return MSSyst.TimeSpan.Valuetype;
   function get_WaitReason(
      This : access Typ) return MSSyst.Diagnostics.ThreadWaitReason.Valuetype;
   procedure ResetIdealProcessor(
      This : access Typ);
   procedure set_IdealProcessor(
      This : access Typ;
      value : Integer);
   procedure set_PriorityBoostEnabled(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_PriorityLevel(
      This : access Typ;
      value : MSSyst.Diagnostics.ThreadPriorityLevel.Valuetype);
   procedure set_ProcessorAffinity(
      This : access Typ;
      value : MSIL_Types.native_int);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,get_BasePriority,"get_BasePriority");
   pragma Import(MSIL,get_CurrentPriority,"get_CurrentPriority");
   pragma Import(MSIL,get_Id,"get_Id");
   pragma Import(MSIL,get_PriorityBoostEnabled,"get_PriorityBoostEnabled");
   pragma Import(MSIL,get_PriorityLevel,"get_PriorityLevel");
   pragma Import(MSIL,get_PrivilegedProcessorTime,"get_PrivilegedProcessorTime");
   pragma Import(MSIL,get_StartAddress,"get_StartAddress");
   pragma Import(MSIL,get_StartTime,"get_StartTime");
   pragma Import(MSIL,get_ThreadState,"get_ThreadState");
   pragma Import(MSIL,get_TotalProcessorTime,"get_TotalProcessorTime");
   pragma Import(MSIL,get_UserProcessorTime,"get_UserProcessorTime");
   pragma Import(MSIL,get_WaitReason,"get_WaitReason");
   pragma Import(MSIL,ResetIdealProcessor,"ResetIdealProcessor");
   pragma Import(MSIL,set_IdealProcessor,"set_IdealProcessor");
   pragma Import(MSIL,set_PriorityBoostEnabled,"set_PriorityBoostEnabled");
   pragma Import(MSIL,set_PriorityLevel,"set_PriorityLevel");
   pragma Import(MSIL,set_ProcessorAffinity,"set_ProcessorAffinity");
end MSSyst.Diagnostics.ProcessThread;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Diagnostics.ProcessThread,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Diagnostics.ProcessThread");
