-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.MarshalByRefObject;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Object.Ref is access;
with MSSyst.Drawing.Drawing2D.MatrixOrder;
with type MSSyst.Drawing.PointF.Valuetype is tagged;
with type MSSyst.String.Ref is access;
with MSSyst.Drawing.PointF;
with MSSyst.Drawing.Point;
with type MSSyst.Drawing.RectangleF.Valuetype is tagged;
with type MSSyst.Drawing.Rectangle.Valuetype is tagged;
package MSSyst.Drawing.Drawing2D.Matrix is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.MarshalByRefObject.Typ   with record
      null;
   end record;
   function new_Matrix(
      This : Ref := null) return Ref;
   function new_Matrix(
      This : Ref := null;
      m11 : Float;
      m12 : Float;
      m21 : Float;
      m22 : Float;
      dx : Float;
      dy : Float) return Ref;
   function new_Matrix(
      This : Ref := null;
      rect : MSSyst.Drawing.RectangleF.Valuetype;
      plgpts : MSSyst.Drawing.PointF.Valuetype_array) return Ref;
   function new_Matrix(
      This : Ref := null;
      rect : MSSyst.Drawing.Rectangle.Valuetype;
      plgpts : MSSyst.Drawing.Point.Valuetype_array) return Ref;
   function Clone(
      This : access Typ) return MSSyst.Drawing.Drawing2D.Matrix.Ref;
   procedure Dispose(
      This : access Typ);
   function Equals(
      This : access Typ;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function get_Elements(
      This : access Typ) return MSIL_Types.Float32_Array;
   function get_IsIdentity(
      This : access Typ) return Standard.Boolean;
   function get_IsInvertible(
      This : access Typ) return Standard.Boolean;
   function get_OffsetX(
      This : access Typ) return Float;
   function get_OffsetY(
      This : access Typ) return Float;
   function GetHashCode(
      This : access Typ) return Integer;
   procedure Invert(
      This : access Typ);
   procedure Multiply(
      This : access Typ;
      matrix : MSSyst.Drawing.Drawing2D.Matrix.Ref);
   procedure Multiply(
      This : access Typ;
      matrix : MSSyst.Drawing.Drawing2D.Matrix.Ref;
      order : MSSyst.Drawing.Drawing2D.MatrixOrder.Valuetype);
   procedure Reset(
      This : access Typ);
   procedure Rotate(
      This : access Typ;
      angle : Float);
   procedure Rotate(
      This : access Typ;
      angle : Float;
      order : MSSyst.Drawing.Drawing2D.MatrixOrder.Valuetype);
   procedure RotateAt(
      This : access Typ;
      angle : Float;
      point : MSSyst.Drawing.PointF.Valuetype);
   procedure RotateAt(
      This : access Typ;
      angle : Float;
      point : MSSyst.Drawing.PointF.Valuetype;
      order : MSSyst.Drawing.Drawing2D.MatrixOrder.Valuetype);
   procedure Scale(
      This : access Typ;
      scaleX : Float;
      scaleY : Float);
   procedure Scale(
      This : access Typ;
      scaleX : Float;
      scaleY : Float;
      order : MSSyst.Drawing.Drawing2D.MatrixOrder.Valuetype);
   procedure Shear(
      This : access Typ;
      shearX : Float;
      shearY : Float);
   procedure Shear(
      This : access Typ;
      shearX : Float;
      shearY : Float;
      order : MSSyst.Drawing.Drawing2D.MatrixOrder.Valuetype);
   procedure TransformPoints(
      This : access Typ;
      pts : MSSyst.Drawing.PointF.Valuetype_array);
   procedure TransformPoints(
      This : access Typ;
      pts : MSSyst.Drawing.Point.Valuetype_array);
   procedure TransformVectors(
      This : access Typ;
      pts : MSSyst.Drawing.Point.Valuetype_array);
   procedure TransformVectors(
      This : access Typ;
      pts : MSSyst.Drawing.PointF.Valuetype_array);
   procedure Translate(
      This : access Typ;
      offsetX : Float;
      offsetY : Float);
   procedure Translate(
      This : access Typ;
      offsetX : Float;
      offsetY : Float;
      order : MSSyst.Drawing.Drawing2D.MatrixOrder.Valuetype);
   procedure VectorTransformPoints(
      This : access Typ;
      pts : MSSyst.Drawing.Point.Valuetype_array);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Matrix);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Elements,"get_Elements");
   pragma Import(MSIL,get_IsIdentity,"get_IsIdentity");
   pragma Import(MSIL,get_IsInvertible,"get_IsInvertible");
   pragma Import(MSIL,get_OffsetX,"get_OffsetX");
   pragma Import(MSIL,get_OffsetY,"get_OffsetY");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,Invert,"Invert");
   pragma Import(MSIL,Multiply,"Multiply");
   pragma Import(MSIL,Reset,"Reset");
   pragma Import(MSIL,Rotate,"Rotate");
   pragma Import(MSIL,RotateAt,"RotateAt");
   pragma Import(MSIL,Scale,"Scale");
   pragma Import(MSIL,Shear,"Shear");
   pragma Import(MSIL,TransformPoints,"TransformPoints");
   pragma Import(MSIL,TransformVectors,"TransformVectors");
   pragma Import(MSIL,Translate,"Translate");
   pragma Import(MSIL,VectorTransformPoints,"VectorTransformPoints");
end MSSyst.Drawing.Drawing2D.Matrix;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Drawing.Drawing2D.Matrix,
   ".ver 2:0:0:0 .publickeytoken=( b0 3f 5f 7f 11 d5 0a 3a )",
   "[System.Drawing]System.Drawing.Drawing2D.Matrix");
