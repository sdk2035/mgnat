-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Runtime.InteropServices.uActivator;
with type MSSyst.Runtime.Remoting.ObjectHandle.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Configuration.Assemblies.AssemblyHashAlgorithm;
with type MSSyst.AppDomain.Ref is access;
with MSSyst.Reflection.BindingFlags;
with type MSSyst.Reflection.Binder.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
with type MSSyst.Security.Policy.Evidence.Ref is access;
with type MSSyst.ActivationContext.Ref is access;
with type MSSyst.String.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Activator is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.InteropServices.uActivator.Typ
   with record
      null;
   end record;
   function CreateComInstanceFrom(
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateComInstanceFrom(
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      hashValue : MSIL_Types.unsigned_int8_Arr;
      hashAlgorithm : MSSyst.Configuration.Assemblies.AssemblyHashAlgorithm.Valuetype) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      domain : MSSyst.AppDomain.Ref;
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      args : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      activationAttributes : MSSyst.Object.Ref_array;
      securityInfo : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      activationAttributes : MSSyst.Object.Ref_array) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      activationContext : MSSyst.ActivationContext.Ref;
      activationCustomData : MSSyst.String.Ref_array) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      activationContext : MSSyst.ActivationContext.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      domain : MSSyst.AppDomain.Ref;
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      args : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      activationAttributes : MSSyst.Object.Ref_array;
      securityAttributes : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      type_k : MSSyst.Type_k.Ref;
      nonPublic : Standard.Boolean) return MSSyst.Object.Ref;
   function CreateInstance(
      type_k : MSSyst.Type_k.Ref;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      args : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref) return MSSyst.Object.Ref;
   function CreateInstance(
      assemblyName : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstance(
      type_k : MSSyst.Type_k.Ref;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      args : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      activationAttributes : MSSyst.Object.Ref_array) return MSSyst.Object.Ref;
   function CreateInstance(
      type_k : MSSyst.Type_k.Ref;
      args : MSSyst.Object.Ref_array) return MSSyst.Object.Ref;
   function CreateInstance(
      type_k : MSSyst.Type_k.Ref;
      args : MSSyst.Object.Ref_array;
      activationAttributes : MSSyst.Object.Ref_array) return MSSyst.Object.Ref;
   function CreateInstance(
      type_k : MSSyst.Type_k.Ref) return MSSyst.Object.Ref;
   function CreateInstanceFrom(
      assemblyFile : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstanceFrom(
      assemblyFile : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      args : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      activationAttributes : MSSyst.Object.Ref_array;
      securityInfo : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstanceFrom(
      assemblyFile : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      activationAttributes : MSSyst.Object.Ref_array) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstanceFrom(
      domain : MSSyst.AppDomain.Ref;
      assemblyFile : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      args : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      activationAttributes : MSSyst.Object.Ref_array;
      securityAttributes : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function CreateInstanceFrom(
      domain : MSSyst.AppDomain.Ref;
      assemblyFile : MSSyst.String.Ref;
      typeName : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ObjectHandle.Ref;
   function GetObject(
      type_k : MSSyst.Type_k.Ref;
      url : MSSyst.String.Ref;
      state : MSSyst.Object.Ref) return MSSyst.Object.Ref;
   function GetObject(
      type_k : MSSyst.Type_k.Ref;
      url : MSSyst.String.Ref) return MSSyst.Object.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,CreateComInstanceFrom,"CreateComInstanceFrom");
   pragma Import(MSIL,CreateInstance,"CreateInstance");
   pragma Import(MSIL,CreateInstanceFrom,"CreateInstanceFrom");
   pragma Import(MSIL,GetObject,"GetObject");
end MSSyst.Activator;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Activator,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Activator");
