-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with MSSyst.Reflection.MethodAttributes;
with MSSyst.Reflection.CallingConventions;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Reflection.MemberTypes;
with type MSSyst.RuntimeMethodHandle.Valuetype is tagged;
with type MSSyst.String.Ref is access;
with type MSSyst.Reflection.ICustomAttributeProvider.Ref is access;
with type MSSyst.Reflection.MethodInfo.Ref is access;
with type MSSyst.Object.Ref_array is access;
with MSSyst.Guid;
with MSSyst.Reflection.MethodImplAttributes;
with type MSSyst.Reflection.ParameterInfo.Ref_array is access;
with MSSyst.Reflection.BindingFlags;
with type MSSyst.Reflection.Binder.Ref is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
package MSSyst.Runtime.InteropServices.uMethodInfo is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is interface;
   function Equals(
      This : access Typ;
      other : MSSyst.Object.Ref) return Standard.Boolean is abstract;
   function get_Attributes(
      This : access Typ) return MSSyst.Reflection.MethodAttributes.Valuetype is abstract;
   function get_CallingConvention(
      This : access Typ) return MSSyst.Reflection.CallingConventions.Valuetype is abstract;
   function get_DeclaringType(
      This : access Typ) return MSSyst.Type_k.Ref is abstract;
   function get_IsAbstract(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsAssembly(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsConstructor(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsFamily(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsFamilyAndAssembly(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsFamilyOrAssembly(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsFinal(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsHideBySig(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsPrivate(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsPublic(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsSpecialName(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsStatic(
      This : access Typ) return Standard.Boolean is abstract;
   function get_IsVirtual(
      This : access Typ) return Standard.Boolean is abstract;
   function get_MemberType(
      This : access Typ) return MSSyst.Reflection.MemberTypes.Valuetype is abstract;
   function get_MethodHandle(
      This : access Typ) return MSSyst.RuntimeMethodHandle.Valuetype is abstract;
   function get_Name(
      This : access Typ) return MSSyst.String.Ref is abstract;
   function get_ReflectedType(
      This : access Typ) return MSSyst.Type_k.Ref is abstract;
   function get_ReturnType(
      This : access Typ) return MSSyst.Type_k.Ref is abstract;
   function get_ReturnTypeCustomAttributes(
      This : access Typ) return MSSyst.Reflection.ICustomAttributeProvider.Ref is abstract;
   function GetBaseDefinition(
      This : access Typ) return MSSyst.Reflection.MethodInfo.Ref is abstract;
   function GetCustomAttributes(
      This : access Typ;
      attributeType : MSSyst.Type_k.Ref;
      inherit : Standard.Boolean) return MSSyst.Object.Ref_array is abstract;
   function GetCustomAttributes(
      This : access Typ;
      inherit : Standard.Boolean) return MSSyst.Object.Ref_array is abstract;
   function GetHashCode(
      This : access Typ) return Integer is abstract;
   procedure GetIDsOfNames(
      This : access Typ;
      riid : MSSyst.Guid.Valuetype_addrof;
      rgszNames : MSIL_Types.native_int;
      cNames : MSIL_Types.Unsigned_Integer;
      lcid : MSIL_Types.Unsigned_Integer;
      rgDispId : MSIL_Types.native_int) is abstract;
   function GetMethodImplementationFlags(
      This : access Typ) return MSSyst.Reflection.MethodImplAttributes.Valuetype is abstract;
   function GetParameters(
      This : access Typ) return MSSyst.Reflection.ParameterInfo.Ref_array is abstract;
   function GetType(
      This : access Typ) return MSSyst.Type_k.Ref is abstract;
   procedure GetTypeInfo(
      This : access Typ;
      iTInfo : MSIL_Types.Unsigned_Integer;
      lcid : MSIL_Types.Unsigned_Integer;
      ppTInfo : MSIL_Types.native_int) is abstract;
   procedure GetTypeInfoCount(
      This : access Typ;
      pcTInfo : MSIL_Types.Unsigned_Integer_addrof) is abstract;
   function Invoke(
      This : access Typ;
      obj : MSSyst.Object.Ref;
      parameters : MSSyst.Object.Ref_array) return MSSyst.Object.Ref is abstract;
   procedure Invoke(
      This : access Typ;
      dispIdMember : MSIL_Types.Unsigned_Integer;
      riid : MSSyst.Guid.Valuetype_addrof;
      lcid : MSIL_Types.Unsigned_Integer;
      wFlags : MSIL_Types.int16;
      pDispParams : MSIL_Types.native_int;
      pVarResult : MSIL_Types.native_int;
      pExcepInfo : MSIL_Types.native_int;
      puArgErr : MSIL_Types.native_int) is abstract;
   function Invoke(
      This : access Typ;
      obj : MSSyst.Object.Ref;
      invokeAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : MSSyst.Reflection.Binder.Ref;
      parameters : MSSyst.Object.Ref_array;
      culture : MSSyst.Globalization.CultureInfo.Ref) return MSSyst.Object.Ref is abstract;
   function IsDefined(
      This : access Typ;
      attributeType : MSSyst.Type_k.Ref;
      inherit : Standard.Boolean) return Standard.Boolean is abstract;
   function ToString(
      This : access Typ) return MSSyst.String.Ref is abstract;
private
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Attributes,"get_Attributes");
   pragma Import(MSIL,get_CallingConvention,"get_CallingConvention");
   pragma Import(MSIL,get_DeclaringType,"get_DeclaringType");
   pragma Import(MSIL,get_IsAbstract,"get_IsAbstract");
   pragma Import(MSIL,get_IsAssembly,"get_IsAssembly");
   pragma Import(MSIL,get_IsConstructor,"get_IsConstructor");
   pragma Import(MSIL,get_IsFamily,"get_IsFamily");
   pragma Import(MSIL,get_IsFamilyAndAssembly,"get_IsFamilyAndAssembly");
   pragma Import(MSIL,get_IsFamilyOrAssembly,"get_IsFamilyOrAssembly");
   pragma Import(MSIL,get_IsFinal,"get_IsFinal");
   pragma Import(MSIL,get_IsHideBySig,"get_IsHideBySig");
   pragma Import(MSIL,get_IsPrivate,"get_IsPrivate");
   pragma Import(MSIL,get_IsPublic,"get_IsPublic");
   pragma Import(MSIL,get_IsSpecialName,"get_IsSpecialName");
   pragma Import(MSIL,get_IsStatic,"get_IsStatic");
   pragma Import(MSIL,get_IsVirtual,"get_IsVirtual");
   pragma Import(MSIL,get_MemberType,"get_MemberType");
   pragma Import(MSIL,get_MethodHandle,"get_MethodHandle");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_ReflectedType,"get_ReflectedType");
   pragma Import(MSIL,get_ReturnType,"get_ReturnType");
   pragma Import(MSIL,get_ReturnTypeCustomAttributes,"get_ReturnTypeCustomAttributes");
   pragma Import(MSIL,GetBaseDefinition,"GetBaseDefinition");
   pragma Import(MSIL,GetCustomAttributes,"GetCustomAttributes");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetIDsOfNames,"GetIDsOfNames");
   pragma Import(MSIL,GetMethodImplementationFlags,"GetMethodImplementationFlags");
   pragma Import(MSIL,GetParameters,"GetParameters");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeInfo,"GetTypeInfo");
   pragma Import(MSIL,GetTypeInfoCount,"GetTypeInfoCount");
   pragma Import(MSIL,Invoke,"Invoke");
   pragma Import(MSIL,IsDefined,"IsDefined");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Runtime.InteropServices.uMethodInfo;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Runtime.InteropServices.uMethodInfo,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Runtime.InteropServices._MethodInfo");
