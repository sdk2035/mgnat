-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.MarshalByRefObject.Ref is access;
with type MSSyst.Runtime.Remoting.Messaging.IMethodReturnMessage.Ref is access;
with type MSSyst.Runtime.Remoting.Messaging.IMethodCallMessage.Ref is access;
with type MSSyst.Runtime.Remoting.Messaging.IMessageSink.Ref is access;
with type MSSyst.Reflection.MethodBase.Ref is access;
with type MSSyst.Runtime.Remoting.Messaging.IMethodMessage.Ref is access;
with type MSSyst.Runtime.Serialization.SerializationInfo.Ref is access;
with type MSSyst.Runtime.Serialization.StreamingContext.Valuetype is tagged;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Runtime.Remoting.Proxies.RealProxy.Ref is access;
package MSSyst.Runtime.Remoting.RemotingServices is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function Connect(
      classToProxy : MSSyst.Type_k.Ref;
      url : MSSyst.String.Ref) return MSSyst.Object.Ref;
   function Connect(
      classToProxy : MSSyst.Type_k.Ref;
      url : MSSyst.String.Ref;
      data : MSSyst.Object.Ref) return MSSyst.Object.Ref;
   function Disconnect(
      obj : MSSyst.MarshalByRefObject.Ref) return Standard.Boolean;
   function ExecuteMessage(
      target : MSSyst.MarshalByRefObject.Ref;
      reqMsg : MSSyst.Runtime.Remoting.Messaging.IMethodCallMessage.Ref) return MSSyst.Runtime.Remoting.Messaging.IMethodReturnMessage.Ref;
   function GetEnvoyChainForProxy(
      obj : MSSyst.MarshalByRefObject.Ref) return MSSyst.Runtime.Remoting.Messaging.IMessageSink.Ref;
   function GetLifetimeService(
      obj : MSSyst.MarshalByRefObject.Ref) return MSSyst.Object.Ref;
   function GetMethodBaseFromMethodMessage(
      msg : MSSyst.Runtime.Remoting.Messaging.IMethodMessage.Ref) return MSSyst.Reflection.MethodBase.Ref;
   procedure GetObjectData(
      obj : MSSyst.Object.Ref;
      info : MSSyst.Runtime.Serialization.SerializationInfo.Ref;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype);
   function GetObjectUri(
      obj : MSSyst.MarshalByRefObject.Ref) return MSSyst.String.Ref;
   function GetObjRefForProxy(
      obj : MSSyst.MarshalByRefObject.Ref) return MSSyst.Runtime.Remoting.ObjRef.Ref;
   function GetRealProxy(
      proxy : MSSyst.Object.Ref) return MSSyst.Runtime.Remoting.Proxies.RealProxy.Ref;
   function GetServerTypeForUri(
      URI : MSSyst.String.Ref) return MSSyst.Type_k.Ref;
   function GetSessionIdForMethodMessage(
      msg : MSSyst.Runtime.Remoting.Messaging.IMethodMessage.Ref) return MSSyst.String.Ref;
   function IsMethodOverloaded(
      msg : MSSyst.Runtime.Remoting.Messaging.IMethodMessage.Ref) return Standard.Boolean;
   function IsObjectOutOfAppDomain(
      tp : MSSyst.Object.Ref) return Standard.Boolean;
   function IsObjectOutOfContext(
      tp : MSSyst.Object.Ref) return Standard.Boolean;
   function IsOneWay(
      method : MSSyst.Reflection.MethodBase.Ref) return Standard.Boolean;
   function IsTransparentProxy(
      proxy : MSSyst.Object.Ref) return Standard.Boolean;
   procedure LogRemotingStage(
      stage : Integer);
   function Marshal(
      Obj : MSSyst.MarshalByRefObject.Ref;
      URI : MSSyst.String.Ref) return MSSyst.Runtime.Remoting.ObjRef.Ref;
   function Marshal(
      Obj : MSSyst.MarshalByRefObject.Ref) return MSSyst.Runtime.Remoting.ObjRef.Ref;
   function Marshal(
      Obj : MSSyst.MarshalByRefObject.Ref;
      ObjURI : MSSyst.String.Ref;
      RequestedType : MSSyst.Type_k.Ref) return MSSyst.Runtime.Remoting.ObjRef.Ref;
   procedure SetObjectUriForMarshal(
      obj : MSSyst.MarshalByRefObject.Ref;
      uri : MSSyst.String.Ref);
   function Unmarshal(
      objectRef : MSSyst.Runtime.Remoting.ObjRef.Ref;
      fRefine : Standard.Boolean) return MSSyst.Object.Ref;
   function Unmarshal(
      objectRef : MSSyst.Runtime.Remoting.ObjRef.Ref) return MSSyst.Object.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Connect,"Connect");
   pragma Import(MSIL,Disconnect,"Disconnect");
   pragma Import(MSIL,ExecuteMessage,"ExecuteMessage");
   pragma Import(MSIL,GetEnvoyChainForProxy,"GetEnvoyChainForProxy");
   pragma Import(MSIL,GetLifetimeService,"GetLifetimeService");
   pragma Import(MSIL,GetMethodBaseFromMethodMessage,"GetMethodBaseFromMethodMessage");
   pragma Import(MSIL,GetObjectData,"GetObjectData");
   pragma Import(MSIL,GetObjectUri,"GetObjectUri");
   pragma Import(MSIL,GetObjRefForProxy,"GetObjRefForProxy");
   pragma Import(MSIL,GetRealProxy,"GetRealProxy");
   pragma Import(MSIL,GetServerTypeForUri,"GetServerTypeForUri");
   pragma Import(MSIL,GetSessionIdForMethodMessage,"GetSessionIdForMethodMessage");
   pragma Import(MSIL,IsMethodOverloaded,"IsMethodOverloaded");
   pragma Import(MSIL,IsObjectOutOfAppDomain,"IsObjectOutOfAppDomain");
   pragma Import(MSIL,IsObjectOutOfContext,"IsObjectOutOfContext");
   pragma Import(MSIL,IsOneWay,"IsOneWay");
   pragma Import(MSIL,IsTransparentProxy,"IsTransparentProxy");
   pragma Import(MSIL,LogRemotingStage,"LogRemotingStage");
   pragma Import(MSIL,Marshal,"Marshal");
   pragma Import(MSIL,SetObjectUriForMarshal,"SetObjectUriForMarshal");
   pragma Import(MSIL,Unmarshal,"Unmarshal");
end MSSyst.Runtime.Remoting.RemotingServices;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Runtime.Remoting.RemotingServices,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Runtime.Remoting.RemotingServices");
