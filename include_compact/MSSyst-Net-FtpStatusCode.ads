-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.TypeCode;
with type MSSyst.String.Ref is access;
with type MSSyst.IFormatProvider.Ref is access;
package MSSyst.Net.FtpStatusCode is
   type ValueType is (
      Undefined,
      RestartMarker,
      ServiceTemporarilyNotAvailable,
      DataAlreadyOpen,
      OpeningData,
      CommandOK,
      CommandExtraneous,
      DirectoryStatus,
      FileStatus,
      SystemType,
      SendUserCommand,
      ClosingControl,
      ClosingData,
      EnteringPassive,
      LoggedInProceed,
      ServerWantsSecureSession,
      FileActionOK,
      PathnameCreated,
      SendPasswordCommand,
      NeedLoginAccount,
      FileCommandPending,
      ServiceNotAvailable,
      CantOpenData,
      ConnectionClosed,
      ActionNotTakenFileUnavailableOrBusy,
      ActionAbortedLocalProcessingError,
      ActionNotTakenInsufficientSpace,
      CommandSyntaxError,
      ArgumentSyntaxError,
      CommandNotImplemented,
      BadCommandSequence,
      NotLoggedIn,
      AccountNeeded,
      ActionNotTakenFileUnavailable,
      ActionAbortedUnknownPageType,
      FileActionAborted,
      ActionNotTakenFilenameNotAllowed);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      Undefined =>  0,
      RestartMarker =>  110,
      ServiceTemporarilyNotAvailable =>  120,
      DataAlreadyOpen =>  125,
      OpeningData =>  150,
      CommandOK =>  200,
      CommandExtraneous =>  202,
      DirectoryStatus =>  212,
      FileStatus =>  213,
      SystemType =>  215,
      SendUserCommand =>  220,
      ClosingControl =>  221,
      ClosingData =>  226,
      EnteringPassive =>  227,
      LoggedInProceed =>  230,
      ServerWantsSecureSession =>  234,
      FileActionOK =>  250,
      PathnameCreated =>  257,
      SendPasswordCommand =>  331,
      NeedLoginAccount =>  332,
      FileCommandPending =>  350,
      ServiceNotAvailable =>  421,
      CantOpenData =>  425,
      ConnectionClosed =>  426,
      ActionNotTakenFileUnavailableOrBusy =>  450,
      ActionAbortedLocalProcessingError =>  451,
      ActionNotTakenInsufficientSpace =>  452,
      CommandSyntaxError =>  500,
      ArgumentSyntaxError =>  501,
      CommandNotImplemented =>  502,
      BadCommandSequence =>  503,
      NotLoggedIn =>  530,
      AccountNeeded =>  532,
      ActionNotTakenFileUnavailable =>  550,
      ActionAbortedUnknownPageType =>  551,
      FileActionAborted =>  552,
      ActionNotTakenFilenameNotAllowed =>  553);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function CompareTo(
      This : Valuetype;
      target : MSSyst.Object.Ref) return Integer;
   function Equals(
      This : Valuetype;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return MSSyst.Type_k.Ref;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref) return MSSyst.String.Ref;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Net.FtpStatusCode;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.FtpStatusCode,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.FtpStatusCode");
