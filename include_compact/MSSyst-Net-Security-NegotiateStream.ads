-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Net.Security.AuthenticatedStream;
with type MSSyst.Net.NetworkCredential.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Net.Security.ProtectionLevel;
with MSSyst.Security.Principal.TokenImpersonationLevel;
with type MSSyst.IAsyncResult.Ref is access;
with type MSSyst.AsyncCallback.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Security.Principal.IIdentity.Ref is access;
with MSSyst.IO.SeekOrigin;
with type MSSyst.IO.Stream.Ref is access;
package MSSyst.Net.Security.NegotiateStream is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Net.Security.AuthenticatedStream.Typ   with record
      null;
   end record;
   function new_NegotiateStream(
      This : Ref := null;
      innerStream : MSSyst.IO.Stream.Ref) return Ref;
   function new_NegotiateStream(
      This : Ref := null;
      innerStream : MSSyst.IO.Stream.Ref;
      leaveInnerStreamOpen : Standard.Boolean) return Ref;
   procedure AuthenticateAsClient(
      This : access Typ;
      credential : MSSyst.Net.NetworkCredential.Ref;
      targetName : MSSyst.String.Ref;
      requiredProtectionLevel : MSSyst.Net.Security.ProtectionLevel.Valuetype;
      allowedImpersonationLevel : MSSyst.Security.Principal.TokenImpersonationLevel.Valuetype);
   procedure AuthenticateAsClient(
      This : access Typ;
      credential : MSSyst.Net.NetworkCredential.Ref;
      targetName : MSSyst.String.Ref);
   procedure AuthenticateAsClient(
      This : access Typ);
   procedure AuthenticateAsServer(
      This : access Typ);
   procedure AuthenticateAsServer(
      This : access Typ;
      credential : MSSyst.Net.NetworkCredential.Ref;
      requiredProtectionLevel : MSSyst.Net.Security.ProtectionLevel.Valuetype;
      requiredImpersonationLevel : MSSyst.Security.Principal.TokenImpersonationLevel.Valuetype);
   function BeginAuthenticateAsClient(
      This : access Typ;
      credential : MSSyst.Net.NetworkCredential.Ref;
      targetName : MSSyst.String.Ref;
      requiredProtectionLevel : MSSyst.Net.Security.ProtectionLevel.Valuetype;
      allowedImpersonationLevel : MSSyst.Security.Principal.TokenImpersonationLevel.Valuetype;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginAuthenticateAsClient(
      This : access Typ;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginAuthenticateAsClient(
      This : access Typ;
      credential : MSSyst.Net.NetworkCredential.Ref;
      targetName : MSSyst.String.Ref;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginAuthenticateAsServer(
      This : access Typ;
      credential : MSSyst.Net.NetworkCredential.Ref;
      requiredProtectionLevel : MSSyst.Net.Security.ProtectionLevel.Valuetype;
      requiredImpersonationLevel : MSSyst.Security.Principal.TokenImpersonationLevel.Valuetype;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginAuthenticateAsServer(
      This : access Typ;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginRead(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginWrite(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer;
      asyncCallback : MSSyst.AsyncCallback.Ref;
      asyncState : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   procedure EndAuthenticateAsClient(
      This : access Typ;
      asyncResult : MSSyst.IAsyncResult.Ref);
   procedure EndAuthenticateAsServer(
      This : access Typ;
      asyncResult : MSSyst.IAsyncResult.Ref);
   function EndRead(
      This : access Typ;
      asyncResult : MSSyst.IAsyncResult.Ref) return Integer;
   procedure EndWrite(
      This : access Typ;
      asyncResult : MSSyst.IAsyncResult.Ref);
   procedure Flush(
      This : access Typ);
   function get_CanRead(
      This : access Typ) return Standard.Boolean;
   function get_CanSeek(
      This : access Typ) return Standard.Boolean;
   function get_CanTimeout(
      This : access Typ) return Standard.Boolean;
   function get_CanWrite(
      This : access Typ) return Standard.Boolean;
   function get_ImpersonationLevel(
      This : access Typ) return MSSyst.Security.Principal.TokenImpersonationLevel.Valuetype;
   function get_IsAuthenticated(
      This : access Typ) return Standard.Boolean;
   function get_IsEncrypted(
      This : access Typ) return Standard.Boolean;
   function get_IsMutuallyAuthenticated(
      This : access Typ) return Standard.Boolean;
   function get_IsServer(
      This : access Typ) return Standard.Boolean;
   function get_IsSigned(
      This : access Typ) return Standard.Boolean;
   function get_Length(
      This : access Typ) return Long_Long_Integer;
   function get_Position(
      This : access Typ) return Long_Long_Integer;
   function get_ReadTimeout(
      This : access Typ) return Integer;
   function get_RemoteIdentity(
      This : access Typ) return MSSyst.Security.Principal.IIdentity.Ref;
   function get_WriteTimeout(
      This : access Typ) return Integer;
   function Read(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer) return Integer;
   function Seek(
      This : access Typ;
      offset : Long_Long_Integer;
      origin : MSSyst.IO.SeekOrigin.Valuetype) return Long_Long_Integer;
   procedure set_Position(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_ReadTimeout(
      This : access Typ;
      value : Integer);
   procedure set_WriteTimeout(
      This : access Typ;
      value : Integer);
   procedure SetLength(
      This : access Typ;
      value : Long_Long_Integer);
   procedure Write(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_NegotiateStream);
   pragma Import(MSIL,AuthenticateAsClient,"AuthenticateAsClient");
   pragma Import(MSIL,AuthenticateAsServer,"AuthenticateAsServer");
   pragma Import(MSIL,BeginAuthenticateAsClient,"BeginAuthenticateAsClient");
   pragma Import(MSIL,BeginAuthenticateAsServer,"BeginAuthenticateAsServer");
   pragma Import(MSIL,BeginRead,"BeginRead");
   pragma Import(MSIL,BeginWrite,"BeginWrite");
   pragma Import(MSIL,EndAuthenticateAsClient,"EndAuthenticateAsClient");
   pragma Import(MSIL,EndAuthenticateAsServer,"EndAuthenticateAsServer");
   pragma Import(MSIL,EndRead,"EndRead");
   pragma Import(MSIL,EndWrite,"EndWrite");
   pragma Import(MSIL,Flush,"Flush");
   pragma Import(MSIL,get_CanRead,"get_CanRead");
   pragma Import(MSIL,get_CanSeek,"get_CanSeek");
   pragma Import(MSIL,get_CanTimeout,"get_CanTimeout");
   pragma Import(MSIL,get_CanWrite,"get_CanWrite");
   pragma Import(MSIL,get_ImpersonationLevel,"get_ImpersonationLevel");
   pragma Import(MSIL,get_IsAuthenticated,"get_IsAuthenticated");
   pragma Import(MSIL,get_IsEncrypted,"get_IsEncrypted");
   pragma Import(MSIL,get_IsMutuallyAuthenticated,"get_IsMutuallyAuthenticated");
   pragma Import(MSIL,get_IsServer,"get_IsServer");
   pragma Import(MSIL,get_IsSigned,"get_IsSigned");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,get_Position,"get_Position");
   pragma Import(MSIL,get_ReadTimeout,"get_ReadTimeout");
   pragma Import(MSIL,get_RemoteIdentity,"get_RemoteIdentity");
   pragma Import(MSIL,get_WriteTimeout,"get_WriteTimeout");
   pragma Import(MSIL,Read,"Read");
   pragma Import(MSIL,Seek,"Seek");
   pragma Import(MSIL,set_Position,"set_Position");
   pragma Import(MSIL,set_ReadTimeout,"set_ReadTimeout");
   pragma Import(MSIL,set_WriteTimeout,"set_WriteTimeout");
   pragma Import(MSIL,SetLength,"SetLength");
   pragma Import(MSIL,Write,"Write");
end MSSyst.Net.Security.NegotiateStream;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.Security.NegotiateStream,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Security.NegotiateStream");
