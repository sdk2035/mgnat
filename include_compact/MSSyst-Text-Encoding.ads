-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.ICloneable;
with type MSSyst.String.Ref is access;
with type MSSyst.Text.DecoderFallback.Ref is access;
with type MSSyst.Text.EncoderFallback.Ref is access;
with type MSSyst.Text.Decoder.Ref is access;
with type MSSyst.Text.Encoder.Ref is access;
with type MSSyst.Text.EncodingInfo.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Text.NormalizationForm;
package MSSyst.Text.Encoding is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ
         and MSSyst.ICloneable.Typ
   with record
      null;
   end record;
   function Clone(
      This : access Typ) return MSSyst.Object.Ref;
   function Convert(
      srcEncoding : MSSyst.Text.Encoding.Ref;
      dstEncoding : MSSyst.Text.Encoding.Ref;
      bytes : MSIL_Types.unsigned_int8_Arr;
      index : Integer;
      count : Integer) return MSIL_Types.unsigned_int8_Array;
   function Convert(
      srcEncoding : MSSyst.Text.Encoding.Ref;
      dstEncoding : MSSyst.Text.Encoding.Ref;
      bytes : MSIL_Types.unsigned_int8_Arr) return MSIL_Types.unsigned_int8_Array;
   function Equals(
      This : access Typ;
      value : MSSyst.Object.Ref) return Standard.Boolean;
   function get_ASCII return MSSyst.Text.Encoding.Ref;
   function get_BigEndianUnicode return MSSyst.Text.Encoding.Ref;
   function get_BodyName(
      This : access Typ) return MSSyst.String.Ref;
   function get_CodePage(
      This : access Typ) return Integer;
   function get_DecoderFallback(
      This : access Typ) return MSSyst.Text.DecoderFallback.Ref;
   function get_Default return MSSyst.Text.Encoding.Ref;
   function get_EncoderFallback(
      This : access Typ) return MSSyst.Text.EncoderFallback.Ref;
   function get_EncodingName(
      This : access Typ) return MSSyst.String.Ref;
   function get_HeaderName(
      This : access Typ) return MSSyst.String.Ref;
   function get_IsBrowserDisplay(
      This : access Typ) return Standard.Boolean;
   function get_IsBrowserSave(
      This : access Typ) return Standard.Boolean;
   function get_IsMailNewsDisplay(
      This : access Typ) return Standard.Boolean;
   function get_IsMailNewsSave(
      This : access Typ) return Standard.Boolean;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSingleByte(
      This : access Typ) return Standard.Boolean;
   function get_Unicode return MSSyst.Text.Encoding.Ref;
   function get_UTF32 return MSSyst.Text.Encoding.Ref;
   function get_UTF7 return MSSyst.Text.Encoding.Ref;
   function get_UTF8 return MSSyst.Text.Encoding.Ref;
   function get_WebName(
      This : access Typ) return MSSyst.String.Ref;
   function get_WindowsCodePage(
      This : access Typ) return Integer;
   function GetByteCount(
      This : access Typ;
      chars : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer) return Integer;
   function GetByteCount(
      This : access Typ;
      chars : MSIL_Types.char_addrof;
      count : Integer) return Integer;
   function GetByteCount(
      This : access Typ;
      chars : MSIL_Types.Char_Arr) return Integer;
   function GetByteCount(
      This : access Typ;
      s : MSSyst.String.Ref) return Integer;
   function GetBytes(
      This : access Typ;
      s : MSSyst.String.Ref) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      This : access Typ;
      s : MSSyst.String.Ref;
      charIndex : Integer;
      charCount : Integer;
      bytes : MSIL_Types.unsigned_int8_Arr;
      byteIndex : Integer) return Integer;
   function GetBytes(
      This : access Typ;
      chars : MSIL_Types.char_addrof;
      charCount : Integer;
      bytes : MSIL_Types.unsigned_int8_addrof;
      byteCount : Integer) return Integer;
   function GetBytes(
      This : access Typ;
      chars : MSIL_Types.Char_Arr) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      This : access Typ;
      chars : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      This : access Typ;
      chars : MSIL_Types.Char_Arr;
      charIndex : Integer;
      charCount : Integer;
      bytes : MSIL_Types.unsigned_int8_Arr;
      byteIndex : Integer) return Integer;
   function GetCharCount(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_addrof;
      count : Integer) return Integer;
   function GetCharCount(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr;
      index : Integer;
      count : Integer) return Integer;
   function GetCharCount(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr) return Integer;
   function GetChars(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr;
      byteIndex : Integer;
      byteCount : Integer;
      chars : MSIL_Types.Char_Arr;
      charIndex : Integer) return Integer;
   function GetChars(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_addrof;
      byteCount : Integer;
      chars : MSIL_Types.char_addrof;
      charCount : Integer) return Integer;
   function GetChars(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr) return MSIL_Types.Char_Array;
   function GetChars(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr;
      index : Integer;
      count : Integer) return MSIL_Types.Char_Array;
   function GetDecoder(
      This : access Typ) return MSSyst.Text.Decoder.Ref;
   function GetEncoder(
      This : access Typ) return MSSyst.Text.Encoder.Ref;
   function GetEncoding(
      name : MSSyst.String.Ref) return MSSyst.Text.Encoding.Ref;
   function GetEncoding(
      name : MSSyst.String.Ref;
      encoderFallback : MSSyst.Text.EncoderFallback.Ref;
      decoderFallback : MSSyst.Text.DecoderFallback.Ref) return MSSyst.Text.Encoding.Ref;
   function GetEncoding(
      codepage : Integer) return MSSyst.Text.Encoding.Ref;
   function GetEncoding(
      codepage : Integer;
      encoderFallback : MSSyst.Text.EncoderFallback.Ref;
      decoderFallback : MSSyst.Text.DecoderFallback.Ref) return MSSyst.Text.Encoding.Ref;
   function GetEncodings return MSSyst.Text.EncodingInfo.Ref_array;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetMaxByteCount(
      This : access Typ;
      charCount : Integer) return Integer;
   function GetMaxCharCount(
      This : access Typ;
      byteCount : Integer) return Integer;
   function GetPreamble(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetString(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr) return MSSyst.String.Ref;
   function GetString(
      This : access Typ;
      bytes : MSIL_Types.unsigned_int8_Arr;
      index : Integer;
      count : Integer) return MSSyst.String.Ref;
   function IsAlwaysNormalized(
      This : access Typ) return Standard.Boolean;
   function IsAlwaysNormalized(
      This : access Typ;
      form : MSSyst.Text.NormalizationForm.Valuetype) return Standard.Boolean;
   procedure set_DecoderFallback(
      This : access Typ;
      value : MSSyst.Text.DecoderFallback.Ref);
   procedure set_EncoderFallback(
      This : access Typ;
      value : MSSyst.Text.EncoderFallback.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Convert,"Convert");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_ASCII,"get_ASCII");
   pragma Import(MSIL,get_BigEndianUnicode,"get_BigEndianUnicode");
   pragma Import(MSIL,get_BodyName,"get_BodyName");
   pragma Import(MSIL,get_CodePage,"get_CodePage");
   pragma Import(MSIL,get_DecoderFallback,"get_DecoderFallback");
   pragma Import(MSIL,get_Default,"get_Default");
   pragma Import(MSIL,get_EncoderFallback,"get_EncoderFallback");
   pragma Import(MSIL,get_EncodingName,"get_EncodingName");
   pragma Import(MSIL,get_HeaderName,"get_HeaderName");
   pragma Import(MSIL,get_IsBrowserDisplay,"get_IsBrowserDisplay");
   pragma Import(MSIL,get_IsBrowserSave,"get_IsBrowserSave");
   pragma Import(MSIL,get_IsMailNewsDisplay,"get_IsMailNewsDisplay");
   pragma Import(MSIL,get_IsMailNewsSave,"get_IsMailNewsSave");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSingleByte,"get_IsSingleByte");
   pragma Import(MSIL,get_Unicode,"get_Unicode");
   pragma Import(MSIL,get_UTF32,"get_UTF32");
   pragma Import(MSIL,get_UTF7,"get_UTF7");
   pragma Import(MSIL,get_UTF8,"get_UTF8");
   pragma Import(MSIL,get_WebName,"get_WebName");
   pragma Import(MSIL,get_WindowsCodePage,"get_WindowsCodePage");
   pragma Import(MSIL,GetByteCount,"GetByteCount");
   pragma Import(MSIL,GetBytes,"GetBytes");
   pragma Import(MSIL,GetCharCount,"GetCharCount");
   pragma Import(MSIL,GetChars,"GetChars");
   pragma Import(MSIL,GetDecoder,"GetDecoder");
   pragma Import(MSIL,GetEncoder,"GetEncoder");
   pragma Import(MSIL,GetEncoding,"GetEncoding");
   pragma Import(MSIL,GetEncodings,"GetEncodings");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetMaxByteCount,"GetMaxByteCount");
   pragma Import(MSIL,GetMaxCharCount,"GetMaxCharCount");
   pragma Import(MSIL,GetPreamble,"GetPreamble");
   pragma Import(MSIL,GetString,"GetString");
   pragma Import(MSIL,IsAlwaysNormalized,"IsAlwaysNormalized");
   pragma Import(MSIL,set_DecoderFallback,"set_DecoderFallback");
   pragma Import(MSIL,set_EncoderFallback,"set_EncoderFallback");
end MSSyst.Text.Encoding;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Text.Encoding,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Text.Encoding");
