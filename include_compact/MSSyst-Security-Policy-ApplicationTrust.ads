-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Security.ISecurityEncodable;
with type MSSyst.Security.SecurityElement.Ref is access;
with type MSSyst.ApplicationIdentity.Ref is access;
with type MSSyst.Security.Policy.PolicyStatement.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
package MSSyst.Security.Policy.ApplicationTrust is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Security.ISecurityEncodable.Typ
   with record
      null;
   end record;
   function new_ApplicationTrust(
      This : Ref := null;
      applicationIdentity : MSSyst.ApplicationIdentity.Ref) return Ref;
   function new_ApplicationTrust(
      This : Ref := null) return Ref;
   procedure FromXml(
      This : access Typ;
      element : MSSyst.Security.SecurityElement.Ref);
   function get_ApplicationIdentity(
      This : access Typ) return MSSyst.ApplicationIdentity.Ref;
   function get_DefaultGrantSet(
      This : access Typ) return MSSyst.Security.Policy.PolicyStatement.Ref;
   function get_ExtraInfo(
      This : access Typ) return MSSyst.Object.Ref;
   function get_IsApplicationTrustedToRun(
      This : access Typ) return Standard.Boolean;
   function get_Persist(
      This : access Typ) return Standard.Boolean;
   procedure set_ApplicationIdentity(
      This : access Typ;
      value : MSSyst.ApplicationIdentity.Ref);
   procedure set_DefaultGrantSet(
      This : access Typ;
      value : MSSyst.Security.Policy.PolicyStatement.Ref);
   procedure set_ExtraInfo(
      This : access Typ;
      value : MSSyst.Object.Ref);
   procedure set_IsApplicationTrustedToRun(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Persist(
      This : access Typ;
      value : Standard.Boolean);
   function ToXml(
      This : access Typ) return MSSyst.Security.SecurityElement.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_ApplicationTrust);
   pragma Import(MSIL,FromXml,"FromXml");
   pragma Import(MSIL,get_ApplicationIdentity,"get_ApplicationIdentity");
   pragma Import(MSIL,get_DefaultGrantSet,"get_DefaultGrantSet");
   pragma Import(MSIL,get_ExtraInfo,"get_ExtraInfo");
   pragma Import(MSIL,get_IsApplicationTrustedToRun,"get_IsApplicationTrustedToRun");
   pragma Import(MSIL,get_Persist,"get_Persist");
   pragma Import(MSIL,set_ApplicationIdentity,"set_ApplicationIdentity");
   pragma Import(MSIL,set_DefaultGrantSet,"set_DefaultGrantSet");
   pragma Import(MSIL,set_ExtraInfo,"set_ExtraInfo");
   pragma Import(MSIL,set_IsApplicationTrustedToRun,"set_IsApplicationTrustedToRun");
   pragma Import(MSIL,set_Persist,"set_Persist");
   pragma Import(MSIL,ToXml,"ToXml");
end MSSyst.Security.Policy.ApplicationTrust;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Policy.ApplicationTrust,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Policy.ApplicationTrust");
