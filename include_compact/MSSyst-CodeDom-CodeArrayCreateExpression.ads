-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.CodeDom.CodeExpression;
with type MSSyst.Object.Ref is access;
with type MSSyst.CodeDom.CodeTypeReference.Ref is access;
with type MSSyst.CodeDom.CodeExpressionCollection.Ref is access;
with type MSSyst.Collections.IDictionary.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.CodeDom.CodeExpression.Ref_array is access;
package MSSyst.CodeDom.CodeArrayCreateExpression is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.CodeDom.CodeExpression.Typ   with record
      null;
   end record;
   function new_CodeArrayCreateExpression(
      This : Ref := null) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.CodeDom.CodeTypeReference.Ref;
      initializers : MSSyst.CodeDom.CodeExpression.Ref_array) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.String.Ref;
      initializers : MSSyst.CodeDom.CodeExpression.Ref_array) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.Type_k.Ref;
      initializers : MSSyst.CodeDom.CodeExpression.Ref_array) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.CodeDom.CodeTypeReference.Ref;
      size : Integer) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.String.Ref;
      size : Integer) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.Type_k.Ref;
      size : Integer) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.CodeDom.CodeTypeReference.Ref;
      size : MSSyst.CodeDom.CodeExpression.Ref) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.String.Ref;
      size : MSSyst.CodeDom.CodeExpression.Ref) return Ref;
   function new_CodeArrayCreateExpression(
      This : Ref := null;
      createType : MSSyst.Type_k.Ref;
      size : MSSyst.CodeDom.CodeExpression.Ref) return Ref;
   function get_CreateType(
      This : access Typ) return MSSyst.CodeDom.CodeTypeReference.Ref;
   function get_Initializers(
      This : access Typ) return MSSyst.CodeDom.CodeExpressionCollection.Ref;
   function get_Size(
      This : access Typ) return Integer;
   function get_SizeExpression(
      This : access Typ) return MSSyst.CodeDom.CodeExpression.Ref;
   procedure set_CreateType(
      This : access Typ;
      value : MSSyst.CodeDom.CodeTypeReference.Ref);
   procedure set_Size(
      This : access Typ;
      value : Integer);
   procedure set_SizeExpression(
      This : access Typ;
      value : MSSyst.CodeDom.CodeExpression.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_CodeArrayCreateExpression);
   pragma Import(MSIL,get_CreateType,"get_CreateType");
   pragma Import(MSIL,get_Initializers,"get_Initializers");
   pragma Import(MSIL,get_Size,"get_Size");
   pragma Import(MSIL,get_SizeExpression,"get_SizeExpression");
   pragma Import(MSIL,set_CreateType,"set_CreateType");
   pragma Import(MSIL,set_Size,"set_Size");
   pragma Import(MSIL,set_SizeExpression,"set_SizeExpression");
end MSSyst.CodeDom.CodeArrayCreateExpression;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.CodeDom.CodeArrayCreateExpression,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.CodeDom.CodeArrayCreateExpression");
