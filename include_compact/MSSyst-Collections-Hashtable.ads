-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Collections.IDictionary;
with MSSyst.Collections.ICollection;
with MSSyst.Runtime.Serialization.ISerializable;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
with MSSyst.ICloneable;
with type MSSyst.Array_k.Ref is access;
with type MSSyst.Collections.IDictionaryEnumerator.Ref is access;
with type MSSyst.Runtime.Serialization.SerializationInfo.Ref is access;
with type MSSyst.Runtime.Serialization.StreamingContext.Valuetype is tagged;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Collections.IHashCodeProvider.Ref is access;
with type MSSyst.Collections.IComparer.Ref is access;
with type MSSyst.Collections.IEqualityComparer.Ref is access;
package MSSyst.Collections.Hashtable is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.IDictionary.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
         and MSSyst.ICloneable.Typ
   with record
      null;
   end record;
   function new_Hashtable(
      This : Ref := null) return Ref;
   function new_Hashtable(
      This : Ref := null;
      capacity : Integer) return Ref;
   function new_Hashtable(
      This : Ref := null;
      capacity : Integer;
      loadFactor : Float) return Ref;
   function new_Hashtable(
      This : Ref := null;
      capacity : Integer;
      loadFactor : Float;
      hcp : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      capacity : Integer;
      loadFactor : Float;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      hcp : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      capacity : Integer;
      hcp : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      capacity : Integer;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      d : MSSyst.Collections.IDictionary.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      d : MSSyst.Collections.IDictionary.Ref;
      loadFactor : Float) return Ref;
   function new_Hashtable(
      This : Ref := null;
      d : MSSyst.Collections.IDictionary.Ref;
      hcp : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      d : MSSyst.Collections.IDictionary.Ref;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      d : MSSyst.Collections.IDictionary.Ref;
      loadFactor : Float;
      hcp : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   function new_Hashtable(
      This : Ref := null;
      d : MSSyst.Collections.IDictionary.Ref;
      loadFactor : Float;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   procedure Add(
      This : access Typ;
      key : MSSyst.Object.Ref;
      value : MSSyst.Object.Ref);
   procedure Clear(
      This : access Typ);
   function Clone(
      This : access Typ) return MSSyst.Object.Ref;
   function Contains(
      This : access Typ;
      key : MSSyst.Object.Ref) return Standard.Boolean;
   function ContainsKey(
      This : access Typ;
      key : MSSyst.Object.Ref) return Standard.Boolean;
   function ContainsValue(
      This : access Typ;
      value : MSSyst.Object.Ref) return Standard.Boolean;
   procedure CopyTo(
      This : access Typ;
      array_k : MSSyst.Array_k.Ref;
      arrayIndex : Integer);
   function get_Count(
      This : access Typ) return Integer;
   function get_IsFixedSize(
      This : access Typ) return Standard.Boolean;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_Item(
      This : access Typ;
      key : MSSyst.Object.Ref) return MSSyst.Object.Ref;
   function get_Keys(
      This : access Typ) return MSSyst.Collections.ICollection.Ref;
   function get_SyncRoot(
      This : access Typ) return MSSyst.Object.Ref;
   function get_Values(
      This : access Typ) return MSSyst.Collections.ICollection.Ref;
   function GetEnumerator(
      This : access Typ) return MSSyst.Collections.IDictionaryEnumerator.Ref;
   procedure GetObjectData(
      This : access Typ;
      info : MSSyst.Runtime.Serialization.SerializationInfo.Ref;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype);
   procedure OnDeserialization(
      This : access Typ;
      sender : MSSyst.Object.Ref);
   procedure Remove(
      This : access Typ;
      key : MSSyst.Object.Ref);
   procedure set_Item(
      This : access Typ;
      key : MSSyst.Object.Ref;
      value : MSSyst.Object.Ref);
   function Synchronized_k(
      table : MSSyst.Collections.Hashtable.Ref) return MSSyst.Collections.Hashtable.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Hashtable);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Contains,"Contains");
   pragma Import(MSIL,ContainsKey,"ContainsKey");
   pragma Import(MSIL,ContainsValue,"ContainsValue");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsFixedSize,"get_IsFixedSize");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,get_Keys,"get_Keys");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,get_Values,"get_Values");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetObjectData,"GetObjectData");
   pragma Import(MSIL,OnDeserialization,"OnDeserialization");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,set_Item,"set_Item");
   pragma Import(MSIL,Synchronized_k,"Synchronized");
end MSSyst.Collections.Hashtable;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Collections.Hashtable,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Collections.Hashtable");
