-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.IO.Stream.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Decimal.Valuetype is tagged;
with type MSSyst.SByte.Valuetype is tagged;
with type MSSyst.String.Ref is access;
with type MSSyst.Text.Encoding.Ref is access;
package MSSyst.IO.BinaryReader is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function new_BinaryReader(
      This : Ref := null;
      input : MSSyst.IO.Stream.Ref) return Ref;
   function new_BinaryReader(
      This : Ref := null;
      input : MSSyst.IO.Stream.Ref;
      encoding : MSSyst.Text.Encoding.Ref) return Ref;
   procedure Close(
      This : access Typ);
   function get_BaseStream(
      This : access Typ) return MSSyst.IO.Stream.Ref;
   function PeekChar(
      This : access Typ) return Integer;
   function Read(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer) return Integer;
   function Read(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      index : Integer;
      count : Integer) return Integer;
   function Read(
      This : access Typ) return Integer;
   function ReadBoolean(
      This : access Typ) return Standard.Boolean;
   function ReadByte(
      This : access Typ) return MSIL_Types.unsigned_int8;
   function ReadBytes(
      This : access Typ;
      count : Integer) return MSIL_Types.unsigned_int8_Array;
   function ReadChar(
      This : access Typ) return Wide_Character;
   function ReadChars(
      This : access Typ;
      count : Integer) return MSIL_Types.Char_Array;
   function ReadDecimal(
      This : access Typ) return MSSyst.Decimal.Valuetype;
   function ReadDouble(
      This : access Typ) return Long_Float;
   function ReadInt16(
      This : access Typ) return MSIL_Types.int16;
   function ReadInt32(
      This : access Typ) return Integer;
   function ReadInt64(
      This : access Typ) return Long_Long_Integer;
   function ReadSByte(
      This : access Typ) return MSSyst.SByte.Valuetype;
   function ReadSingle(
      This : access Typ) return Float;
   function ReadString(
      This : access Typ) return MSSyst.String.Ref;
   function ReadUInt16(
      This : access Typ) return MSIL_Types.unsigned_int16;
   function ReadUInt32(
      This : access Typ) return MSIL_Types.Unsigned_Integer;
   function ReadUInt64(
      This : access Typ) return MSIL_Types.Unsigned_Long_Long_Integer;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_BinaryReader);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,get_BaseStream,"get_BaseStream");
   pragma Import(MSIL,PeekChar,"PeekChar");
   pragma Import(MSIL,Read,"Read");
   pragma Import(MSIL,ReadBoolean,"ReadBoolean");
   pragma Import(MSIL,ReadByte,"ReadByte");
   pragma Import(MSIL,ReadBytes,"ReadBytes");
   pragma Import(MSIL,ReadChar,"ReadChar");
   pragma Import(MSIL,ReadChars,"ReadChars");
   pragma Import(MSIL,ReadDecimal,"ReadDecimal");
   pragma Import(MSIL,ReadDouble,"ReadDouble");
   pragma Import(MSIL,ReadInt16,"ReadInt16");
   pragma Import(MSIL,ReadInt32,"ReadInt32");
   pragma Import(MSIL,ReadInt64,"ReadInt64");
   pragma Import(MSIL,ReadSByte,"ReadSByte");
   pragma Import(MSIL,ReadSingle,"ReadSingle");
   pragma Import(MSIL,ReadString,"ReadString");
   pragma Import(MSIL,ReadUInt16,"ReadUInt16");
   pragma Import(MSIL,ReadUInt32,"ReadUInt32");
   pragma Import(MSIL,ReadUInt64,"ReadUInt64");
end MSSyst.IO.BinaryReader;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.IO.BinaryReader,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.IO.BinaryReader");
