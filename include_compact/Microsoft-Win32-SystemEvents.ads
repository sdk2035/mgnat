-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.EventHandler.Ref is access;
with type Microsoft.Win32.PowerModeChangedEventHandler.Ref is access;
with type Microsoft.Win32.SessionEndedEventHandler.Ref is access;
with type Microsoft.Win32.SessionEndingEventHandler.Ref is access;
with type Microsoft.Win32.SessionSwitchEventHandler.Ref is access;
with type Microsoft.Win32.TimerElapsedEventHandler.Ref is access;
with type Microsoft.Win32.UserPreferenceChangedEventHandler.Ref is access;
with type Microsoft.Win32.UserPreferenceChangingEventHandler.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Delegate.Ref is access;
with type MSSyst.String.Ref is access;
package Microsoft.Win32.SystemEvents is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   procedure add_DisplaySettingsChanged(
      value : MSSyst.EventHandler.Ref);
   procedure add_DisplaySettingsChanging(
      value : MSSyst.EventHandler.Ref);
   procedure add_EventsThreadShutdown(
      value : MSSyst.EventHandler.Ref);
   procedure add_InstalledFontsChanged(
      value : MSSyst.EventHandler.Ref);
   procedure add_LowMemory(
      value : MSSyst.EventHandler.Ref);
   procedure add_PaletteChanged(
      value : MSSyst.EventHandler.Ref);
   procedure add_PowerModeChanged(
      value : Microsoft.Win32.PowerModeChangedEventHandler.Ref);
   procedure add_SessionEnded(
      value : Microsoft.Win32.SessionEndedEventHandler.Ref);
   procedure add_SessionEnding(
      value : Microsoft.Win32.SessionEndingEventHandler.Ref);
   procedure add_SessionSwitch(
      value : Microsoft.Win32.SessionSwitchEventHandler.Ref);
   procedure add_TimeChanged(
      value : MSSyst.EventHandler.Ref);
   procedure add_TimerElapsed(
      value : Microsoft.Win32.TimerElapsedEventHandler.Ref);
   procedure add_UserPreferenceChanged(
      value : Microsoft.Win32.UserPreferenceChangedEventHandler.Ref);
   procedure add_UserPreferenceChanging(
      value : Microsoft.Win32.UserPreferenceChangingEventHandler.Ref);
   function CreateTimer(
      interval : Integer) return MSIL_Types.native_int;
   procedure InvokeOnEventsThread(
      method : MSSyst.Delegate.Ref);
   procedure KillTimer(
      timerId : MSIL_Types.native_int);
   procedure remove_DisplaySettingsChanged(
      value : MSSyst.EventHandler.Ref);
   procedure remove_DisplaySettingsChanging(
      value : MSSyst.EventHandler.Ref);
   procedure remove_EventsThreadShutdown(
      value : MSSyst.EventHandler.Ref);
   procedure remove_InstalledFontsChanged(
      value : MSSyst.EventHandler.Ref);
   procedure remove_LowMemory(
      value : MSSyst.EventHandler.Ref);
   procedure remove_PaletteChanged(
      value : MSSyst.EventHandler.Ref);
   procedure remove_PowerModeChanged(
      value : Microsoft.Win32.PowerModeChangedEventHandler.Ref);
   procedure remove_SessionEnded(
      value : Microsoft.Win32.SessionEndedEventHandler.Ref);
   procedure remove_SessionEnding(
      value : Microsoft.Win32.SessionEndingEventHandler.Ref);
   procedure remove_SessionSwitch(
      value : Microsoft.Win32.SessionSwitchEventHandler.Ref);
   procedure remove_TimeChanged(
      value : MSSyst.EventHandler.Ref);
   procedure remove_TimerElapsed(
      value : Microsoft.Win32.TimerElapsedEventHandler.Ref);
   procedure remove_UserPreferenceChanged(
      value : Microsoft.Win32.UserPreferenceChangedEventHandler.Ref);
   procedure remove_UserPreferenceChanging(
      value : Microsoft.Win32.UserPreferenceChangingEventHandler.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,add_DisplaySettingsChanged,"add_DisplaySettingsChanged");
   pragma Import(MSIL,add_DisplaySettingsChanging,"add_DisplaySettingsChanging");
   pragma Import(MSIL,add_EventsThreadShutdown,"add_EventsThreadShutdown");
   pragma Import(MSIL,add_InstalledFontsChanged,"add_InstalledFontsChanged");
   pragma Import(MSIL,add_LowMemory,"add_LowMemory");
   pragma Import(MSIL,add_PaletteChanged,"add_PaletteChanged");
   pragma Import(MSIL,add_PowerModeChanged,"add_PowerModeChanged");
   pragma Import(MSIL,add_SessionEnded,"add_SessionEnded");
   pragma Import(MSIL,add_SessionEnding,"add_SessionEnding");
   pragma Import(MSIL,add_SessionSwitch,"add_SessionSwitch");
   pragma Import(MSIL,add_TimeChanged,"add_TimeChanged");
   pragma Import(MSIL,add_TimerElapsed,"add_TimerElapsed");
   pragma Import(MSIL,add_UserPreferenceChanged,"add_UserPreferenceChanged");
   pragma Import(MSIL,add_UserPreferenceChanging,"add_UserPreferenceChanging");
   pragma Import(MSIL,CreateTimer,"CreateTimer");
   pragma Import(MSIL,InvokeOnEventsThread,"InvokeOnEventsThread");
   pragma Import(MSIL,KillTimer,"KillTimer");
   pragma Import(MSIL,remove_DisplaySettingsChanged,"remove_DisplaySettingsChanged");
   pragma Import(MSIL,remove_DisplaySettingsChanging,"remove_DisplaySettingsChanging");
   pragma Import(MSIL,remove_EventsThreadShutdown,"remove_EventsThreadShutdown");
   pragma Import(MSIL,remove_InstalledFontsChanged,"remove_InstalledFontsChanged");
   pragma Import(MSIL,remove_LowMemory,"remove_LowMemory");
   pragma Import(MSIL,remove_PaletteChanged,"remove_PaletteChanged");
   pragma Import(MSIL,remove_PowerModeChanged,"remove_PowerModeChanged");
   pragma Import(MSIL,remove_SessionEnded,"remove_SessionEnded");
   pragma Import(MSIL,remove_SessionEnding,"remove_SessionEnding");
   pragma Import(MSIL,remove_SessionSwitch,"remove_SessionSwitch");
   pragma Import(MSIL,remove_TimeChanged,"remove_TimeChanged");
   pragma Import(MSIL,remove_TimerElapsed,"remove_TimerElapsed");
   pragma Import(MSIL,remove_UserPreferenceChanged,"remove_UserPreferenceChanged");
   pragma Import(MSIL,remove_UserPreferenceChanging,"remove_UserPreferenceChanging");
end Microsoft.Win32.SystemEvents;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,Microsoft.Win32.SystemEvents,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]Microsoft.Win32.SystemEvents");
