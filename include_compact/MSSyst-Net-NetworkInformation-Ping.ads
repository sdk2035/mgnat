-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.Net.NetworkInformation.PingCompletedEventHandler.Ref is access;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.ComponentModel.IContainer.Ref is access;
with type MSSyst.ComponentModel.ISite.Ref is access;
with type MSSyst.Net.NetworkInformation.PingReply.Ref is access;
with type MSSyst.Net.IPAddress.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Net.NetworkInformation.PingOptions.Ref is access;
package MSSyst.Net.NetworkInformation.Ping is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
   with record
      null;
   end record;
   function new_Ping(
      This : Ref := null) return Ref;
   procedure add_PingCompleted(
      This : access Typ;
      value : MSSyst.Net.NetworkInformation.PingCompletedEventHandler.Ref);
   procedure remove_PingCompleted(
      This : access Typ;
      value : MSSyst.Net.NetworkInformation.PingCompletedEventHandler.Ref);
   function Send(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      timeout : Integer) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      timeout : Integer) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : MSSyst.Net.NetworkInformation.PingOptions.Ref) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : MSSyst.Net.NetworkInformation.PingOptions.Ref) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   function Send(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr) return MSSyst.Net.NetworkInformation.PingReply.Ref;
   procedure SendAsync(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      timeout : Integer;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      timeout : Integer;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : MSSyst.String.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : MSSyst.Net.NetworkInformation.PingOptions.Ref;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : MSSyst.Net.NetworkInformation.PingOptions.Ref;
      userToken : MSSyst.Object.Ref);
   procedure SendAsync(
      This : access Typ;
      address : MSSyst.Net.IPAddress.Ref;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      userToken : MSSyst.Object.Ref);
   procedure SendAsyncCancel(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Ping);
   pragma Import(MSIL,add_PingCompleted,"add_PingCompleted");
   pragma Import(MSIL,remove_PingCompleted,"remove_PingCompleted");
   pragma Import(MSIL,Send,"Send");
   pragma Import(MSIL,SendAsync,"SendAsync");
   pragma Import(MSIL,SendAsyncCancel,"SendAsyncCancel");
end MSSyst.Net.NetworkInformation.Ping;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.NetworkInformation.Ping,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.NetworkInformation.Ping");
