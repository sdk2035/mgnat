-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.Runtime.CompilerServices.RuntimeHelpers.TryCode.Ref is access;
with type MSSyst.Runtime.CompilerServices.RuntimeHelpers.CleanupCode.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Array_k.Ref is access;
with type MSSyst.RuntimeFieldHandle.Valuetype is tagged;
with type MSSyst.Delegate.Ref is access;
with type MSSyst.RuntimeMethodHandle.Valuetype is tagged;
with MSSyst.RuntimeTypeHandle;
with type MSSyst.ModuleHandle.Valuetype is tagged;
with type MSSyst.String.Ref is access;
package MSSyst.Runtime.CompilerServices.RuntimeHelpers is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   function Equals(
      o1 : MSSyst.Object.Ref;
      o2 : MSSyst.Object.Ref) return Standard.Boolean;
   procedure ExecuteCodeWithGuaranteedCleanup(
      code : MSSyst.Runtime.CompilerServices.RuntimeHelpers.TryCode.Ref;
      backoutCode : MSSyst.Runtime.CompilerServices.RuntimeHelpers.CleanupCode.Ref;
      userData : MSSyst.Object.Ref);
   function get_OffsetToStringData return Integer;
   function GetHashCode(
      o : MSSyst.Object.Ref) return Integer;
   function GetObjectValue(
      obj : MSSyst.Object.Ref) return MSSyst.Object.Ref;
   procedure InitializeArray(
      array_k : MSSyst.Array_k.Ref;
      fldHandle : MSSyst.RuntimeFieldHandle.Valuetype);
   procedure PrepareConstrainedRegions;
   procedure PrepareConstrainedRegionsNoOP;
   procedure PrepareDelegate(
      d : MSSyst.Delegate.Ref);
   procedure PrepareMethod(
      method : MSSyst.RuntimeMethodHandle.Valuetype);
   procedure PrepareMethod(
      method : MSSyst.RuntimeMethodHandle.Valuetype;
      instantiation : MSSyst.RuntimeTypeHandle.Valuetype_array);
   procedure ProbeForSufficientStack;
   procedure RunClassConstructor(
      type_k : MSSyst.RuntimeTypeHandle.Valuetype);
   procedure RunModuleConstructor(
      module : MSSyst.ModuleHandle.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,ExecuteCodeWithGuaranteedCleanup,"ExecuteCodeWithGuaranteedCleanup");
   pragma Import(MSIL,get_OffsetToStringData,"get_OffsetToStringData");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetObjectValue,"GetObjectValue");
   pragma Import(MSIL,InitializeArray,"InitializeArray");
   pragma Import(MSIL,PrepareConstrainedRegions,"PrepareConstrainedRegions");
   pragma Import(MSIL,PrepareConstrainedRegionsNoOP,"PrepareConstrainedRegionsNoOP");
   pragma Import(MSIL,PrepareDelegate,"PrepareDelegate");
   pragma Import(MSIL,PrepareMethod,"PrepareMethod");
   pragma Import(MSIL,ProbeForSufficientStack,"ProbeForSufficientStack");
   pragma Import(MSIL,RunClassConstructor,"RunClassConstructor");
   pragma Import(MSIL,RunModuleConstructor,"RunModuleConstructor");
end MSSyst.Runtime.CompilerServices.RuntimeHelpers;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Runtime.CompilerServices.RuntimeHelpers,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Runtime.CompilerServices.RuntimeHelpers");
