-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.ComponentModel.IComponent.Ref is access;
with type MSSyst.IDisposable.Ref is access;
with type MSSyst.IServiceProvider.Ref is access;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Data.MappingType;
with type MSSyst.ComponentModel.IContainer.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Data.PropertyCollection.Ref is access;
with type MSSyst.ComponentModel.ISite.Ref is access;
with type MSSyst.Data.DataTable.Ref is access;
with MSSyst.ComponentModel.MarshalByValueComponent;
package MSSyst.Data.DataColumn is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Arr1 is array(Natural range <>) of Ref;
   type Ref_Array is access all Arr1;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ(
         I_IComponent : MSSyst.ComponentModel.IComponent.Ref;
         I_IDisposable : MSSyst.IDisposable.Ref;
         I_IServiceProvider : MSSyst.IServiceProvider.Ref
      ) is new MSSyst.ComponentModel.MarshalByValueComponent.Typ(
         I_IComponent => I_IComponent,
         I_IDisposable => I_IDisposable,
         I_IServiceProvider => I_IServiceProvider
      ) with record
      null;
   end record;
   function new_DataColumn(
      This : Ref := null) return Ref;
   function new_DataColumn(
      This : Ref := null;
      columnName : MSSyst.String.Ref) return Ref;
   function new_DataColumn(
      This : Ref := null;
      columnName : MSSyst.String.Ref;
      dataType : MSSyst.Type_k.Ref) return Ref;
   function new_DataColumn(
      This : Ref := null;
      columnName : MSSyst.String.Ref;
      dataType : MSSyst.Type_k.Ref;
      expr : MSSyst.String.Ref) return Ref;
   function new_DataColumn(
      This : Ref := null;
      columnName : MSSyst.String.Ref;
      dataType : MSSyst.Type_k.Ref;
      expr : MSSyst.String.Ref;
      type_k : MSSyst.Data.MappingType.Valuetype) return Ref;
   function get_AllowDBNull(
      This : access Typ) return Standard.Boolean;
   function get_AutoIncrement(
      This : access Typ) return Standard.Boolean;
   function get_AutoIncrementSeed(
      This : access Typ) return Long_Long_Integer;
   function get_AutoIncrementStep(
      This : access Typ) return Long_Long_Integer;
   function get_Caption(
      This : access Typ) return MSSyst.String.Ref;
   function get_ColumnMapping(
      This : access Typ) return MSSyst.Data.MappingType.Valuetype;
   function get_ColumnName(
      This : access Typ) return MSSyst.String.Ref;
   function get_DataType(
      This : access Typ) return MSSyst.Type_k.Ref;
   function get_DefaultValue(
      This : access Typ) return MSSyst.Object.Ref;
   function get_Expression(
      This : access Typ) return MSSyst.String.Ref;
   function get_ExtendedProperties(
      This : access Typ) return MSSyst.Data.PropertyCollection.Ref;
   function get_MaxLength(
      This : access Typ) return Integer;
   function get_Namespace(
      This : access Typ) return MSSyst.String.Ref;
   function get_Ordinal(
      This : access Typ) return Integer;
   function get_Prefix(
      This : access Typ) return MSSyst.String.Ref;
   function get_ReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_Table(
      This : access Typ) return MSSyst.Data.DataTable.Ref;
   function get_Unique(
      This : access Typ) return Standard.Boolean;
   procedure set_AllowDBNull(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_AutoIncrement(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_AutoIncrementSeed(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_AutoIncrementStep(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_Caption(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_ColumnMapping(
      This : access Typ;
      value : MSSyst.Data.MappingType.Valuetype);
   procedure set_ColumnName(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_DataType(
      This : access Typ;
      value : MSSyst.Type_k.Ref);
   procedure set_DefaultValue(
      This : access Typ;
      value : MSSyst.Object.Ref);
   procedure set_Expression(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_MaxLength(
      This : access Typ;
      value : Integer);
   procedure set_Namespace(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Prefix(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_ReadOnly(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Unique(
      This : access Typ;
      value : Standard.Boolean);
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_DataColumn);
   pragma Import(MSIL,get_AllowDBNull,"get_AllowDBNull");
   pragma Import(MSIL,get_AutoIncrement,"get_AutoIncrement");
   pragma Import(MSIL,get_AutoIncrementSeed,"get_AutoIncrementSeed");
   pragma Import(MSIL,get_AutoIncrementStep,"get_AutoIncrementStep");
   pragma Import(MSIL,get_Caption,"get_Caption");
   pragma Import(MSIL,get_ColumnMapping,"get_ColumnMapping");
   pragma Import(MSIL,get_ColumnName,"get_ColumnName");
   pragma Import(MSIL,get_DataType,"get_DataType");
   pragma Import(MSIL,get_DefaultValue,"get_DefaultValue");
   pragma Import(MSIL,get_Expression,"get_Expression");
   pragma Import(MSIL,get_ExtendedProperties,"get_ExtendedProperties");
   pragma Import(MSIL,get_MaxLength,"get_MaxLength");
   pragma Import(MSIL,get_Namespace,"get_Namespace");
   pragma Import(MSIL,get_Ordinal,"get_Ordinal");
   pragma Import(MSIL,get_Prefix,"get_Prefix");
   pragma Import(MSIL,get_ReadOnly,"get_ReadOnly");
   pragma Import(MSIL,get_Table,"get_Table");
   pragma Import(MSIL,get_Unique,"get_Unique");
   pragma Import(MSIL,set_AllowDBNull,"set_AllowDBNull");
   pragma Import(MSIL,set_AutoIncrement,"set_AutoIncrement");
   pragma Import(MSIL,set_AutoIncrementSeed,"set_AutoIncrementSeed");
   pragma Import(MSIL,set_AutoIncrementStep,"set_AutoIncrementStep");
   pragma Import(MSIL,set_Caption,"set_Caption");
   pragma Import(MSIL,set_ColumnMapping,"set_ColumnMapping");
   pragma Import(MSIL,set_ColumnName,"set_ColumnName");
   pragma Import(MSIL,set_DataType,"set_DataType");
   pragma Import(MSIL,set_DefaultValue,"set_DefaultValue");
   pragma Import(MSIL,set_Expression,"set_Expression");
   pragma Import(MSIL,set_MaxLength,"set_MaxLength");
   pragma Import(MSIL,set_Namespace,"set_Namespace");
   pragma Import(MSIL,set_Prefix,"set_Prefix");
   pragma Import(MSIL,set_ReadOnly,"set_ReadOnly");
   pragma Import(MSIL,set_Unique,"set_Unique");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Data.DataColumn;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Data.DataColumn,
   ".ver 1:0:5000:0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[System.Data]System.Data.DataColumn");
