-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Security.AccessControl.AceFlags;
with MSSyst.Security.AccessControl.AceType;
with MSSyst.Security.AccessControl.AuditFlags;
with MSSyst.Security.AccessControl.InheritanceFlags;
with MSSyst.Security.AccessControl.PropagationFlags;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
package MSSyst.Security.AccessControl.GenericAce is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   function Copy(
      This : access Typ) return MSSyst.Security.AccessControl.GenericAce.Ref;
   function CreateFromBinaryForm(
      binaryForm : MSIL_Types.unsigned_int8_Arr;
      offset : Integer) return MSSyst.Security.AccessControl.GenericAce.Ref;
   function Equals(
      This : access Typ;
      o : MSSyst.Object.Ref) return Standard.Boolean;
   function get_AceFlags(
      This : access Typ) return MSSyst.Security.AccessControl.AceFlags.Valuetype;
   function get_AceType(
      This : access Typ) return MSSyst.Security.AccessControl.AceType.Valuetype;
   function get_AuditFlags(
      This : access Typ) return MSSyst.Security.AccessControl.AuditFlags.Valuetype;
   function get_BinaryLength(
      This : access Typ) return Integer;
   function get_InheritanceFlags(
      This : access Typ) return MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
   function get_IsInherited(
      This : access Typ) return Standard.Boolean;
   function get_PropagationFlags(
      This : access Typ) return MSSyst.Security.AccessControl.PropagationFlags.Valuetype;
   procedure GetBinaryForm(
      This : access Typ;
      binaryForm : MSIL_Types.unsigned_int8_Arr;
      offset : Integer);
   function GetHashCode(
      This : access Typ) return Integer;
   function op_Equality(
      left : MSSyst.Security.AccessControl.GenericAce.Ref;
      right : MSSyst.Security.AccessControl.GenericAce.Ref) return Standard.Boolean;
   function op_Inequality(
      left : MSSyst.Security.AccessControl.GenericAce.Ref;
      right : MSSyst.Security.AccessControl.GenericAce.Ref) return Standard.Boolean;
   procedure set_AceFlags(
      This : access Typ;
      value : MSSyst.Security.AccessControl.AceFlags.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,CreateFromBinaryForm,"CreateFromBinaryForm");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_AceFlags,"get_AceFlags");
   pragma Import(MSIL,get_AceType,"get_AceType");
   pragma Import(MSIL,get_AuditFlags,"get_AuditFlags");
   pragma Import(MSIL,get_BinaryLength,"get_BinaryLength");
   pragma Import(MSIL,get_InheritanceFlags,"get_InheritanceFlags");
   pragma Import(MSIL,get_IsInherited,"get_IsInherited");
   pragma Import(MSIL,get_PropagationFlags,"get_PropagationFlags");
   pragma Import(MSIL,GetBinaryForm,"GetBinaryForm");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,op_Equality,"op_Equality");
   pragma Import(MSIL,op_Inequality,"op_Inequality");
   pragma Import(MSIL,set_AceFlags,"set_AceFlags");
end MSSyst.Security.AccessControl.GenericAce;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.AccessControl.GenericAce,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.AccessControl.GenericAce");
