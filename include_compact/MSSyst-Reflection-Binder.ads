-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.Reflection.FieldInfo.Ref is access;
with MSSyst.Reflection.BindingFlags;
with type MSSyst.Reflection.FieldInfo.Ref_array is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
with type MSSyst.Reflection.MethodBase.Ref is access;
with type MSSyst.Reflection.MethodBase.Ref_array is access;
with type MSSyst.Object.Ref_array_addrof is access;
with MSSyst.Reflection.ParameterModifier;
with type MSSyst.String.Ref_array is access;
with type MSSyst.Object.Ref_addrof is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Type_k.Ref_array is access;
with type MSSyst.Reflection.PropertyInfo.Ref is access;
with type MSSyst.Reflection.PropertyInfo.Ref_array is access;
with type MSSyst.String.Ref is access;
package MSSyst.Reflection.Binder is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   function BindToField(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : MSSyst.Reflection.FieldInfo.Ref_array;
      value : MSSyst.Object.Ref;
      culture : MSSyst.Globalization.CultureInfo.Ref) return MSSyst.Reflection.FieldInfo.Ref;
   function BindToMethod(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : MSSyst.Reflection.MethodBase.Ref_array;
      args : MSSyst.Object.Ref_array_addrof;
      modifiers : MSSyst.Reflection.ParameterModifier.Valuetype_array;
      culture : MSSyst.Globalization.CultureInfo.Ref;
      names : MSSyst.String.Ref_array;
      state : MSSyst.Object.Ref_addrof) return MSSyst.Reflection.MethodBase.Ref;
   function ChangeType(
      This : access Typ;
      value : MSSyst.Object.Ref;
      type_k : MSSyst.Type_k.Ref;
      culture : MSSyst.Globalization.CultureInfo.Ref) return MSSyst.Object.Ref;
   procedure ReorderArgumentArray(
      This : access Typ;
      args : MSSyst.Object.Ref_array_addrof;
      state : MSSyst.Object.Ref);
   function SelectMethod(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : MSSyst.Reflection.MethodBase.Ref_array;
      types : MSSyst.Type_k.Ref_array;
      modifiers : MSSyst.Reflection.ParameterModifier.Valuetype_array) return MSSyst.Reflection.MethodBase.Ref;
   function SelectProperty(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : MSSyst.Reflection.PropertyInfo.Ref_array;
      returnType : MSSyst.Type_k.Ref;
      indexes : MSSyst.Type_k.Ref_array;
      modifiers : MSSyst.Reflection.ParameterModifier.Valuetype_array) return MSSyst.Reflection.PropertyInfo.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,BindToField,"BindToField");
   pragma Import(MSIL,BindToMethod,"BindToMethod");
   pragma Import(MSIL,ChangeType,"ChangeType");
   pragma Import(MSIL,ReorderArgumentArray,"ReorderArgumentArray");
   pragma Import(MSIL,SelectMethod,"SelectMethod");
   pragma Import(MSIL,SelectProperty,"SelectProperty");
end MSSyst.Reflection.Binder;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Reflection.Binder,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Reflection.Binder");
