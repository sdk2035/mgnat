-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.TypeCode;
with type MSSyst.String.Ref is access;
with type MSSyst.IFormatProvider.Ref is access;
package MSSyst.Net.Sockets.ProtocolType is
   type ValueType is (
      Unknown,
      Unspecified,
      Icmp,
      Igmp,
      Ggp,
      IPv4,
      Tcp,
      Pup,
      Udp,
      Idp,
      IPv6,
      IPv6RoutingHeader,
      IPv6FragmentHeader,
      IPSecEncapsulatingSecurityPayload,
      IPSecAuthenticationHeader,
      IcmpV6,
      IPv6NoNextHeader,
      IPv6DestinationOptions,
      ND,
      Raw,
      Ipx,
      Spx,
      SpxII);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      Unknown => -1,
      Unspecified =>  0,
      Icmp =>  1,
      Igmp =>  2,
      Ggp =>  3,
      IPv4 =>  4,
      Tcp =>  6,
      Pup =>  12,
      Udp =>  17,
      Idp =>  22,
      IPv6 =>  41,
      IPv6RoutingHeader =>  43,
      IPv6FragmentHeader =>  44,
      IPSecEncapsulatingSecurityPayload =>  50,
      IPSecAuthenticationHeader =>  51,
      IcmpV6 =>  58,
      IPv6NoNextHeader =>  59,
      IPv6DestinationOptions =>  60,
      ND =>  77,
      Raw =>  255,
      Ipx =>  1000,
      Spx =>  1256,
      SpxII =>  1257);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   IPv6HopByHopOptions : constant Valuetype := Unspecified;
   IP : constant Valuetype := Unspecified;
   function CompareTo(
      This : Valuetype;
      target : MSSyst.Object.Ref) return Integer;
   function Equals(
      This : Valuetype;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return MSSyst.Type_k.Ref;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref) return MSSyst.String.Ref;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Net.Sockets.ProtocolType;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.Sockets.ProtocolType,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Sockets.ProtocolType");
