-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Runtime.Serialization.ISerializable;
with type MSSyst.SByte.Valuetype is tagged;
with type MSSyst.Decimal.Valuetype is tagged;
with type MSSyst.String.Ref is access;
with type MSSyst.IFormatProvider.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Text.StringBuilder is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   function new_StringBuilder(
      This : Ref := null) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      capacity : Integer) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      value : MSSyst.String.Ref) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      value : MSSyst.String.Ref;
      capacity : Integer) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      value : MSSyst.String.Ref;
      startIndex : Integer;
      length : Integer;
      capacity : Integer) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      capacity : Integer;
      maxCapacity : Integer) return Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.int16) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Long_Long_Integer) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Wide_Character) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Standard.Boolean) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSSyst.SByte.Valuetype) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.unsigned_int8) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Float) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.Unsigned_Long_Long_Integer) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSSyst.Object.Ref) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.Char_Arr) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.Unsigned_Integer) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Long_Float) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSSyst.Decimal.Valuetype) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.unsigned_int16) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSSyst.String.Ref) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSSyst.String.Ref;
      startIndex : Integer;
      count : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : Wide_Character;
      repeatCount : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.Char_Arr;
      startIndex : Integer;
      charCount : Integer) return MSSyst.Text.StringBuilder.Ref;
   function AppendFormat(
      This : access Typ;
      provider : MSSyst.IFormatProvider.Ref;
      format : MSSyst.String.Ref;
      args : MSSyst.Object.Ref_array) return MSSyst.Text.StringBuilder.Ref;
   function AppendFormat(
      This : access Typ;
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref) return MSSyst.Text.StringBuilder.Ref;
   function AppendFormat(
      This : access Typ;
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref) return MSSyst.Text.StringBuilder.Ref;
   function AppendFormat(
      This : access Typ;
      format : MSSyst.String.Ref;
      args : MSSyst.Object.Ref_array) return MSSyst.Text.StringBuilder.Ref;
   function AppendFormat(
      This : access Typ;
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref) return MSSyst.Text.StringBuilder.Ref;
   function AppendLine(
      This : access Typ;
      value : MSSyst.String.Ref) return MSSyst.Text.StringBuilder.Ref;
   function AppendLine(
      This : access Typ) return MSSyst.Text.StringBuilder.Ref;
   procedure CopyTo(
      This : access Typ;
      sourceIndex : Integer;
      destination : MSIL_Types.Char_Arr;
      destinationIndex : Integer;
      count : Integer);
   function EnsureCapacity(
      This : access Typ;
      capacity : Integer) return Integer;
   function Equals(
      This : access Typ;
      sb : MSSyst.Text.StringBuilder.Ref) return Standard.Boolean;
   function get_Capacity(
      This : access Typ) return Integer;
   function get_Chars(
      This : access Typ;
      index : Integer) return Wide_Character;
   function get_Length(
      This : access Typ) return Integer;
   function get_MaxCapacity(
      This : access Typ) return Integer;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Long_Float) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.Decimal.Valuetype) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Long_Long_Integer) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Float) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Unsigned_Long_Long_Integer) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.Object.Ref) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.unsigned_int16) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Unsigned_Integer) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.SByte.Valuetype) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.unsigned_int8) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Standard.Boolean) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.String.Ref;
      count : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.String.Ref) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Char_Arr;
      startIndex : Integer;
      charCount : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Char_Arr) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.int16) return MSSyst.Text.StringBuilder.Ref;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Wide_Character) return MSSyst.Text.StringBuilder.Ref;
   function Remove(
      This : access Typ;
      startIndex : Integer;
      length : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Replace(
      This : access Typ;
      oldChar : Wide_Character;
      newChar : Wide_Character) return MSSyst.Text.StringBuilder.Ref;
   function Replace(
      This : access Typ;
      oldChar : Wide_Character;
      newChar : Wide_Character;
      startIndex : Integer;
      count : Integer) return MSSyst.Text.StringBuilder.Ref;
   function Replace(
      This : access Typ;
      oldValue : MSSyst.String.Ref;
      newValue : MSSyst.String.Ref) return MSSyst.Text.StringBuilder.Ref;
   function Replace(
      This : access Typ;
      oldValue : MSSyst.String.Ref;
      newValue : MSSyst.String.Ref;
      startIndex : Integer;
      count : Integer) return MSSyst.Text.StringBuilder.Ref;
   procedure set_Capacity(
      This : access Typ;
      value : Integer);
   procedure set_Chars(
      This : access Typ;
      index : Integer;
      value : Wide_Character);
   procedure set_Length(
      This : access Typ;
      value : Integer);
   function ToString(
      This : access Typ;
      startIndex : Integer;
      length : Integer) return MSSyst.String.Ref;
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_StringBuilder);
   pragma Import(MSIL,Append,"Append");
   pragma Import(MSIL,AppendFormat,"AppendFormat");
   pragma Import(MSIL,AppendLine,"AppendLine");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,EnsureCapacity,"EnsureCapacity");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Capacity,"get_Capacity");
   pragma Import(MSIL,get_Chars,"get_Chars");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,get_MaxCapacity,"get_MaxCapacity");
   pragma Import(MSIL,Insert,"Insert");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,Replace,"Replace");
   pragma Import(MSIL,set_Capacity,"set_Capacity");
   pragma Import(MSIL,set_Chars,"set_Chars");
   pragma Import(MSIL,set_Length,"set_Length");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Text.StringBuilder;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Text.StringBuilder,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Text.StringBuilder");
