-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.TypeCode;
with type MSSyst.String.Ref is access;
with type MSSyst.IFormatProvider.Ref is access;
package MSSyst.Security.AccessControl.FileSystemRights is
   type ValueType is (
      ListDirectory,
      ReadData,
      CreateFiles,
      AppendData,
      ReadExtendedAttributes,
      WriteExtendedAttributes,
      ExecuteFile,
      DeleteSubdirectoriesAndFiles,
      ReadAttributes,
      WriteAttributes,
      Write,
      Delete,
      ReadPermissions,
      Read,
      ReadAndExecute,
      Modify,
      ChangePermissions,
      TakeOwnership,
      Synchronize,
      FullControl);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      ListDirectory =>  0,
      ReadData =>  1,
      CreateFiles =>  2,
      AppendData =>  4,
      ReadExtendedAttributes =>  8,
      WriteExtendedAttributes =>  16,
      ExecuteFile =>  32,
      DeleteSubdirectoriesAndFiles =>  64,
      ReadAttributes =>  128,
      WriteAttributes =>  256,
      Write =>  278,
      Delete =>  65536,
      ReadPermissions =>  131072,
      Read =>  131209,
      ReadAndExecute =>  131241,
      Modify =>  197055,
      ChangePermissions =>  262144,
      TakeOwnership =>  524288,
      Synchronize =>  1048576,
      FullControl =>  2032127);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function "+" (L,R : Valuetype) return Valuetype;
   pragma Import (MSIL, "+", "+");
   WriteData : constant Valuetype := CreateFiles;
   CreateDirectories : constant Valuetype := AppendData;
   Traverse : constant Valuetype := ExecuteFile;
   function CompareTo(
      This : Valuetype;
      target : MSSyst.Object.Ref) return Integer;
   function Equals(
      This : Valuetype;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return MSSyst.Type_k.Ref;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref) return MSSyst.String.Ref;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Security.AccessControl.FileSystemRights;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.AccessControl.FileSystemRights,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.AccessControl.FileSystemRights");
