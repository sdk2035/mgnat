-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.ICloneable;
with MSSyst.Runtime.Serialization.ISerializable;
with type MSSyst.Delegate.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Reflection.MethodInfo.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Runtime.Serialization.SerializationInfo.Ref is access;
with type MSSyst.Runtime.Serialization.StreamingContext.Valuetype is tagged;
package MSSyst.Delegate is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ
         and MSSyst.ICloneable.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   function Clone(
      This : access Typ) return MSSyst.Object.Ref;
   function Combine(
      a : MSSyst.Delegate.Ref;
      b : MSSyst.Delegate.Ref) return MSSyst.Delegate.Ref;
   function Combine(
      delegates : MSSyst.Delegate.Ref_array) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      target : MSSyst.Type_k.Ref;
      method : MSSyst.String.Ref) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      target : MSSyst.Type_k.Ref;
      method : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      target : MSSyst.Object.Ref;
      method : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      throwOnBindFailure : Standard.Boolean) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      target : MSSyst.Object.Ref;
      method : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      firstArgument : MSSyst.Object.Ref;
      method : MSSyst.Reflection.MethodInfo.Ref) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      firstArgument : MSSyst.Object.Ref;
      method : MSSyst.Reflection.MethodInfo.Ref;
      throwOnBindFailure : Standard.Boolean) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      method : MSSyst.Reflection.MethodInfo.Ref;
      throwOnBindFailure : Standard.Boolean) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      target : MSSyst.Type_k.Ref;
      method : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      throwOnBindFailure : Standard.Boolean) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      method : MSSyst.Reflection.MethodInfo.Ref) return MSSyst.Delegate.Ref;
   function CreateDelegate(
      type_k : MSSyst.Type_k.Ref;
      target : MSSyst.Object.Ref;
      method : MSSyst.String.Ref) return MSSyst.Delegate.Ref;
   function DynamicInvoke(
      This : access Typ;
      args : MSSyst.Object.Ref_array) return MSSyst.Object.Ref;
   function Equals(
      This : access Typ;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function get_Method(
      This : access Typ) return MSSyst.Reflection.MethodInfo.Ref;
   function get_Target(
      This : access Typ) return MSSyst.Object.Ref;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetInvocationList(
      This : access Typ) return MSSyst.Delegate.Ref_array;
   procedure GetObjectData(
      This : access Typ;
      info : MSSyst.Runtime.Serialization.SerializationInfo.Ref;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype);
   function op_Equality(
      d1 : MSSyst.Delegate.Ref;
      d2 : MSSyst.Delegate.Ref) return Standard.Boolean;
   function op_Inequality(
      d1 : MSSyst.Delegate.Ref;
      d2 : MSSyst.Delegate.Ref) return Standard.Boolean;
   function Remove(
      source : MSSyst.Delegate.Ref;
      value : MSSyst.Delegate.Ref) return MSSyst.Delegate.Ref;
   function RemoveAll(
      source : MSSyst.Delegate.Ref;
      value : MSSyst.Delegate.Ref) return MSSyst.Delegate.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Combine,"Combine");
   pragma Import(MSIL,CreateDelegate,"CreateDelegate");
   pragma Import(MSIL,DynamicInvoke,"DynamicInvoke");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Method,"get_Method");
   pragma Import(MSIL,get_Target,"get_Target");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetInvocationList,"GetInvocationList");
   pragma Import(MSIL,GetObjectData,"GetObjectData");
   pragma Import(MSIL,op_Equality,"op_Equality");
   pragma Import(MSIL,op_Inequality,"op_Inequality");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,RemoveAll,"RemoveAll");
end MSSyst.Delegate;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Delegate,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Delegate");
