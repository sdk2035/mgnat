-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.Threading.ThreadExceptionEventHandler.Ref is access;
with type MSSyst.Windows.Forms.IMessageFilter.Ref is access;
with type MSSyst.ComponentModel.CancelEventArgs.Ref is access;
with MSSyst.Windows.Forms.Message;
with type MSSyst.String.Ref is access;
with type Microsoft.Win32.RegistryKey.Ref is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
with type MSSyst.Windows.Forms.InputLanguage.Ref is access;
with type MSSyst.Windows.Forms.FormCollection.Ref is access;
with MSSyst.Windows.Forms.VisualStyles.VisualStyleState;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Threading.ApartmentState;
with type MSSyst.Exception_k.Ref is access;
with type MSSyst.EventArgs.Ref is access;
with type MSSyst.Windows.Forms.Application.MessageLoopCallback.Ref is access;
with type MSSyst.Windows.Forms.Form.Ref is access;
with type MSSyst.Windows.Forms.ApplicationContext.Ref is access;
with MSSyst.Windows.Forms.PowerState;
with MSSyst.Windows.Forms.UnhandledExceptionMode;
package MSSyst.Windows.Forms.Application is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   procedure add_ApplicationExit(
      value : MSSyst.EventHandler.Ref);
   procedure add_EnterThreadModal(
      value : MSSyst.EventHandler.Ref);
   procedure add_Idle(
      value : MSSyst.EventHandler.Ref);
   procedure add_LeaveThreadModal(
      value : MSSyst.EventHandler.Ref);
   procedure add_ThreadException(
      value : MSSyst.Threading.ThreadExceptionEventHandler.Ref);
   procedure add_ThreadExit(
      value : MSSyst.EventHandler.Ref);
   procedure AddMessageFilter(
      value : MSSyst.Windows.Forms.IMessageFilter.Ref);
   procedure DoEvents;
   procedure EnableVisualStyles;
   procedure Exit_k(
      e : MSSyst.ComponentModel.CancelEventArgs.Ref);
   procedure Exit_k;
   procedure ExitThread;
   function FilterMessage(
      message : MSSyst.Windows.Forms.Message.Valuetype_addrof) return Standard.Boolean;
   function get_AllowQuit return Standard.Boolean;
   function get_CommonAppDataPath return MSSyst.String.Ref;
   function get_CommonAppDataRegistry return Microsoft.Win32.RegistryKey.Ref;
   function get_CompanyName return MSSyst.String.Ref;
   function get_CurrentCulture return MSSyst.Globalization.CultureInfo.Ref;
   function get_CurrentInputLanguage return MSSyst.Windows.Forms.InputLanguage.Ref;
   function get_ExecutablePath return MSSyst.String.Ref;
   function get_LocalUserAppDataPath return MSSyst.String.Ref;
   function get_MessageLoop return Standard.Boolean;
   function get_OpenForms return MSSyst.Windows.Forms.FormCollection.Ref;
   function get_ProductName return MSSyst.String.Ref;
   function get_ProductVersion return MSSyst.String.Ref;
   function get_RenderWithVisualStyles return Standard.Boolean;
   function get_SafeTopLevelCaptionFormat return MSSyst.String.Ref;
   function get_StartupPath return MSSyst.String.Ref;
   function get_UserAppDataPath return MSSyst.String.Ref;
   function get_UserAppDataRegistry return Microsoft.Win32.RegistryKey.Ref;
   function get_UseWaitCursor return Standard.Boolean;
   function get_VisualStyleState return MSSyst.Windows.Forms.VisualStyles.VisualStyleState.Valuetype;
   function OleRequired return MSSyst.Threading.ApartmentState.Valuetype;
   procedure OnThreadException(
      t : MSSyst.Exception_k.Ref);
   procedure RaiseIdle(
      e : MSSyst.EventArgs.Ref);
   procedure RegisterMessageLoop(
      callback : MSSyst.Windows.Forms.Application.MessageLoopCallback.Ref);
   procedure remove_ApplicationExit(
      value : MSSyst.EventHandler.Ref);
   procedure remove_EnterThreadModal(
      value : MSSyst.EventHandler.Ref);
   procedure remove_Idle(
      value : MSSyst.EventHandler.Ref);
   procedure remove_LeaveThreadModal(
      value : MSSyst.EventHandler.Ref);
   procedure remove_ThreadException(
      value : MSSyst.Threading.ThreadExceptionEventHandler.Ref);
   procedure remove_ThreadExit(
      value : MSSyst.EventHandler.Ref);
   procedure RemoveMessageFilter(
      value : MSSyst.Windows.Forms.IMessageFilter.Ref);
   procedure Restart;
   procedure Run;
   procedure Run(
      mainForm : MSSyst.Windows.Forms.Form.Ref);
   procedure Run(
      context : MSSyst.Windows.Forms.ApplicationContext.Ref);
   procedure set_CurrentCulture(
      value : MSSyst.Globalization.CultureInfo.Ref);
   procedure set_CurrentInputLanguage(
      value : MSSyst.Windows.Forms.InputLanguage.Ref);
   procedure set_SafeTopLevelCaptionFormat(
      value : MSSyst.String.Ref);
   procedure set_UseWaitCursor(
      value : Standard.Boolean);
   procedure set_VisualStyleState(
      value : MSSyst.Windows.Forms.VisualStyles.VisualStyleState.Valuetype);
   procedure SetCompatibleTextRenderingDefault(
      defaultValue : Standard.Boolean);
   function SetSuspendState(
      state : MSSyst.Windows.Forms.PowerState.Valuetype;
      force : Standard.Boolean;
      disableWakeEvent : Standard.Boolean) return Standard.Boolean;
   procedure SetUnhandledExceptionMode(
      mode : MSSyst.Windows.Forms.UnhandledExceptionMode.Valuetype;
      threadScope : Standard.Boolean);
   procedure SetUnhandledExceptionMode(
      mode : MSSyst.Windows.Forms.UnhandledExceptionMode.Valuetype);
   procedure UnregisterMessageLoop;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,add_ApplicationExit,"add_ApplicationExit");
   pragma Import(MSIL,add_EnterThreadModal,"add_EnterThreadModal");
   pragma Import(MSIL,add_Idle,"add_Idle");
   pragma Import(MSIL,add_LeaveThreadModal,"add_LeaveThreadModal");
   pragma Import(MSIL,add_ThreadException,"add_ThreadException");
   pragma Import(MSIL,add_ThreadExit,"add_ThreadExit");
   pragma Import(MSIL,AddMessageFilter,"AddMessageFilter");
   pragma Import(MSIL,DoEvents,"DoEvents");
   pragma Import(MSIL,EnableVisualStyles,"EnableVisualStyles");
   pragma Import(MSIL,Exit_k,"Exit");
   pragma Import(MSIL,ExitThread,"ExitThread");
   pragma Import(MSIL,FilterMessage,"FilterMessage");
   pragma Import(MSIL,get_AllowQuit,"get_AllowQuit");
   pragma Import(MSIL,get_CommonAppDataPath,"get_CommonAppDataPath");
   pragma Import(MSIL,get_CommonAppDataRegistry,"get_CommonAppDataRegistry");
   pragma Import(MSIL,get_CompanyName,"get_CompanyName");
   pragma Import(MSIL,get_CurrentCulture,"get_CurrentCulture");
   pragma Import(MSIL,get_CurrentInputLanguage,"get_CurrentInputLanguage");
   pragma Import(MSIL,get_ExecutablePath,"get_ExecutablePath");
   pragma Import(MSIL,get_LocalUserAppDataPath,"get_LocalUserAppDataPath");
   pragma Import(MSIL,get_MessageLoop,"get_MessageLoop");
   pragma Import(MSIL,get_OpenForms,"get_OpenForms");
   pragma Import(MSIL,get_ProductName,"get_ProductName");
   pragma Import(MSIL,get_ProductVersion,"get_ProductVersion");
   pragma Import(MSIL,get_RenderWithVisualStyles,"get_RenderWithVisualStyles");
   pragma Import(MSIL,get_SafeTopLevelCaptionFormat,"get_SafeTopLevelCaptionFormat");
   pragma Import(MSIL,get_StartupPath,"get_StartupPath");
   pragma Import(MSIL,get_UserAppDataPath,"get_UserAppDataPath");
   pragma Import(MSIL,get_UserAppDataRegistry,"get_UserAppDataRegistry");
   pragma Import(MSIL,get_UseWaitCursor,"get_UseWaitCursor");
   pragma Import(MSIL,get_VisualStyleState,"get_VisualStyleState");
   pragma Import(MSIL,OleRequired,"OleRequired");
   pragma Import(MSIL,OnThreadException,"OnThreadException");
   pragma Import(MSIL,RaiseIdle,"RaiseIdle");
   pragma Import(MSIL,RegisterMessageLoop,"RegisterMessageLoop");
   pragma Import(MSIL,remove_ApplicationExit,"remove_ApplicationExit");
   pragma Import(MSIL,remove_EnterThreadModal,"remove_EnterThreadModal");
   pragma Import(MSIL,remove_Idle,"remove_Idle");
   pragma Import(MSIL,remove_LeaveThreadModal,"remove_LeaveThreadModal");
   pragma Import(MSIL,remove_ThreadException,"remove_ThreadException");
   pragma Import(MSIL,remove_ThreadExit,"remove_ThreadExit");
   pragma Import(MSIL,RemoveMessageFilter,"RemoveMessageFilter");
   pragma Import(MSIL,Restart,"Restart");
   pragma Import(MSIL,Run,"Run");
   pragma Import(MSIL,set_CurrentCulture,"set_CurrentCulture");
   pragma Import(MSIL,set_CurrentInputLanguage,"set_CurrentInputLanguage");
   pragma Import(MSIL,set_SafeTopLevelCaptionFormat,"set_SafeTopLevelCaptionFormat");
   pragma Import(MSIL,set_UseWaitCursor,"set_UseWaitCursor");
   pragma Import(MSIL,set_VisualStyleState,"set_VisualStyleState");
   pragma Import(MSIL,SetCompatibleTextRenderingDefault,"SetCompatibleTextRenderingDefault");
   pragma Import(MSIL,SetSuspendState,"SetSuspendState");
   pragma Import(MSIL,SetUnhandledExceptionMode,"SetUnhandledExceptionMode");
   pragma Import(MSIL,UnregisterMessageLoop,"UnregisterMessageLoop");
end MSSyst.Windows.Forms.Application;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Windows.Forms.Application,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System.Windows.Forms]System.Windows.Forms.Application");
