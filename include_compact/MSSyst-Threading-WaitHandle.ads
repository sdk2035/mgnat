-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.MarshalByRefObject;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Object.Ref is access;
with type Microsoft.Win32.SafeHandles.SafeWaitHandle.Ref is access;
with type MSSyst.TimeSpan.Valuetype is tagged;
with type MSSyst.String.Ref is access;
with type MSSyst.Threading.WaitHandle.Ref_array is access;
package MSSyst.Threading.WaitHandle is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.MarshalByRefObject.Typ   with record
      null;
   end record;
   WaitTimeout : Integer;
   pragma Import(MSIL,WaitTimeout,"WaitTimeout");
   procedure Close(
      This : access Typ);
   function get_Handle(
      This : access Typ) return MSIL_Types.native_int;
   function get_SafeWaitHandle(
      This : access Typ) return Microsoft.Win32.SafeHandles.SafeWaitHandle.Ref;
   procedure set_Handle(
      This : access Typ;
      value : MSIL_Types.native_int);
   procedure set_SafeWaitHandle(
      This : access Typ;
      value : Microsoft.Win32.SafeHandles.SafeWaitHandle.Ref);
   function SignalAndWait(
      toSignal : MSSyst.Threading.WaitHandle.Ref;
      toWaitOn : MSSyst.Threading.WaitHandle.Ref) return Standard.Boolean;
   function SignalAndWait(
      toSignal : MSSyst.Threading.WaitHandle.Ref;
      toWaitOn : MSSyst.Threading.WaitHandle.Ref;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function SignalAndWait(
      toSignal : MSSyst.Threading.WaitHandle.Ref;
      toWaitOn : MSSyst.Threading.WaitHandle.Ref;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitAll(
      waitHandles : MSSyst.Threading.WaitHandle.Ref_array;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitAll(
      waitHandles : MSSyst.Threading.WaitHandle.Ref_array;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitAll(
      waitHandles : MSSyst.Threading.WaitHandle.Ref_array) return Standard.Boolean;
   function WaitAny(
      waitHandles : MSSyst.Threading.WaitHandle.Ref_array;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Integer;
   function WaitAny(
      waitHandles : MSSyst.Threading.WaitHandle.Ref_array;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Integer;
   function WaitAny(
      waitHandles : MSSyst.Threading.WaitHandle.Ref_array) return Integer;
   function WaitOne(
      This : access Typ;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitOne(
      This : access Typ;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitOne(
      This : access Typ) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,get_Handle,"get_Handle");
   pragma Import(MSIL,get_SafeWaitHandle,"get_SafeWaitHandle");
   pragma Import(MSIL,set_Handle,"set_Handle");
   pragma Import(MSIL,set_SafeWaitHandle,"set_SafeWaitHandle");
   pragma Import(MSIL,SignalAndWait,"SignalAndWait");
   pragma Import(MSIL,WaitAll,"WaitAll");
   pragma Import(MSIL,WaitAny,"WaitAny");
   pragma Import(MSIL,WaitOne,"WaitOne");
end MSSyst.Threading.WaitHandle;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Threading.WaitHandle,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Threading.WaitHandle");
