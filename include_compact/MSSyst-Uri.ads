-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Runtime.Serialization.ISerializable;
with type MSSyst.String.Ref is access;
with MSSyst.UriHostNameType;
with MSSyst.UriComponents;
with MSSyst.UriFormat;
with MSSyst.StringComparison;
with type MSSyst.String.Ref_array is access;
with MSSyst.UriPartial;
with type MSSyst.Type_k.Ref is access;
with MSSyst.UriKind;
with type MSSyst.Uri.Ref_addrof is access;
package MSSyst.Uri is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   UriSchemeFile : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeFile,"UriSchemeFile");
   UriSchemeFtp : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeFtp,"UriSchemeFtp");
   UriSchemeGopher : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeGopher,"UriSchemeGopher");
   UriSchemeHttp : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeHttp,"UriSchemeHttp");
   UriSchemeHttps : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeHttps,"UriSchemeHttps");
   UriSchemeMailto : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeMailto,"UriSchemeMailto");
   UriSchemeNews : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeNews,"UriSchemeNews");
   UriSchemeNntp : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeNntp,"UriSchemeNntp");
   UriSchemeNetTcp : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeNetTcp,"UriSchemeNetTcp");
   UriSchemeNetPipe : MSSyst.String.Ref;
   pragma Import(MSIL,UriSchemeNetPipe,"UriSchemeNetPipe");
   SchemeDelimiter : MSSyst.String.Ref;
   pragma Import(MSIL,SchemeDelimiter,"SchemeDelimiter");
   function new_Uri(
      This : Ref := null;
      uriString : MSSyst.String.Ref) return Ref;
   function new_Uri(
      This : Ref := null;
      uriString : MSSyst.String.Ref;
      dontEscape : Standard.Boolean) return Ref;
   function new_Uri(
      This : Ref := null;
      uriString : MSSyst.String.Ref;
      uriKind : MSSyst.UriKind.Valuetype) return Ref;
   function new_Uri(
      This : Ref := null;
      baseUri : MSSyst.Uri.Ref;
      relativeUri : MSSyst.String.Ref) return Ref;
   function new_Uri(
      This : Ref := null;
      baseUri : MSSyst.Uri.Ref;
      relativeUri : MSSyst.String.Ref;
      dontEscape : Standard.Boolean) return Ref;
   function new_Uri(
      This : Ref := null;
      baseUri : MSSyst.Uri.Ref;
      relativeUri : MSSyst.Uri.Ref) return Ref;
   function CheckHostName(
      name : MSSyst.String.Ref) return MSSyst.UriHostNameType.Valuetype;
   function CheckSchemeName(
      schemeName : MSSyst.String.Ref) return Standard.Boolean;
   function Compare(
      uri1 : MSSyst.Uri.Ref;
      uri2 : MSSyst.Uri.Ref;
      partsToCompare : MSSyst.UriComponents.Valuetype;
      compareFormat : MSSyst.UriFormat.Valuetype;
      comparisonType : MSSyst.StringComparison.Valuetype) return Integer;
   function Equals(
      This : access Typ;
      comparand : MSSyst.Object.Ref) return Standard.Boolean;
   function EscapeDataString(
      stringToEscape : MSSyst.String.Ref) return MSSyst.String.Ref;
   function EscapeUriString(
      stringToEscape : MSSyst.String.Ref) return MSSyst.String.Ref;
   function FromHex(
      digit : Wide_Character) return Integer;
   function get_AbsolutePath(
      This : access Typ) return MSSyst.String.Ref;
   function get_AbsoluteUri(
      This : access Typ) return MSSyst.String.Ref;
   function get_Authority(
      This : access Typ) return MSSyst.String.Ref;
   function get_DnsSafeHost(
      This : access Typ) return MSSyst.String.Ref;
   function get_Fragment(
      This : access Typ) return MSSyst.String.Ref;
   function get_Host(
      This : access Typ) return MSSyst.String.Ref;
   function get_HostNameType(
      This : access Typ) return MSSyst.UriHostNameType.Valuetype;
   function get_IsAbsoluteUri(
      This : access Typ) return Standard.Boolean;
   function get_IsDefaultPort(
      This : access Typ) return Standard.Boolean;
   function get_IsFile(
      This : access Typ) return Standard.Boolean;
   function get_IsLoopback(
      This : access Typ) return Standard.Boolean;
   function get_IsUnc(
      This : access Typ) return Standard.Boolean;
   function get_LocalPath(
      This : access Typ) return MSSyst.String.Ref;
   function get_OriginalString(
      This : access Typ) return MSSyst.String.Ref;
   function get_PathAndQuery(
      This : access Typ) return MSSyst.String.Ref;
   function get_Port(
      This : access Typ) return Integer;
   function get_Query(
      This : access Typ) return MSSyst.String.Ref;
   function get_Scheme(
      This : access Typ) return MSSyst.String.Ref;
   function get_Segments(
      This : access Typ) return MSSyst.String.Ref_array;
   function get_UserEscaped(
      This : access Typ) return Standard.Boolean;
   function get_UserInfo(
      This : access Typ) return MSSyst.String.Ref;
   function GetComponents(
      This : access Typ;
      components : MSSyst.UriComponents.Valuetype;
      format : MSSyst.UriFormat.Valuetype) return MSSyst.String.Ref;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetLeftPart(
      This : access Typ;
      part : MSSyst.UriPartial.Valuetype) return MSSyst.String.Ref;
   function HexEscape(
      character : Wide_Character) return MSSyst.String.Ref;
   function HexUnescape(
      pattern : MSSyst.String.Ref;
      index : MSIL_Types.Int32_addrof) return Wide_Character;
   function IsBaseOf(
      This : access Typ;
      uri : MSSyst.Uri.Ref) return Standard.Boolean;
   function IsHexDigit(
      character : Wide_Character) return Standard.Boolean;
   function IsHexEncoding(
      pattern : MSSyst.String.Ref;
      index : Integer) return Standard.Boolean;
   function IsWellFormedOriginalString(
      This : access Typ) return Standard.Boolean;
   function IsWellFormedUriString(
      uriString : MSSyst.String.Ref;
      uriKind : MSSyst.UriKind.Valuetype) return Standard.Boolean;
   function MakeRelative(
      This : access Typ;
      toUri : MSSyst.Uri.Ref) return MSSyst.String.Ref;
   function MakeRelativeUri(
      This : access Typ;
      uri : MSSyst.Uri.Ref) return MSSyst.Uri.Ref;
   function op_Equality(
      uri1 : MSSyst.Uri.Ref;
      uri2 : MSSyst.Uri.Ref) return Standard.Boolean;
   function op_Inequality(
      uri1 : MSSyst.Uri.Ref;
      uri2 : MSSyst.Uri.Ref) return Standard.Boolean;
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
   function TryCreate(
      baseUri : MSSyst.Uri.Ref;
      relativeUri : MSSyst.Uri.Ref;
      result : MSSyst.Uri.Ref_addrof) return Standard.Boolean;
   function TryCreate(
      uriString : MSSyst.String.Ref;
      uriKind : MSSyst.UriKind.Valuetype;
      result : MSSyst.Uri.Ref_addrof) return Standard.Boolean;
   function TryCreate(
      baseUri : MSSyst.Uri.Ref;
      relativeUri : MSSyst.String.Ref;
      result : MSSyst.Uri.Ref_addrof) return Standard.Boolean;
   function UnescapeDataString(
      stringToUnescape : MSSyst.String.Ref) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Uri);
   pragma Import(MSIL,CheckHostName,"CheckHostName");
   pragma Import(MSIL,CheckSchemeName,"CheckSchemeName");
   pragma Import(MSIL,Compare,"Compare");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,EscapeDataString,"EscapeDataString");
   pragma Import(MSIL,EscapeUriString,"EscapeUriString");
   pragma Import(MSIL,FromHex,"FromHex");
   pragma Import(MSIL,get_AbsolutePath,"get_AbsolutePath");
   pragma Import(MSIL,get_AbsoluteUri,"get_AbsoluteUri");
   pragma Import(MSIL,get_Authority,"get_Authority");
   pragma Import(MSIL,get_DnsSafeHost,"get_DnsSafeHost");
   pragma Import(MSIL,get_Fragment,"get_Fragment");
   pragma Import(MSIL,get_Host,"get_Host");
   pragma Import(MSIL,get_HostNameType,"get_HostNameType");
   pragma Import(MSIL,get_IsAbsoluteUri,"get_IsAbsoluteUri");
   pragma Import(MSIL,get_IsDefaultPort,"get_IsDefaultPort");
   pragma Import(MSIL,get_IsFile,"get_IsFile");
   pragma Import(MSIL,get_IsLoopback,"get_IsLoopback");
   pragma Import(MSIL,get_IsUnc,"get_IsUnc");
   pragma Import(MSIL,get_LocalPath,"get_LocalPath");
   pragma Import(MSIL,get_OriginalString,"get_OriginalString");
   pragma Import(MSIL,get_PathAndQuery,"get_PathAndQuery");
   pragma Import(MSIL,get_Port,"get_Port");
   pragma Import(MSIL,get_Query,"get_Query");
   pragma Import(MSIL,get_Scheme,"get_Scheme");
   pragma Import(MSIL,get_Segments,"get_Segments");
   pragma Import(MSIL,get_UserEscaped,"get_UserEscaped");
   pragma Import(MSIL,get_UserInfo,"get_UserInfo");
   pragma Import(MSIL,GetComponents,"GetComponents");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetLeftPart,"GetLeftPart");
   pragma Import(MSIL,HexEscape,"HexEscape");
   pragma Import(MSIL,HexUnescape,"HexUnescape");
   pragma Import(MSIL,IsBaseOf,"IsBaseOf");
   pragma Import(MSIL,IsHexDigit,"IsHexDigit");
   pragma Import(MSIL,IsHexEncoding,"IsHexEncoding");
   pragma Import(MSIL,IsWellFormedOriginalString,"IsWellFormedOriginalString");
   pragma Import(MSIL,IsWellFormedUriString,"IsWellFormedUriString");
   pragma Import(MSIL,MakeRelative,"MakeRelative");
   pragma Import(MSIL,MakeRelativeUri,"MakeRelativeUri");
   pragma Import(MSIL,op_Equality,"op_Equality");
   pragma Import(MSIL,op_Inequality,"op_Inequality");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,TryCreate,"TryCreate");
   pragma Import(MSIL,UnescapeDataString,"UnescapeDataString");
end MSSyst.Uri;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Uri,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Uri");
