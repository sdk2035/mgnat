-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Drawing.Image;
with MSSyst.Runtime.Serialization.ISerializable;
with MSSyst.ICloneable;
with type MSSyst.Drawing.Rectangle.Valuetype is tagged;
with MSSyst.Drawing.Imaging.PixelFormat;
with type MSSyst.Drawing.RectangleF.Valuetype is tagged;
with type MSSyst.Object.Ref is access;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Guid;
with type MSSyst.Drawing.Imaging.ColorPalette.Ref is access;
with type MSSyst.Drawing.SizeF.Valuetype is tagged;
with type MSSyst.Drawing.Imaging.PropertyItem.Ref_array is access;
with type MSSyst.Drawing.Imaging.ImageFormat.Ref is access;
with type MSSyst.Drawing.Size.Valuetype is tagged;
with MSSyst.Drawing.GraphicsUnit;
with type MSSyst.Drawing.Imaging.EncoderParameters.Ref is access;
with type MSSyst.Drawing.Imaging.FrameDimension.Ref is access;
with type MSSyst.Drawing.Color.Valuetype is tagged;
with type MSSyst.Drawing.Imaging.PropertyItem.Ref is access;
with type MSSyst.Drawing.Image.GetThumbnailImageAbort.Ref is access;
with type MSSyst.Drawing.Imaging.BitmapData.Ref is access;
with MSSyst.Drawing.Imaging.ImageLockMode;
with MSSyst.Drawing.RotateFlipType;
with type MSSyst.Drawing.Imaging.ImageCodecInfo.Ref is access;
with type MSSyst.IO.Stream.Ref is access;
with type MSSyst.Drawing.Graphics.Ref is access;
package MSSyst.Drawing.Bitmap is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Drawing.Image.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.ICloneable.Typ
   with record
      null;
   end record;
   function new_Bitmap(
      This : Ref := null;
      type_k : MSSyst.Type_k.Ref;
      resource : MSSyst.String.Ref) return Ref;
   function new_Bitmap(
      This : Ref := null;
      width : Integer;
      height : Integer;
      format : MSSyst.Drawing.Imaging.PixelFormat.Valuetype) return Ref;
   function new_Bitmap(
      This : Ref := null;
      width : Integer;
      height : Integer) return Ref;
   function new_Bitmap(
      This : Ref := null;
      filename : MSSyst.String.Ref) return Ref;
   function new_Bitmap(
      This : Ref := null;
      filename : MSSyst.String.Ref;
      useIcm : Standard.Boolean) return Ref;
   function new_Bitmap(
      This : Ref := null;
      stream : MSSyst.IO.Stream.Ref) return Ref;
   function new_Bitmap(
      This : Ref := null;
      stream : MSSyst.IO.Stream.Ref;
      useIcm : Standard.Boolean) return Ref;
   function new_Bitmap(
      This : Ref := null;
      width : Integer;
      height : Integer;
      stride : Integer;
      format : MSSyst.Drawing.Imaging.PixelFormat.Valuetype;
      scan0 : MSIL_Types.native_int) return Ref;
   function new_Bitmap(
      This : Ref := null;
      width : Integer;
      height : Integer;
      g : MSSyst.Drawing.Graphics.Ref) return Ref;
   function new_Bitmap(
      This : Ref := null;
      original : MSSyst.Drawing.Image.Ref) return Ref;
   function new_Bitmap(
      This : Ref := null;
      original : MSSyst.Drawing.Image.Ref;
      width : Integer;
      height : Integer) return Ref;
   function new_Bitmap(
      This : Ref := null;
      original : MSSyst.Drawing.Image.Ref;
      newSize : MSSyst.Drawing.Size.Valuetype) return Ref;
   function Clone(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype;
      format : MSSyst.Drawing.Imaging.PixelFormat.Valuetype) return MSSyst.Drawing.Bitmap.Ref;
   function Clone(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype;
      format : MSSyst.Drawing.Imaging.PixelFormat.Valuetype) return MSSyst.Drawing.Bitmap.Ref;
   function FromHicon(
      hicon : MSIL_Types.native_int) return MSSyst.Drawing.Bitmap.Ref;
   function FromResource(
      hinstance : MSIL_Types.native_int;
      bitmapName : MSSyst.String.Ref) return MSSyst.Drawing.Bitmap.Ref;
   function GetHbitmap(
      This : access Typ) return MSIL_Types.native_int;
   function GetHbitmap(
      This : access Typ;
      background : MSSyst.Drawing.Color.Valuetype) return MSIL_Types.native_int;
   function GetHicon(
      This : access Typ) return MSIL_Types.native_int;
   function GetPixel(
      This : access Typ;
      x : Integer;
      y : Integer) return MSSyst.Drawing.Color.Valuetype;
   function LockBits(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype;
      flags : MSSyst.Drawing.Imaging.ImageLockMode.Valuetype;
      format : MSSyst.Drawing.Imaging.PixelFormat.Valuetype;
      bitmapData : MSSyst.Drawing.Imaging.BitmapData.Ref) return MSSyst.Drawing.Imaging.BitmapData.Ref;
   function LockBits(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype;
      flags : MSSyst.Drawing.Imaging.ImageLockMode.Valuetype;
      format : MSSyst.Drawing.Imaging.PixelFormat.Valuetype) return MSSyst.Drawing.Imaging.BitmapData.Ref;
   procedure MakeTransparent(
      This : access Typ);
   procedure MakeTransparent(
      This : access Typ;
      transparentColor : MSSyst.Drawing.Color.Valuetype);
   procedure SetPixel(
      This : access Typ;
      x : Integer;
      y : Integer;
      color : MSSyst.Drawing.Color.Valuetype);
   procedure SetResolution(
      This : access Typ;
      xDpi : Float;
      yDpi : Float);
   procedure UnlockBits(
      This : access Typ;
      bitmapdata : MSSyst.Drawing.Imaging.BitmapData.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Bitmap);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,FromHicon,"FromHicon");
   pragma Import(MSIL,FromResource,"FromResource");
   pragma Import(MSIL,GetHbitmap,"GetHbitmap");
   pragma Import(MSIL,GetHicon,"GetHicon");
   pragma Import(MSIL,GetPixel,"GetPixel");
   pragma Import(MSIL,LockBits,"LockBits");
   pragma Import(MSIL,MakeTransparent,"MakeTransparent");
   pragma Import(MSIL,SetPixel,"SetPixel");
   pragma Import(MSIL,SetResolution,"SetResolution");
   pragma Import(MSIL,UnlockBits,"UnlockBits");
end MSSyst.Drawing.Bitmap;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Drawing.Bitmap,
   ".ver 2:0:0:0 .publickeytoken=( b0 3f 5f 7f 11 d5 0a 3a )",
   "[System.Drawing]System.Drawing.Bitmap");
