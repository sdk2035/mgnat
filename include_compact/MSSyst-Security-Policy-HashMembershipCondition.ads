-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Runtime.Serialization.ISerializable;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
with MSSyst.Security.Policy.IMembershipCondition;
with MSSyst.Security.ISecurityEncodable;
with MSSyst.Security.ISecurityPolicyEncodable;
with type MSSyst.Security.Policy.Evidence.Ref is access;
with type MSSyst.Security.SecurityElement.Ref is access;
with type MSSyst.Security.Policy.PolicyLevel.Ref is access;
with type MSSyst.Security.Cryptography.HashAlgorithm.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
package MSSyst.Security.Policy.HashMembershipCondition is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
         and MSSyst.Security.Policy.IMembershipCondition.Typ
         and MSSyst.Security.ISecurityEncodable.Typ
         and MSSyst.Security.ISecurityPolicyEncodable.Typ
   with record
      null;
   end record;
   function new_HashMembershipCondition(
      This : Ref := null;
      hashAlg : MSSyst.Security.Cryptography.HashAlgorithm.Ref;
      value : MSIL_Types.unsigned_int8_Arr) return Ref;
   function Check(
      This : access Typ;
      evidence : MSSyst.Security.Policy.Evidence.Ref) return Standard.Boolean;
   function Copy(
      This : access Typ) return MSSyst.Security.Policy.IMembershipCondition.Ref;
   function Equals(
      This : access Typ;
      o : MSSyst.Object.Ref) return Standard.Boolean;
   procedure FromXml(
      This : access Typ;
      e : MSSyst.Security.SecurityElement.Ref;
      level : MSSyst.Security.Policy.PolicyLevel.Ref);
   procedure FromXml(
      This : access Typ;
      e : MSSyst.Security.SecurityElement.Ref);
   function get_HashAlgorithm(
      This : access Typ) return MSSyst.Security.Cryptography.HashAlgorithm.Ref;
   function get_HashValue(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetHashCode(
      This : access Typ) return Integer;
   procedure set_HashAlgorithm(
      This : access Typ;
      value : MSSyst.Security.Cryptography.HashAlgorithm.Ref);
   procedure set_HashValue(
      This : access Typ;
      value : MSIL_Types.unsigned_int8_Arr);
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
   function ToXml(
      This : access Typ) return MSSyst.Security.SecurityElement.Ref;
   function ToXml(
      This : access Typ;
      level : MSSyst.Security.Policy.PolicyLevel.Ref) return MSSyst.Security.SecurityElement.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_HashMembershipCondition);
   pragma Import(MSIL,Check,"Check");
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,FromXml,"FromXml");
   pragma Import(MSIL,get_HashAlgorithm,"get_HashAlgorithm");
   pragma Import(MSIL,get_HashValue,"get_HashValue");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,set_HashAlgorithm,"set_HashAlgorithm");
   pragma Import(MSIL,set_HashValue,"set_HashValue");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,ToXml,"ToXml");
end MSSyst.Security.Policy.HashMembershipCondition;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Policy.HashMembershipCondition,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Policy.HashMembershipCondition");
