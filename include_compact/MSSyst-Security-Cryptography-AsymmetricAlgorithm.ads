-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.String.Ref is access;
with type MSSyst.Security.Cryptography.KeySizes.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Security.Cryptography.AsymmetricAlgorithm is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   procedure Clear(
      This : access Typ);
   function Create return MSSyst.Security.Cryptography.AsymmetricAlgorithm.Ref;
   function Create(
      algName : MSSyst.String.Ref) return MSSyst.Security.Cryptography.AsymmetricAlgorithm.Ref;
   procedure FromXmlString(
      This : access Typ;
      xmlString : MSSyst.String.Ref);
   function get_KeyExchangeAlgorithm(
      This : access Typ) return MSSyst.String.Ref;
   function get_KeySize(
      This : access Typ) return Integer;
   function get_LegalKeySizes(
      This : access Typ) return MSSyst.Security.Cryptography.KeySizes.Ref_array;
   function get_SignatureAlgorithm(
      This : access Typ) return MSSyst.String.Ref;
   procedure set_KeySize(
      This : access Typ;
      value : Integer);
   function ToXmlString(
      This : access Typ;
      includePrivateParameters : Standard.Boolean) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Create,"Create");
   pragma Import(MSIL,FromXmlString,"FromXmlString");
   pragma Import(MSIL,get_KeyExchangeAlgorithm,"get_KeyExchangeAlgorithm");
   pragma Import(MSIL,get_KeySize,"get_KeySize");
   pragma Import(MSIL,get_LegalKeySizes,"get_LegalKeySizes");
   pragma Import(MSIL,get_SignatureAlgorithm,"get_SignatureAlgorithm");
   pragma Import(MSIL,set_KeySize,"set_KeySize");
   pragma Import(MSIL,ToXmlString,"ToXmlString");
end MSSyst.Security.Cryptography.AsymmetricAlgorithm;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Cryptography.AsymmetricAlgorithm,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Cryptography.AsymmetricAlgorithm");
