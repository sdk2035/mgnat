-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Security.Cryptography.RSA;
with MSSyst.Security.Cryptography.ICspAsymmetricAlgorithm;
with type MSSyst.Object.Ref is access;
with type MSSyst.Security.Cryptography.RSAParameters.Valuetype is tagged;
with type MSSyst.String.Ref is access;
with type MSSyst.Security.Cryptography.CspKeyContainerInfo.Ref is access;
with type MSSyst.Security.Cryptography.KeySizes.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.IO.Stream.Ref is access;
with type MSSyst.Security.Cryptography.CspParameters.Ref is access;
package MSSyst.Security.Cryptography.RSACryptoServiceProvider is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Security.Cryptography.RSA.Typ
         and MSSyst.Security.Cryptography.ICspAsymmetricAlgorithm.Typ
   with record
      null;
   end record;
   function new_RSACryptoServiceProvider(
      This : Ref := null) return Ref;
   function new_RSACryptoServiceProvider(
      This : Ref := null;
      dwKeySize : Integer) return Ref;
   function new_RSACryptoServiceProvider(
      This : Ref := null;
      parameters : MSSyst.Security.Cryptography.CspParameters.Ref) return Ref;
   function new_RSACryptoServiceProvider(
      This : Ref := null;
      dwKeySize : Integer;
      parameters : MSSyst.Security.Cryptography.CspParameters.Ref) return Ref;
   function Decrypt(
      This : access Typ;
      rgb : MSIL_Types.unsigned_int8_Arr;
      fOAEP : Standard.Boolean) return MSIL_Types.unsigned_int8_Array;
   function DecryptValue(
      This : access Typ;
      rgb : MSIL_Types.unsigned_int8_Arr) return MSIL_Types.unsigned_int8_Array;
   function Encrypt(
      This : access Typ;
      rgb : MSIL_Types.unsigned_int8_Arr;
      fOAEP : Standard.Boolean) return MSIL_Types.unsigned_int8_Array;
   function EncryptValue(
      This : access Typ;
      rgb : MSIL_Types.unsigned_int8_Arr) return MSIL_Types.unsigned_int8_Array;
   function ExportCspBlob(
      This : access Typ;
      includePrivateParameters : Standard.Boolean) return MSIL_Types.unsigned_int8_Array;
   function ExportParameters(
      This : access Typ;
      includePrivateParameters : Standard.Boolean) return MSSyst.Security.Cryptography.RSAParameters.Valuetype;
   function get_CspKeyContainerInfo(
      This : access Typ) return MSSyst.Security.Cryptography.CspKeyContainerInfo.Ref;
   function get_KeyExchangeAlgorithm(
      This : access Typ) return MSSyst.String.Ref;
   function get_KeySize(
      This : access Typ) return Integer;
   function get_PersistKeyInCsp(
      This : access Typ) return Standard.Boolean;
   function get_PublicOnly(
      This : access Typ) return Standard.Boolean;
   function get_SignatureAlgorithm(
      This : access Typ) return MSSyst.String.Ref;
   function get_UseMachineKeyStore return Standard.Boolean;
   procedure ImportCspBlob(
      This : access Typ;
      keyBlob : MSIL_Types.unsigned_int8_Arr);
   procedure ImportParameters(
      This : access Typ;
      parameters : MSSyst.Security.Cryptography.RSAParameters.Valuetype);
   procedure set_PersistKeyInCsp(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_UseMachineKeyStore(
      value : Standard.Boolean);
   function SignData(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      halg : MSSyst.Object.Ref) return MSIL_Types.unsigned_int8_Array;
   function SignData(
      This : access Typ;
      inputStream : MSSyst.IO.Stream.Ref;
      halg : MSSyst.Object.Ref) return MSIL_Types.unsigned_int8_Array;
   function SignData(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer;
      halg : MSSyst.Object.Ref) return MSIL_Types.unsigned_int8_Array;
   function SignHash(
      This : access Typ;
      rgbHash : MSIL_Types.unsigned_int8_Arr;
      str : MSSyst.String.Ref) return MSIL_Types.unsigned_int8_Array;
   function VerifyData(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      halg : MSSyst.Object.Ref;
      signature : MSIL_Types.unsigned_int8_Arr) return Standard.Boolean;
   function VerifyHash(
      This : access Typ;
      rgbHash : MSIL_Types.unsigned_int8_Arr;
      str : MSSyst.String.Ref;
      rgbSignature : MSIL_Types.unsigned_int8_Arr) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_RSACryptoServiceProvider);
   pragma Import(MSIL,Decrypt,"Decrypt");
   pragma Import(MSIL,DecryptValue,"DecryptValue");
   pragma Import(MSIL,Encrypt,"Encrypt");
   pragma Import(MSIL,EncryptValue,"EncryptValue");
   pragma Import(MSIL,ExportCspBlob,"ExportCspBlob");
   pragma Import(MSIL,ExportParameters,"ExportParameters");
   pragma Import(MSIL,get_CspKeyContainerInfo,"get_CspKeyContainerInfo");
   pragma Import(MSIL,get_KeyExchangeAlgorithm,"get_KeyExchangeAlgorithm");
   pragma Import(MSIL,get_KeySize,"get_KeySize");
   pragma Import(MSIL,get_PersistKeyInCsp,"get_PersistKeyInCsp");
   pragma Import(MSIL,get_PublicOnly,"get_PublicOnly");
   pragma Import(MSIL,get_SignatureAlgorithm,"get_SignatureAlgorithm");
   pragma Import(MSIL,get_UseMachineKeyStore,"get_UseMachineKeyStore");
   pragma Import(MSIL,ImportCspBlob,"ImportCspBlob");
   pragma Import(MSIL,ImportParameters,"ImportParameters");
   pragma Import(MSIL,set_PersistKeyInCsp,"set_PersistKeyInCsp");
   pragma Import(MSIL,set_UseMachineKeyStore,"set_UseMachineKeyStore");
   pragma Import(MSIL,SignData,"SignData");
   pragma Import(MSIL,SignHash,"SignHash");
   pragma Import(MSIL,VerifyData,"VerifyData");
   pragma Import(MSIL,VerifyHash,"VerifyHash");
end MSSyst.Security.Cryptography.RSACryptoServiceProvider;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Cryptography.RSACryptoServiceProvider,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Cryptography.RSACryptoServiceProvider");
