-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Collections.ICollection;
with type MSSyst.Security.Policy.ApplicationTrust.Ref is access;
with type MSSyst.Security.Policy.ApplicationTrust.Ref_array is access;
with type MSSyst.ApplicationIdentity.Ref is access;
with MSSyst.Security.Policy.ApplicationVersionMatch;
with type MSSyst.String.Ref is access;
with type MSSyst.Security.Policy.ApplicationTrustEnumerator.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Security.Policy.ApplicationTrustCollection is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.ICollection.Typ
   with record
      null;
   end record;
   function Add(
      This : access Typ;
      trust : MSSyst.Security.Policy.ApplicationTrust.Ref) return Integer;
   procedure AddRange(
      This : access Typ;
      trusts : MSSyst.Security.Policy.ApplicationTrust.Ref_array);
   procedure AddRange(
      This : access Typ;
      trusts : MSSyst.Security.Policy.ApplicationTrustCollection.Ref);
   procedure Clear(
      This : access Typ);
   procedure CopyTo(
      This : access Typ;
      array_k : MSSyst.Security.Policy.ApplicationTrust.Ref_array;
      index : Integer);
   function Find(
      This : access Typ;
      applicationIdentity : MSSyst.ApplicationIdentity.Ref;
      versionMatch : MSSyst.Security.Policy.ApplicationVersionMatch.Valuetype) return MSSyst.Security.Policy.ApplicationTrustCollection.Ref;
   function get_Count(
      This : access Typ) return Integer;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_Item(
      This : access Typ;
      index : Integer) return MSSyst.Security.Policy.ApplicationTrust.Ref;
   function get_Item(
      This : access Typ;
      appFullName : MSSyst.String.Ref) return MSSyst.Security.Policy.ApplicationTrust.Ref;
   function get_SyncRoot(
      This : access Typ) return MSSyst.Object.Ref;
   function GetEnumerator(
      This : access Typ) return MSSyst.Security.Policy.ApplicationTrustEnumerator.Ref;
   procedure Remove(
      This : access Typ;
      applicationIdentity : MSSyst.ApplicationIdentity.Ref;
      versionMatch : MSSyst.Security.Policy.ApplicationVersionMatch.Valuetype);
   procedure Remove(
      This : access Typ;
      trust : MSSyst.Security.Policy.ApplicationTrust.Ref);
   procedure RemoveRange(
      This : access Typ;
      trusts : MSSyst.Security.Policy.ApplicationTrust.Ref_array);
   procedure RemoveRange(
      This : access Typ;
      trusts : MSSyst.Security.Policy.ApplicationTrustCollection.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,AddRange,"AddRange");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Find,"Find");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,RemoveRange,"RemoveRange");
end MSSyst.Security.Policy.ApplicationTrustCollection;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Policy.ApplicationTrustCollection,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Policy.ApplicationTrustCollection");
