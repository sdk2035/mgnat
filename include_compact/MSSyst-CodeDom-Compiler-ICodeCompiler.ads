-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.CodeDom.Compiler.CompilerResults.Ref is access;
with type MSSyst.CodeDom.Compiler.CompilerParameters.Ref is access;
with type MSSyst.CodeDom.CodeCompileUnit.Ref is access;
with type MSSyst.CodeDom.CodeCompileUnit.Ref_array is access;
with type MSSyst.String.Ref is access;
with type MSSyst.String.Ref_array is access;
package MSSyst.CodeDom.Compiler.ICodeCompiler is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is interface;
   function CompileAssemblyFromDom(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      compilationUnit : MSSyst.CodeDom.CodeCompileUnit.Ref) return MSSyst.CodeDom.Compiler.CompilerResults.Ref is abstract;
   function CompileAssemblyFromDomBatch(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      compilationUnits : MSSyst.CodeDom.CodeCompileUnit.Ref_array) return MSSyst.CodeDom.Compiler.CompilerResults.Ref is abstract;
   function CompileAssemblyFromFile(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      fileName : MSSyst.String.Ref) return MSSyst.CodeDom.Compiler.CompilerResults.Ref is abstract;
   function CompileAssemblyFromFileBatch(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      fileNames : MSSyst.String.Ref_array) return MSSyst.CodeDom.Compiler.CompilerResults.Ref is abstract;
   function CompileAssemblyFromSource(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      source : MSSyst.String.Ref) return MSSyst.CodeDom.Compiler.CompilerResults.Ref is abstract;
   function CompileAssemblyFromSourceBatch(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      sources : MSSyst.String.Ref_array) return MSSyst.CodeDom.Compiler.CompilerResults.Ref is abstract;
private
   pragma Import(MSIL,CompileAssemblyFromDom,"CompileAssemblyFromDom");
   pragma Import(MSIL,CompileAssemblyFromDomBatch,"CompileAssemblyFromDomBatch");
   pragma Import(MSIL,CompileAssemblyFromFile,"CompileAssemblyFromFile");
   pragma Import(MSIL,CompileAssemblyFromFileBatch,"CompileAssemblyFromFileBatch");
   pragma Import(MSIL,CompileAssemblyFromSource,"CompileAssemblyFromSource");
   pragma Import(MSIL,CompileAssemblyFromSourceBatch,"CompileAssemblyFromSourceBatch");
end MSSyst.CodeDom.Compiler.ICodeCompiler;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.CodeDom.Compiler.ICodeCompiler,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.CodeDom.Compiler.ICodeCompiler");
