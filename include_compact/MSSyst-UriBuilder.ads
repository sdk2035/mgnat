-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.String.Ref is access;
with type MSSyst.Uri.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.UriBuilder is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function new_UriBuilder(
      This : Ref := null) return Ref;
   function new_UriBuilder(
      This : Ref := null;
      uri : MSSyst.String.Ref) return Ref;
   function new_UriBuilder(
      This : Ref := null;
      uri : MSSyst.Uri.Ref) return Ref;
   function new_UriBuilder(
      This : Ref := null;
      schemeName : MSSyst.String.Ref;
      hostName : MSSyst.String.Ref) return Ref;
   function new_UriBuilder(
      This : Ref := null;
      scheme : MSSyst.String.Ref;
      host : MSSyst.String.Ref;
      portNumber : Integer) return Ref;
   function new_UriBuilder(
      This : Ref := null;
      scheme : MSSyst.String.Ref;
      host : MSSyst.String.Ref;
      port : Integer;
      pathValue : MSSyst.String.Ref) return Ref;
   function new_UriBuilder(
      This : Ref := null;
      scheme : MSSyst.String.Ref;
      host : MSSyst.String.Ref;
      port : Integer;
      path : MSSyst.String.Ref;
      extraValue : MSSyst.String.Ref) return Ref;
   function Equals(
      This : access Typ;
      rparam : MSSyst.Object.Ref) return Standard.Boolean;
   function get_Fragment(
      This : access Typ) return MSSyst.String.Ref;
   function get_Host(
      This : access Typ) return MSSyst.String.Ref;
   function get_Password(
      This : access Typ) return MSSyst.String.Ref;
   function get_Path(
      This : access Typ) return MSSyst.String.Ref;
   function get_Port(
      This : access Typ) return Integer;
   function get_Query(
      This : access Typ) return MSSyst.String.Ref;
   function get_Scheme(
      This : access Typ) return MSSyst.String.Ref;
   function get_Uri(
      This : access Typ) return MSSyst.Uri.Ref;
   function get_UserName(
      This : access Typ) return MSSyst.String.Ref;
   function GetHashCode(
      This : access Typ) return Integer;
   procedure set_Fragment(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Host(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Password(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Path(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Port(
      This : access Typ;
      value : Integer);
   procedure set_Query(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Scheme(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_UserName(
      This : access Typ;
      value : MSSyst.String.Ref);
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_UriBuilder);
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Fragment,"get_Fragment");
   pragma Import(MSIL,get_Host,"get_Host");
   pragma Import(MSIL,get_Password,"get_Password");
   pragma Import(MSIL,get_Path,"get_Path");
   pragma Import(MSIL,get_Port,"get_Port");
   pragma Import(MSIL,get_Query,"get_Query");
   pragma Import(MSIL,get_Scheme,"get_Scheme");
   pragma Import(MSIL,get_Uri,"get_Uri");
   pragma Import(MSIL,get_UserName,"get_UserName");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,set_Fragment,"set_Fragment");
   pragma Import(MSIL,set_Host,"set_Host");
   pragma Import(MSIL,set_Password,"set_Password");
   pragma Import(MSIL,set_Path,"set_Path");
   pragma Import(MSIL,set_Port,"set_Port");
   pragma Import(MSIL,set_Query,"set_Query");
   pragma Import(MSIL,set_Scheme,"set_Scheme");
   pragma Import(MSIL,set_UserName,"set_UserName");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.UriBuilder;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.UriBuilder,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.UriBuilder");
