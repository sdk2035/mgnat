-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.TypeCode;
with type MSSyst.String.Ref is access;
with type MSSyst.IFormatProvider.Ref is access;
package MSSyst.Reflection.MethodAttributes is
   type ValueType is (
      PrivateScope,
      Private_k,
      FamANDAssem,
      Assembly,
      Family,
      FamORAssem,
      Public,
      MemberAccessMask,
      UnmanagedExport,
      Static,
      Final,
      Virtual,
      HideBySig,
      VtableLayoutMask,
      CheckAccessOnOverride,
      Abstract_k,
      SpecialName,
      RTSpecialName,
      PinvokeImpl,
      HasSecurity,
      RequireSecObject,
      ReservedMask);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      PrivateScope =>  0,
      Private_k =>  1,
      FamANDAssem =>  2,
      Assembly =>  3,
      Family =>  4,
      FamORAssem =>  5,
      Public =>  6,
      MemberAccessMask =>  7,
      UnmanagedExport =>  8,
      Static =>  16,
      Final =>  32,
      Virtual =>  64,
      HideBySig =>  128,
      VtableLayoutMask =>  256,
      CheckAccessOnOverride =>  512,
      Abstract_k =>  1024,
      SpecialName =>  2048,
      RTSpecialName =>  4096,
      PinvokeImpl =>  8192,
      HasSecurity =>  16384,
      RequireSecObject =>  32768,
      ReservedMask =>  53248);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function "+" (L,R : Valuetype) return Valuetype;
   pragma Import (MSIL, "+", "+");
   ReuseSlot : constant Valuetype := PrivateScope;
   NewSlot : constant Valuetype := VtableLayoutMask;
   function CompareTo(
      This : Valuetype;
      target : MSSyst.Object.Ref) return Integer;
   function Equals(
      This : Valuetype;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return MSSyst.Type_k.Ref;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref) return MSSyst.String.Ref;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Reflection.MethodAttributes;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Reflection.MethodAttributes,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Reflection.MethodAttributes");
