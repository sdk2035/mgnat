-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.Security.Policy.StrongName.Ref is access;
with type MSSyst.Security.Policy.StrongNameMembershipCondition.Ref is access;
with type MSSyst.Security.NamedPermissionSet.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Security.PermissionSet.Ref is access;
with type MSSyst.Security.SecurityElement.Ref is access;
with type MSSyst.Collections.IList.Ref is access;
with type MSSyst.Security.Policy.CodeGroup.Ref is access;
with MSSyst.Security.PolicyLevelType;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Security.Policy.PolicyStatement.Ref is access;
with type MSSyst.Security.Policy.Evidence.Ref is access;
package MSSyst.Security.Policy.PolicyLevel is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   procedure AddFullTrustAssembly(
      This : access Typ;
      sn : MSSyst.Security.Policy.StrongName.Ref);
   procedure AddFullTrustAssembly(
      This : access Typ;
      snMC : MSSyst.Security.Policy.StrongNameMembershipCondition.Ref);
   procedure AddNamedPermissionSet(
      This : access Typ;
      permSet : MSSyst.Security.NamedPermissionSet.Ref);
   function ChangeNamedPermissionSet(
      This : access Typ;
      name : MSSyst.String.Ref;
      pSet : MSSyst.Security.PermissionSet.Ref) return MSSyst.Security.NamedPermissionSet.Ref;
   function CreateAppDomainLevel return MSSyst.Security.Policy.PolicyLevel.Ref;
   procedure FromXml(
      This : access Typ;
      e : MSSyst.Security.SecurityElement.Ref);
   function get_FullTrustAssemblies(
      This : access Typ) return MSSyst.Collections.IList.Ref;
   function get_Label(
      This : access Typ) return MSSyst.String.Ref;
   function get_NamedPermissionSets(
      This : access Typ) return MSSyst.Collections.IList.Ref;
   function get_RootCodeGroup(
      This : access Typ) return MSSyst.Security.Policy.CodeGroup.Ref;
   function get_StoreLocation(
      This : access Typ) return MSSyst.String.Ref;
   function get_Type(
      This : access Typ) return MSSyst.Security.PolicyLevelType.Valuetype;
   function GetNamedPermissionSet(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.Security.NamedPermissionSet.Ref;
   procedure Recover(
      This : access Typ);
   procedure RemoveFullTrustAssembly(
      This : access Typ;
      sn : MSSyst.Security.Policy.StrongName.Ref);
   procedure RemoveFullTrustAssembly(
      This : access Typ;
      snMC : MSSyst.Security.Policy.StrongNameMembershipCondition.Ref);
   function RemoveNamedPermissionSet(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.Security.NamedPermissionSet.Ref;
   function RemoveNamedPermissionSet(
      This : access Typ;
      permSet : MSSyst.Security.NamedPermissionSet.Ref) return MSSyst.Security.NamedPermissionSet.Ref;
   procedure Reset(
      This : access Typ);
   function Resolve(
      This : access Typ;
      evidence : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Security.Policy.PolicyStatement.Ref;
   function ResolveMatchingCodeGroups(
      This : access Typ;
      evidence : MSSyst.Security.Policy.Evidence.Ref) return MSSyst.Security.Policy.CodeGroup.Ref;
   procedure set_RootCodeGroup(
      This : access Typ;
      value : MSSyst.Security.Policy.CodeGroup.Ref);
   function ToXml(
      This : access Typ) return MSSyst.Security.SecurityElement.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,AddFullTrustAssembly,"AddFullTrustAssembly");
   pragma Import(MSIL,AddNamedPermissionSet,"AddNamedPermissionSet");
   pragma Import(MSIL,ChangeNamedPermissionSet,"ChangeNamedPermissionSet");
   pragma Import(MSIL,CreateAppDomainLevel,"CreateAppDomainLevel");
   pragma Import(MSIL,FromXml,"FromXml");
   pragma Import(MSIL,get_FullTrustAssemblies,"get_FullTrustAssemblies");
   pragma Import(MSIL,get_Label,"get_Label");
   pragma Import(MSIL,get_NamedPermissionSets,"get_NamedPermissionSets");
   pragma Import(MSIL,get_RootCodeGroup,"get_RootCodeGroup");
   pragma Import(MSIL,get_StoreLocation,"get_StoreLocation");
   pragma Import(MSIL,get_Type,"get_Type");
   pragma Import(MSIL,GetNamedPermissionSet,"GetNamedPermissionSet");
   pragma Import(MSIL,Recover,"Recover");
   pragma Import(MSIL,RemoveFullTrustAssembly,"RemoveFullTrustAssembly");
   pragma Import(MSIL,RemoveNamedPermissionSet,"RemoveNamedPermissionSet");
   pragma Import(MSIL,Reset,"Reset");
   pragma Import(MSIL,Resolve,"Resolve");
   pragma Import(MSIL,ResolveMatchingCodeGroups,"ResolveMatchingCodeGroups");
   pragma Import(MSIL,set_RootCodeGroup,"set_RootCodeGroup");
   pragma Import(MSIL,ToXml,"ToXml");
end MSSyst.Security.Policy.PolicyLevel;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Policy.PolicyLevel,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Policy.PolicyLevel");
