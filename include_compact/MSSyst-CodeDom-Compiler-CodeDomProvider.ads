-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.CodeDom.Compiler.CompilerResults.Ref is access;
with type MSSyst.CodeDom.Compiler.CompilerParameters.Ref is access;
with type MSSyst.CodeDom.CodeCompileUnit.Ref_array is access;
with type MSSyst.String.Ref_array is access;
with type MSSyst.CodeDom.Compiler.ICodeCompiler.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.CodeDom.Compiler.ICodeGenerator.Ref is access;
with type MSSyst.IO.TextWriter.Ref is access;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.CodeDom.Compiler.ICodeParser.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.CodeDom.CodeCompileUnit.Ref is access;
with type MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref is access;
with type MSSyst.CodeDom.CodeExpression.Ref is access;
with type MSSyst.CodeDom.CodeTypeMember.Ref is access;
with type MSSyst.CodeDom.CodeNamespace.Ref is access;
with type MSSyst.CodeDom.CodeStatement.Ref is access;
with type MSSyst.CodeDom.CodeTypeDeclaration.Ref is access;
with type MSSyst.ComponentModel.IContainer.Ref is access;
with MSSyst.CodeDom.Compiler.LanguageOptions;
with type MSSyst.ComponentModel.ISite.Ref is access;
with type MSSyst.CodeDom.Compiler.CompilerInfo.Ref_array is access;
with type MSSyst.CodeDom.Compiler.CompilerInfo.Ref is access;
with type MSSyst.ComponentModel.TypeConverter.Ref is access;
with type MSSyst.CodeDom.CodeTypeReference.Ref is access;
with type MSSyst.IO.TextReader.Ref is access;
with MSSyst.CodeDom.Compiler.GeneratorSupport;
package MSSyst.CodeDom.Compiler.CodeDomProvider is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
   with record
      null;
   end record;
   function CompileAssemblyFromDom(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      compilationUnits : MSSyst.CodeDom.CodeCompileUnit.Ref_array) return MSSyst.CodeDom.Compiler.CompilerResults.Ref;
   function CompileAssemblyFromFile(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      fileNames : MSSyst.String.Ref_array) return MSSyst.CodeDom.Compiler.CompilerResults.Ref;
   function CompileAssemblyFromSource(
      This : access Typ;
      options : MSSyst.CodeDom.Compiler.CompilerParameters.Ref;
      sources : MSSyst.String.Ref_array) return MSSyst.CodeDom.Compiler.CompilerResults.Ref;
   function CreateCompiler(
      This : access Typ) return MSSyst.CodeDom.Compiler.ICodeCompiler.Ref;
   function CreateEscapedIdentifier(
      This : access Typ;
      value : MSSyst.String.Ref) return MSSyst.String.Ref;
   function CreateGenerator(
      This : access Typ) return MSSyst.CodeDom.Compiler.ICodeGenerator.Ref;
   function CreateGenerator(
      This : access Typ;
      output : MSSyst.IO.TextWriter.Ref) return MSSyst.CodeDom.Compiler.ICodeGenerator.Ref;
   function CreateGenerator(
      This : access Typ;
      fileName : MSSyst.String.Ref) return MSSyst.CodeDom.Compiler.ICodeGenerator.Ref;
   function CreateParser(
      This : access Typ) return MSSyst.CodeDom.Compiler.ICodeParser.Ref;
   function CreateProvider(
      language : MSSyst.String.Ref) return MSSyst.CodeDom.Compiler.CodeDomProvider.Ref;
   function CreateValidIdentifier(
      This : access Typ;
      value : MSSyst.String.Ref) return MSSyst.String.Ref;
   procedure GenerateCodeFromCompileUnit(
      This : access Typ;
      compileUnit : MSSyst.CodeDom.CodeCompileUnit.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   procedure GenerateCodeFromExpression(
      This : access Typ;
      expression : MSSyst.CodeDom.CodeExpression.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   procedure GenerateCodeFromMember(
      This : access Typ;
      member : MSSyst.CodeDom.CodeTypeMember.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   procedure GenerateCodeFromNamespace(
      This : access Typ;
      codeNamespace : MSSyst.CodeDom.CodeNamespace.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   procedure GenerateCodeFromStatement(
      This : access Typ;
      statement : MSSyst.CodeDom.CodeStatement.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   procedure GenerateCodeFromType(
      This : access Typ;
      codeType : MSSyst.CodeDom.CodeTypeDeclaration.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   function get_FileExtension(
      This : access Typ) return MSSyst.String.Ref;
   function get_LanguageOptions(
      This : access Typ) return MSSyst.CodeDom.Compiler.LanguageOptions.Valuetype;
   function GetAllCompilerInfo return MSSyst.CodeDom.Compiler.CompilerInfo.Ref_array;
   function GetCompilerInfo(
      language : MSSyst.String.Ref) return MSSyst.CodeDom.Compiler.CompilerInfo.Ref;
   function GetConverter(
      This : access Typ;
      type_k : MSSyst.Type_k.Ref) return MSSyst.ComponentModel.TypeConverter.Ref;
   function GetLanguageFromExtension(
      extension : MSSyst.String.Ref) return MSSyst.String.Ref;
   function GetTypeOutput(
      This : access Typ;
      type_k : MSSyst.CodeDom.CodeTypeReference.Ref) return MSSyst.String.Ref;
   function IsDefinedExtension(
      extension : MSSyst.String.Ref) return Standard.Boolean;
   function IsDefinedLanguage(
      language : MSSyst.String.Ref) return Standard.Boolean;
   function IsValidIdentifier(
      This : access Typ;
      value : MSSyst.String.Ref) return Standard.Boolean;
   function Parse(
      This : access Typ;
      codeStream : MSSyst.IO.TextReader.Ref) return MSSyst.CodeDom.CodeCompileUnit.Ref;
   function Supports(
      This : access Typ;
      generatorSupport : MSSyst.CodeDom.Compiler.GeneratorSupport.Valuetype) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,CompileAssemblyFromDom,"CompileAssemblyFromDom");
   pragma Import(MSIL,CompileAssemblyFromFile,"CompileAssemblyFromFile");
   pragma Import(MSIL,CompileAssemblyFromSource,"CompileAssemblyFromSource");
   pragma Import(MSIL,CreateCompiler,"CreateCompiler");
   pragma Import(MSIL,CreateEscapedIdentifier,"CreateEscapedIdentifier");
   pragma Import(MSIL,CreateGenerator,"CreateGenerator");
   pragma Import(MSIL,CreateParser,"CreateParser");
   pragma Import(MSIL,CreateProvider,"CreateProvider");
   pragma Import(MSIL,CreateValidIdentifier,"CreateValidIdentifier");
   pragma Import(MSIL,GenerateCodeFromCompileUnit,"GenerateCodeFromCompileUnit");
   pragma Import(MSIL,GenerateCodeFromExpression,"GenerateCodeFromExpression");
   pragma Import(MSIL,GenerateCodeFromMember,"GenerateCodeFromMember");
   pragma Import(MSIL,GenerateCodeFromNamespace,"GenerateCodeFromNamespace");
   pragma Import(MSIL,GenerateCodeFromStatement,"GenerateCodeFromStatement");
   pragma Import(MSIL,GenerateCodeFromType,"GenerateCodeFromType");
   pragma Import(MSIL,get_FileExtension,"get_FileExtension");
   pragma Import(MSIL,get_LanguageOptions,"get_LanguageOptions");
   pragma Import(MSIL,GetAllCompilerInfo,"GetAllCompilerInfo");
   pragma Import(MSIL,GetCompilerInfo,"GetCompilerInfo");
   pragma Import(MSIL,GetConverter,"GetConverter");
   pragma Import(MSIL,GetLanguageFromExtension,"GetLanguageFromExtension");
   pragma Import(MSIL,GetTypeOutput,"GetTypeOutput");
   pragma Import(MSIL,IsDefinedExtension,"IsDefinedExtension");
   pragma Import(MSIL,IsDefinedLanguage,"IsDefinedLanguage");
   pragma Import(MSIL,IsValidIdentifier,"IsValidIdentifier");
   pragma Import(MSIL,Parse,"Parse");
   pragma Import(MSIL,Supports,"Supports");
end MSSyst.CodeDom.Compiler.CodeDomProvider;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.CodeDom.Compiler.CodeDomProvider,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.CodeDom.Compiler.CodeDomProvider");
