-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.MarshalByRefObject;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with Microsoft.Win32.RegistryKeyPermissionCheck;
with type MSSyst.Security.AccessControl.RegistrySecurity.Ref is access;
with type MSSyst.Object.Ref is access;
with MSSyst.Security.AccessControl.AccessControlSections;
with type MSSyst.String.Ref_array is access;
with Microsoft.Win32.RegistryValueOptions;
with Microsoft.Win32.RegistryValueKind;
with Microsoft.Win32.RegistryHive;
with MSSyst.Security.AccessControl.RegistryRights;
package Microsoft.Win32.RegistryKey is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.MarshalByRefObject.Typ   with record
      null;
   end record;
   procedure Close(
      This : access Typ);
   function CreateSubKey(
      This : access Typ;
      subkey : MSSyst.String.Ref) return Microsoft.Win32.RegistryKey.Ref;
   function CreateSubKey(
      This : access Typ;
      subkey : MSSyst.String.Ref;
      permissionCheck : Microsoft.Win32.RegistryKeyPermissionCheck.Valuetype) return Microsoft.Win32.RegistryKey.Ref;
   function CreateSubKey(
      This : access Typ;
      subkey : MSSyst.String.Ref;
      permissionCheck : Microsoft.Win32.RegistryKeyPermissionCheck.Valuetype;
      registrySecurity : MSSyst.Security.AccessControl.RegistrySecurity.Ref) return Microsoft.Win32.RegistryKey.Ref;
   procedure DeleteSubKey(
      This : access Typ;
      subkey : MSSyst.String.Ref);
   procedure DeleteSubKey(
      This : access Typ;
      subkey : MSSyst.String.Ref;
      throwOnMissingSubKey : Standard.Boolean);
   procedure DeleteSubKeyTree(
      This : access Typ;
      subkey : MSSyst.String.Ref);
   procedure DeleteValue(
      This : access Typ;
      name : MSSyst.String.Ref);
   procedure DeleteValue(
      This : access Typ;
      name : MSSyst.String.Ref;
      throwOnMissingValue : Standard.Boolean);
   procedure Flush(
      This : access Typ);
   function get_Name(
      This : access Typ) return MSSyst.String.Ref;
   function get_SubKeyCount(
      This : access Typ) return Integer;
   function get_ValueCount(
      This : access Typ) return Integer;
   function GetAccessControl(
      This : access Typ) return MSSyst.Security.AccessControl.RegistrySecurity.Ref;
   function GetAccessControl(
      This : access Typ;
      includeSections : MSSyst.Security.AccessControl.AccessControlSections.Valuetype) return MSSyst.Security.AccessControl.RegistrySecurity.Ref;
   function GetSubKeyNames(
      This : access Typ) return MSSyst.String.Ref_array;
   function GetValue(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.Object.Ref;
   function GetValue(
      This : access Typ;
      name : MSSyst.String.Ref;
      defaultValue : MSSyst.Object.Ref) return MSSyst.Object.Ref;
   function GetValue(
      This : access Typ;
      name : MSSyst.String.Ref;
      defaultValue : MSSyst.Object.Ref;
      options : Microsoft.Win32.RegistryValueOptions.Valuetype) return MSSyst.Object.Ref;
   function GetValueKind(
      This : access Typ;
      name : MSSyst.String.Ref) return Microsoft.Win32.RegistryValueKind.Valuetype;
   function GetValueNames(
      This : access Typ) return MSSyst.String.Ref_array;
   function OpenRemoteBaseKey(
      hKey : Microsoft.Win32.RegistryHive.Valuetype;
      machineName : MSSyst.String.Ref) return Microsoft.Win32.RegistryKey.Ref;
   function OpenSubKey(
      This : access Typ;
      name : MSSyst.String.Ref) return Microsoft.Win32.RegistryKey.Ref;
   function OpenSubKey(
      This : access Typ;
      name : MSSyst.String.Ref;
      permissionCheck : Microsoft.Win32.RegistryKeyPermissionCheck.Valuetype;
      rights : MSSyst.Security.AccessControl.RegistryRights.Valuetype) return Microsoft.Win32.RegistryKey.Ref;
   function OpenSubKey(
      This : access Typ;
      name : MSSyst.String.Ref;
      writable : Standard.Boolean) return Microsoft.Win32.RegistryKey.Ref;
   function OpenSubKey(
      This : access Typ;
      name : MSSyst.String.Ref;
      permissionCheck : Microsoft.Win32.RegistryKeyPermissionCheck.Valuetype) return Microsoft.Win32.RegistryKey.Ref;
   procedure SetAccessControl(
      This : access Typ;
      registrySecurity : MSSyst.Security.AccessControl.RegistrySecurity.Ref);
   procedure SetValue(
      This : access Typ;
      name : MSSyst.String.Ref;
      value : MSSyst.Object.Ref);
   procedure SetValue(
      This : access Typ;
      name : MSSyst.String.Ref;
      value : MSSyst.Object.Ref;
      valueKind : Microsoft.Win32.RegistryValueKind.Valuetype);
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,CreateSubKey,"CreateSubKey");
   pragma Import(MSIL,DeleteSubKey,"DeleteSubKey");
   pragma Import(MSIL,DeleteSubKeyTree,"DeleteSubKeyTree");
   pragma Import(MSIL,DeleteValue,"DeleteValue");
   pragma Import(MSIL,Flush,"Flush");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_SubKeyCount,"get_SubKeyCount");
   pragma Import(MSIL,get_ValueCount,"get_ValueCount");
   pragma Import(MSIL,GetAccessControl,"GetAccessControl");
   pragma Import(MSIL,GetSubKeyNames,"GetSubKeyNames");
   pragma Import(MSIL,GetValue,"GetValue");
   pragma Import(MSIL,GetValueKind,"GetValueKind");
   pragma Import(MSIL,GetValueNames,"GetValueNames");
   pragma Import(MSIL,OpenRemoteBaseKey,"OpenRemoteBaseKey");
   pragma Import(MSIL,OpenSubKey,"OpenSubKey");
   pragma Import(MSIL,SetAccessControl,"SetAccessControl");
   pragma Import(MSIL,SetValue,"SetValue");
   pragma Import(MSIL,ToString,"ToString");
end Microsoft.Win32.RegistryKey;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,Microsoft.Win32.RegistryKey,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]Microsoft.Win32.RegistryKey");
