-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Reflection.IReflect;
with type MSSyst.Reflection.FieldInfo.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Reflection.MethodInfo.Ref is access;
with type MSSyst.Delegate.Ref is access;
with type MSSyst.Reflection.PropertyInfo.Ref is access;
with type MSSyst.Reflection.MemberInfo.Ref is access;
package MSSyst.Runtime.InteropServices.Expando.IExpando is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is interface;
   function AddField(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.Reflection.FieldInfo.Ref is abstract;
   function AddMethod(
      This : access Typ;
      name : MSSyst.String.Ref;
      method : MSSyst.Delegate.Ref) return MSSyst.Reflection.MethodInfo.Ref is abstract;
   function AddProperty(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.Reflection.PropertyInfo.Ref is abstract;
   procedure RemoveMember(
      This : access Typ;
      m : MSSyst.Reflection.MemberInfo.Ref) is abstract;
private
   pragma Import(MSIL,AddField,"AddField");
   pragma Import(MSIL,AddMethod,"AddMethod");
   pragma Import(MSIL,AddProperty,"AddProperty");
   pragma Import(MSIL,RemoveMember,"RemoveMember");
end MSSyst.Runtime.InteropServices.Expando.IExpando;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Runtime.InteropServices.Expando.IExpando,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Runtime.InteropServices.Expando.IExpando");
