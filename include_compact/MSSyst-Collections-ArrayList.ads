-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Collections.IList;
with MSSyst.Collections.ICollection;
with MSSyst.ICloneable;
with type MSSyst.Collections.IComparer.Ref is access;
with type MSSyst.Array_k.Ref is access;
with type MSSyst.Collections.IEnumerator.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.String.Ref is access;
package MSSyst.Collections.ArrayList is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.IList.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.ICloneable.Typ
   with record
      null;
   end record;
   function new_ArrayList(
      This : Ref := null) return Ref;
   function new_ArrayList(
      This : Ref := null;
      capacity : Integer) return Ref;
   function new_ArrayList(
      This : Ref := null;
      c : MSSyst.Collections.ICollection.Ref) return Ref;
   function Adapter(
      list : MSSyst.Collections.IList.Ref) return MSSyst.Collections.ArrayList.Ref;
   function Add(
      This : access Typ;
      value : MSSyst.Object.Ref) return Integer;
   procedure AddRange(
      This : access Typ;
      c : MSSyst.Collections.ICollection.Ref);
   function BinarySearch(
      This : access Typ;
      value : MSSyst.Object.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Integer;
   function BinarySearch(
      This : access Typ;
      value : MSSyst.Object.Ref) return Integer;
   function BinarySearch(
      This : access Typ;
      index : Integer;
      count : Integer;
      value : MSSyst.Object.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Integer;
   procedure Clear(
      This : access Typ);
   function Clone(
      This : access Typ) return MSSyst.Object.Ref;
   function Contains(
      This : access Typ;
      item : MSSyst.Object.Ref) return Standard.Boolean;
   procedure CopyTo(
      This : access Typ;
      array_k : MSSyst.Array_k.Ref);
   procedure CopyTo(
      This : access Typ;
      array_k : MSSyst.Array_k.Ref;
      arrayIndex : Integer);
   procedure CopyTo(
      This : access Typ;
      index : Integer;
      array_k : MSSyst.Array_k.Ref;
      arrayIndex : Integer;
      count : Integer);
   function FixedSize(
      list : MSSyst.Collections.IList.Ref) return MSSyst.Collections.IList.Ref;
   function FixedSize(
      list : MSSyst.Collections.ArrayList.Ref) return MSSyst.Collections.ArrayList.Ref;
   function get_Capacity(
      This : access Typ) return Integer;
   function get_Count(
      This : access Typ) return Integer;
   function get_IsFixedSize(
      This : access Typ) return Standard.Boolean;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_Item(
      This : access Typ;
      index : Integer) return MSSyst.Object.Ref;
   function get_SyncRoot(
      This : access Typ) return MSSyst.Object.Ref;
   function GetEnumerator(
      This : access Typ) return MSSyst.Collections.IEnumerator.Ref;
   function GetEnumerator(
      This : access Typ;
      index : Integer;
      count : Integer) return MSSyst.Collections.IEnumerator.Ref;
   function GetRange(
      This : access Typ;
      index : Integer;
      count : Integer) return MSSyst.Collections.ArrayList.Ref;
   function IndexOf(
      This : access Typ;
      value : MSSyst.Object.Ref;
      startIndex : Integer;
      count : Integer) return Integer;
   function IndexOf(
      This : access Typ;
      value : MSSyst.Object.Ref;
      startIndex : Integer) return Integer;
   function IndexOf(
      This : access Typ;
      value : MSSyst.Object.Ref) return Integer;
   procedure Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.Object.Ref);
   procedure InsertRange(
      This : access Typ;
      index : Integer;
      c : MSSyst.Collections.ICollection.Ref);
   function LastIndexOf(
      This : access Typ;
      value : MSSyst.Object.Ref;
      startIndex : Integer;
      count : Integer) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : MSSyst.Object.Ref) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : MSSyst.Object.Ref;
      startIndex : Integer) return Integer;
   function ReadOnly(
      list : MSSyst.Collections.IList.Ref) return MSSyst.Collections.IList.Ref;
   function ReadOnly(
      list : MSSyst.Collections.ArrayList.Ref) return MSSyst.Collections.ArrayList.Ref;
   procedure Remove(
      This : access Typ;
      obj : MSSyst.Object.Ref);
   procedure RemoveAt(
      This : access Typ;
      index : Integer);
   procedure RemoveRange(
      This : access Typ;
      index : Integer;
      count : Integer);
   function Repeat(
      value : MSSyst.Object.Ref;
      count : Integer) return MSSyst.Collections.ArrayList.Ref;
   procedure Reverse_k(
      This : access Typ);
   procedure Reverse_k(
      This : access Typ;
      index : Integer;
      count : Integer);
   procedure set_Capacity(
      This : access Typ;
      value : Integer);
   procedure set_Item(
      This : access Typ;
      index : Integer;
      value : MSSyst.Object.Ref);
   procedure SetRange(
      This : access Typ;
      index : Integer;
      c : MSSyst.Collections.ICollection.Ref);
   procedure Sort(
      This : access Typ);
   procedure Sort(
      This : access Typ;
      index : Integer;
      count : Integer;
      comparer : MSSyst.Collections.IComparer.Ref);
   procedure Sort(
      This : access Typ;
      comparer : MSSyst.Collections.IComparer.Ref);
   function Synchronized_k(
      list : MSSyst.Collections.IList.Ref) return MSSyst.Collections.IList.Ref;
   function Synchronized_k(
      list : MSSyst.Collections.ArrayList.Ref) return MSSyst.Collections.ArrayList.Ref;
   function ToArray(
      This : access Typ;
      type_k : MSSyst.Type_k.Ref) return MSSyst.Array_k.Ref;
   function ToArray(
      This : access Typ) return MSSyst.Object.Ref_array;
   procedure TrimToSize(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_ArrayList);
   pragma Import(MSIL,Adapter,"Adapter");
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,AddRange,"AddRange");
   pragma Import(MSIL,BinarySearch,"BinarySearch");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Contains,"Contains");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,FixedSize,"FixedSize");
   pragma Import(MSIL,get_Capacity,"get_Capacity");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsFixedSize,"get_IsFixedSize");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetRange,"GetRange");
   pragma Import(MSIL,IndexOf,"IndexOf");
   pragma Import(MSIL,Insert,"Insert");
   pragma Import(MSIL,InsertRange,"InsertRange");
   pragma Import(MSIL,LastIndexOf,"LastIndexOf");
   pragma Import(MSIL,ReadOnly,"ReadOnly");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,RemoveAt,"RemoveAt");
   pragma Import(MSIL,RemoveRange,"RemoveRange");
   pragma Import(MSIL,Repeat,"Repeat");
   pragma Import(MSIL,Reverse_k,"Reverse");
   pragma Import(MSIL,set_Capacity,"set_Capacity");
   pragma Import(MSIL,set_Item,"set_Item");
   pragma Import(MSIL,SetRange,"SetRange");
   pragma Import(MSIL,Sort,"Sort");
   pragma Import(MSIL,Synchronized_k,"Synchronized");
   pragma Import(MSIL,ToArray,"ToArray");
   pragma Import(MSIL,TrimToSize,"TrimToSize");
end MSSyst.Collections.ArrayList;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Collections.ArrayList,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Collections.ArrayList");
