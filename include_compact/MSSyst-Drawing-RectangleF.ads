-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ValueType;
with type MSSyst.Drawing.PointF.Valuetype is tagged;
with type MSSyst.Object.Ref is access;
with type MSSyst.Drawing.SizeF.Valuetype is tagged;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Drawing.Rectangle.Valuetype is tagged;
with type MSSyst.String.Ref is access;
package MSSyst.Drawing.RectangleF is
   type ValueType is new MSSyst.ValueType.Typ with null record;
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function new_RectangleF(
      x : Float;
      y : Float;
      width : Float;
      height : Float) return Valuetype;
   function new_RectangleF(
      location : MSSyst.Drawing.PointF.Valuetype;
      size : MSSyst.Drawing.SizeF.Valuetype) return Valuetype;
   function Contains(
      This : Valuetype;
      x : Float;
      y : Float) return Standard.Boolean;
   function Contains(
      This : Valuetype;
      pt : MSSyst.Drawing.PointF.Valuetype) return Standard.Boolean;
   function Contains(
      This : Valuetype;
      rect : MSSyst.Drawing.RectangleF.Valuetype) return Standard.Boolean;
   function Equals(
      This : Valuetype;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function FromLTRB(
      left : Float;
      top : Float;
      right : Float;
      bottom : Float) return MSSyst.Drawing.RectangleF.Valuetype;
   function get_Bottom(
      This : Valuetype) return Float;
   function get_Height(
      This : Valuetype) return Float;
   function get_IsEmpty(
      This : Valuetype) return Standard.Boolean;
   function get_Left(
      This : Valuetype) return Float;
   function get_Location(
      This : Valuetype) return MSSyst.Drawing.PointF.Valuetype;
   function get_Right(
      This : Valuetype) return Float;
   function get_Size(
      This : Valuetype) return MSSyst.Drawing.SizeF.Valuetype;
   function get_Top(
      This : Valuetype) return Float;
   function get_Width(
      This : Valuetype) return Float;
   function get_X(
      This : Valuetype) return Float;
   function get_Y(
      This : Valuetype) return Float;
   function GetHashCode(
      This : Valuetype) return Integer;
   procedure Inflate(
      This : Valuetype;
      size : MSSyst.Drawing.SizeF.Valuetype);
   procedure Inflate(
      This : Valuetype;
      x : Float;
      y : Float);
   function Inflate(
      rect : MSSyst.Drawing.RectangleF.Valuetype;
      x : Float;
      y : Float) return MSSyst.Drawing.RectangleF.Valuetype;
   procedure Intersect(
      This : Valuetype;
      rect : MSSyst.Drawing.RectangleF.Valuetype);
   function Intersect(
      a : MSSyst.Drawing.RectangleF.Valuetype;
      b : MSSyst.Drawing.RectangleF.Valuetype) return MSSyst.Drawing.RectangleF.Valuetype;
   function IntersectsWith(
      This : Valuetype;
      rect : MSSyst.Drawing.RectangleF.Valuetype) return Standard.Boolean;
   procedure Offset(
      This : Valuetype;
      x : Float;
      y : Float);
   procedure Offset(
      This : Valuetype;
      pos : MSSyst.Drawing.PointF.Valuetype);
   function op_Equality(
      left : MSSyst.Drawing.RectangleF.Valuetype;
      right : MSSyst.Drawing.RectangleF.Valuetype) return Standard.Boolean;
   function op_Implicit(
      r : MSSyst.Drawing.Rectangle.Valuetype) return MSSyst.Drawing.RectangleF.Valuetype;
   function op_Inequality(
      left : MSSyst.Drawing.RectangleF.Valuetype;
      right : MSSyst.Drawing.RectangleF.Valuetype) return Standard.Boolean;
   procedure set_Height(
      This : Valuetype;
      value : Float);
   procedure set_Location(
      This : Valuetype;
      value : MSSyst.Drawing.PointF.Valuetype);
   procedure set_Size(
      This : Valuetype;
      value : MSSyst.Drawing.SizeF.Valuetype);
   procedure set_Width(
      This : Valuetype;
      value : Float);
   procedure set_X(
      This : Valuetype;
      value : Float);
   procedure set_Y(
      This : Valuetype;
      value : Float);
   function ToString(
      This : Valuetype) return MSSyst.String.Ref;
   function Union(
      a : MSSyst.Drawing.RectangleF.Valuetype;
      b : MSSyst.Drawing.RectangleF.Valuetype) return MSSyst.Drawing.RectangleF.Valuetype;
private
   pragma MSIL_Constructor(new_RectangleF);
   pragma Import(MSIL,Contains,"Contains");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,FromLTRB,"FromLTRB");
   pragma Import(MSIL,get_Bottom,"get_Bottom");
   pragma Import(MSIL,get_Height,"get_Height");
   pragma Import(MSIL,get_IsEmpty,"get_IsEmpty");
   pragma Import(MSIL,get_Left,"get_Left");
   pragma Import(MSIL,get_Location,"get_Location");
   pragma Import(MSIL,get_Right,"get_Right");
   pragma Import(MSIL,get_Size,"get_Size");
   pragma Import(MSIL,get_Top,"get_Top");
   pragma Import(MSIL,get_Width,"get_Width");
   pragma Import(MSIL,get_X,"get_X");
   pragma Import(MSIL,get_Y,"get_Y");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,Inflate,"Inflate");
   pragma Import(MSIL,Intersect,"Intersect");
   pragma Import(MSIL,IntersectsWith,"IntersectsWith");
   pragma Import(MSIL,Offset,"Offset");
   pragma Import(MSIL,op_Equality,"op_Equality");
   pragma Import(MSIL,op_Implicit,"op_Implicit");
   pragma Import(MSIL,op_Inequality,"op_Inequality");
   pragma Import(MSIL,set_Height,"set_Height");
   pragma Import(MSIL,set_Location,"set_Location");
   pragma Import(MSIL,set_Size,"set_Size");
   pragma Import(MSIL,set_Width,"set_Width");
   pragma Import(MSIL,set_X,"set_X");
   pragma Import(MSIL,set_Y,"set_Y");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,Union,"Union");
end MSSyst.Drawing.RectangleF;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Drawing.RectangleF,
   ".ver 2:0:0:0 .publickeytoken=( b0 3f 5f 7f 11 d5 0a 3a )",
   "[System.Drawing]System.Drawing.RectangleF");
