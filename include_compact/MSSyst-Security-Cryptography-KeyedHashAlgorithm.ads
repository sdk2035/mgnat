-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Security.Cryptography.HashAlgorithm;
with MSSyst.Security.Cryptography.ICryptoTransform;
with type MSSyst.IO.Stream.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Security.Cryptography.KeyedHashAlgorithm is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Security.Cryptography.HashAlgorithm.Typ
         and MSSyst.Security.Cryptography.ICryptoTransform.Typ
   with record
      null;
   end record;
   function Create(
      algName : MSSyst.String.Ref) return MSSyst.Security.Cryptography.KeyedHashAlgorithm.Ref;
   function Create return MSSyst.Security.Cryptography.KeyedHashAlgorithm.Ref;
   function get_Key(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   procedure set_Key(
      This : access Typ;
      value : MSIL_Types.unsigned_int8_Arr);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Create,"Create");
   pragma Import(MSIL,get_Key,"get_Key");
   pragma Import(MSIL,set_Key,"set_Key");
end MSSyst.Security.Cryptography.KeyedHashAlgorithm;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.Cryptography.KeyedHashAlgorithm,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.Cryptography.KeyedHashAlgorithm");
