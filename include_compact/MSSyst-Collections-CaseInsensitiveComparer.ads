-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Collections.IComparer;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
package MSSyst.Collections.CaseInsensitiveComparer is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.IComparer.Typ
   with record
      null;
   end record;
   function new_CaseInsensitiveComparer(
      This : Ref := null) return Ref;
   function new_CaseInsensitiveComparer(
      This : Ref := null;
      culture : MSSyst.Globalization.CultureInfo.Ref) return Ref;
   function Compare(
      This : access Typ;
      a : MSSyst.Object.Ref;
      b : MSSyst.Object.Ref) return Integer;
   function get_Default return MSSyst.Collections.CaseInsensitiveComparer.Ref;
   function get_DefaultInvariant return MSSyst.Collections.CaseInsensitiveComparer.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_CaseInsensitiveComparer);
   pragma Import(MSIL,Compare,"Compare");
   pragma Import(MSIL,get_Default,"get_Default");
   pragma Import(MSIL,get_DefaultInvariant,"get_DefaultInvariant");
end MSSyst.Collections.CaseInsensitiveComparer;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Collections.CaseInsensitiveComparer,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Collections.CaseInsensitiveComparer");
