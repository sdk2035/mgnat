-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.Net.ICredentials;
with MSSyst.Net.ICredentialsByHost;
with type MSSyst.String.Ref is access;
with type MSSyst.Net.NetworkCredential.Ref is access;
with type MSSyst.Uri.Ref is access;
with type MSSyst.Collections.IEnumerator.Ref is access;
with type MSSyst.Type_k.Ref is access;
package MSSyst.Net.CredentialCache is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Net.ICredentials.Typ
         and MSSyst.Net.ICredentialsByHost.Typ
   with record
      null;
   end record;
   function new_CredentialCache(
      This : Ref := null) return Ref;
   procedure Add(
      This : access Typ;
      host : MSSyst.String.Ref;
      port : Integer;
      authenticationType : MSSyst.String.Ref;
      credential : MSSyst.Net.NetworkCredential.Ref);
   procedure Add(
      This : access Typ;
      uriPrefix : MSSyst.Uri.Ref;
      authType : MSSyst.String.Ref;
      cred : MSSyst.Net.NetworkCredential.Ref);
   function get_DefaultCredentials return MSSyst.Net.ICredentials.Ref;
   function get_DefaultNetworkCredentials return MSSyst.Net.NetworkCredential.Ref;
   function GetCredential(
      This : access Typ;
      host : MSSyst.String.Ref;
      port : Integer;
      authenticationType : MSSyst.String.Ref) return MSSyst.Net.NetworkCredential.Ref;
   function GetCredential(
      This : access Typ;
      uriPrefix : MSSyst.Uri.Ref;
      authType : MSSyst.String.Ref) return MSSyst.Net.NetworkCredential.Ref;
   function GetEnumerator(
      This : access Typ) return MSSyst.Collections.IEnumerator.Ref;
   procedure Remove(
      This : access Typ;
      host : MSSyst.String.Ref;
      port : Integer;
      authenticationType : MSSyst.String.Ref);
   procedure Remove(
      This : access Typ;
      uriPrefix : MSSyst.Uri.Ref;
      authType : MSSyst.String.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_CredentialCache);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,get_DefaultCredentials,"get_DefaultCredentials");
   pragma Import(MSIL,get_DefaultNetworkCredentials,"get_DefaultNetworkCredentials");
   pragma Import(MSIL,GetCredential,"GetCredential");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,Remove,"Remove");
end MSSyst.Net.CredentialCache;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.CredentialCache,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.CredentialCache");
