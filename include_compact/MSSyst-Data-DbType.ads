-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.IComparable.Ref is access;
with type MSSyst.IFormattable.Ref is access;
with type MSSyst.IConvertible.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.TypeCode;
with type MSSyst.String.Ref is access;
with type MSSyst.IFormatProvider.Ref is access;
package MSSyst.Data.DbType is
   type ValueType is (
      AnsiString,
      Binary,
      Byte,
      Boolean,
      Currency,
      Date,
      DateTime,
      Decimal,
      Double,
      Guid,
      Int16,
      Int32,
      Int64,
      Object,
      SByte,
      Single,
      String,
      Time,
      UInt16,
      UInt32,
      UInt64,
      VarNumeric,
      AnsiStringFixedLength,
      StringFixedLength);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      AnsiString =>  0,
      Binary =>  1,
      Byte =>  2,
      Boolean =>  3,
      Currency =>  4,
      Date =>  5,
      DateTime =>  6,
      Decimal =>  7,
      Double =>  8,
      Guid =>  9,
      Int16 =>  10,
      Int32 =>  11,
      Int64 =>  12,
      Object =>  13,
      SByte =>  14,
      Single =>  15,
      String =>  16,
      Time =>  17,
      UInt16 =>  18,
      UInt32 =>  19,
      UInt64 =>  20,
      VarNumeric =>  21,
      AnsiStringFixedLength =>  22,
      StringFixedLength =>  23);
   type ValueType_Arr1 is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr1;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function CompareTo(
      This : Valuetype;
      target : MSSyst.Object.Ref) return Integer;
   function Equals(
      This : Valuetype;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return MSSyst.Type_k.Ref;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      format : MSSyst.String.Ref;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToString(
      This : Valuetype;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Data.DbType;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Data.DbType,
   ".ver 1:0:5000:0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[System.Data]System.Data.DbType");
