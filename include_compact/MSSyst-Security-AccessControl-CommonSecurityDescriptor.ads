-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Security.AccessControl.GenericSecurityDescriptor;
with type MSSyst.Object.Ref is access;
with MSSyst.Security.AccessControl.ControlFlags;
with type MSSyst.Security.AccessControl.DiscretionaryAcl.Ref is access;
with type MSSyst.Security.Principal.SecurityIdentifier.Ref is access;
with type MSSyst.Security.AccessControl.SystemAcl.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Security.AccessControl.AccessControlSections;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Security.AccessControl.RawSecurityDescriptor.Ref is access;
package MSSyst.Security.AccessControl.CommonSecurityDescriptor is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Security.AccessControl.GenericSecurityDescriptor.Typ   with record
      null;
   end record;
   function new_CommonSecurityDescriptor(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      flags : MSSyst.Security.AccessControl.ControlFlags.Valuetype;
      owner : MSSyst.Security.Principal.SecurityIdentifier.Ref;
      group : MSSyst.Security.Principal.SecurityIdentifier.Ref;
      systemAcl : MSSyst.Security.AccessControl.SystemAcl.Ref;
      discretionaryAcl : MSSyst.Security.AccessControl.DiscretionaryAcl.Ref) return Ref;
   function new_CommonSecurityDescriptor(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      rawSecurityDescriptor : MSSyst.Security.AccessControl.RawSecurityDescriptor.Ref) return Ref;
   function new_CommonSecurityDescriptor(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      sddlForm : MSSyst.String.Ref) return Ref;
   function new_CommonSecurityDescriptor(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      binaryForm : MSIL_Types.unsigned_int8_Arr;
      offset : Integer) return Ref;
   function get_ControlFlags(
      This : access Typ) return MSSyst.Security.AccessControl.ControlFlags.Valuetype;
   function get_DiscretionaryAcl(
      This : access Typ) return MSSyst.Security.AccessControl.DiscretionaryAcl.Ref;
   function get_Group(
      This : access Typ) return MSSyst.Security.Principal.SecurityIdentifier.Ref;
   function get_IsContainer(
      This : access Typ) return Standard.Boolean;
   function get_IsDiscretionaryAclCanonical(
      This : access Typ) return Standard.Boolean;
   function get_IsDS(
      This : access Typ) return Standard.Boolean;
   function get_IsSystemAclCanonical(
      This : access Typ) return Standard.Boolean;
   function get_Owner(
      This : access Typ) return MSSyst.Security.Principal.SecurityIdentifier.Ref;
   function get_SystemAcl(
      This : access Typ) return MSSyst.Security.AccessControl.SystemAcl.Ref;
   procedure PurgeAccessControl(
      This : access Typ;
      sid : MSSyst.Security.Principal.SecurityIdentifier.Ref);
   procedure PurgeAudit(
      This : access Typ;
      sid : MSSyst.Security.Principal.SecurityIdentifier.Ref);
   procedure set_DiscretionaryAcl(
      This : access Typ;
      value : MSSyst.Security.AccessControl.DiscretionaryAcl.Ref);
   procedure set_Group(
      This : access Typ;
      value : MSSyst.Security.Principal.SecurityIdentifier.Ref);
   procedure set_Owner(
      This : access Typ;
      value : MSSyst.Security.Principal.SecurityIdentifier.Ref);
   procedure set_SystemAcl(
      This : access Typ;
      value : MSSyst.Security.AccessControl.SystemAcl.Ref);
   procedure SetDiscretionaryAclProtection(
      This : access Typ;
      isProtected : Standard.Boolean;
      preserveInheritance : Standard.Boolean);
   procedure SetSystemAclProtection(
      This : access Typ;
      isProtected : Standard.Boolean;
      preserveInheritance : Standard.Boolean);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_CommonSecurityDescriptor);
   pragma Import(MSIL,get_ControlFlags,"get_ControlFlags");
   pragma Import(MSIL,get_DiscretionaryAcl,"get_DiscretionaryAcl");
   pragma Import(MSIL,get_Group,"get_Group");
   pragma Import(MSIL,get_IsContainer,"get_IsContainer");
   pragma Import(MSIL,get_IsDiscretionaryAclCanonical,"get_IsDiscretionaryAclCanonical");
   pragma Import(MSIL,get_IsDS,"get_IsDS");
   pragma Import(MSIL,get_IsSystemAclCanonical,"get_IsSystemAclCanonical");
   pragma Import(MSIL,get_Owner,"get_Owner");
   pragma Import(MSIL,get_SystemAcl,"get_SystemAcl");
   pragma Import(MSIL,PurgeAccessControl,"PurgeAccessControl");
   pragma Import(MSIL,PurgeAudit,"PurgeAudit");
   pragma Import(MSIL,set_DiscretionaryAcl,"set_DiscretionaryAcl");
   pragma Import(MSIL,set_Group,"set_Group");
   pragma Import(MSIL,set_Owner,"set_Owner");
   pragma Import(MSIL,set_SystemAcl,"set_SystemAcl");
   pragma Import(MSIL,SetDiscretionaryAclProtection,"SetDiscretionaryAclProtection");
   pragma Import(MSIL,SetSystemAclProtection,"SetSystemAclProtection");
end MSSyst.Security.AccessControl.CommonSecurityDescriptor;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Security.AccessControl.CommonSecurityDescriptor,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Security.AccessControl.CommonSecurityDescriptor");
