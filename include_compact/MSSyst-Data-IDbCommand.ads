-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.IDisposable.Ref is access;
with type MSSyst.Data.IDbDataParameter.Ref is access;
with type MSSyst.Data.IDataReader.Ref is access;
with MSSyst.Data.CommandBehavior;
with type MSSyst.Object.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Data.CommandType;
with type MSSyst.Data.IDbConnection.Ref is access;
with type MSSyst.Data.IDataParameterCollection.Ref is access;
with type MSSyst.Data.IDbTransaction.Ref is access;
with MSSyst.Data.UpdateRowSource;
package MSSyst.Data.IDbCommand is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Arr1 is array(Natural range <>) of Ref;
   type Ref_Array is access all Arr1;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ (Self : access MSSyst.Object.Typ'Class)
      is abstract new MSSyst.Object.Typ with null record;
   pragma MSIL_Interface(Typ);
   procedure Cancel(
      This : access Typ);
   function CreateParameter(
      This : access Typ) return MSSyst.Data.IDbDataParameter.Ref;
   function ExecuteNonQuery(
      This : access Typ) return Integer;
   function ExecuteReader(
      This : access Typ;
      behavior : MSSyst.Data.CommandBehavior.Valuetype) return MSSyst.Data.IDataReader.Ref;
   function ExecuteReader(
      This : access Typ) return MSSyst.Data.IDataReader.Ref;
   function ExecuteScalar(
      This : access Typ) return MSSyst.Object.Ref;
   function get_CommandText(
      This : access Typ) return MSSyst.String.Ref;
   function get_CommandTimeout(
      This : access Typ) return Integer;
   function get_CommandType(
      This : access Typ) return MSSyst.Data.CommandType.Valuetype;
   function get_Connection(
      This : access Typ) return MSSyst.Data.IDbConnection.Ref;
   function get_Parameters(
      This : access Typ) return MSSyst.Data.IDataParameterCollection.Ref;
   function get_Transaction(
      This : access Typ) return MSSyst.Data.IDbTransaction.Ref;
   function get_UpdatedRowSource(
      This : access Typ) return MSSyst.Data.UpdateRowSource.Valuetype;
   procedure Prepare(
      This : access Typ);
   procedure set_CommandText(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_CommandTimeout(
      This : access Typ;
      value : Integer);
   procedure set_CommandType(
      This : access Typ;
      value : MSSyst.Data.CommandType.Valuetype);
   procedure set_Connection(
      This : access Typ;
      value : MSSyst.Data.IDbConnection.Ref);
   procedure set_Transaction(
      This : access Typ;
      value : MSSyst.Data.IDbTransaction.Ref);
   procedure set_UpdatedRowSource(
      This : access Typ;
      value : MSSyst.Data.UpdateRowSource.Valuetype);
private
   pragma Import(MSIL,Cancel,"Cancel");
   pragma Import(MSIL,CreateParameter,"CreateParameter");
   pragma Import(MSIL,ExecuteNonQuery,"ExecuteNonQuery");
   pragma Import(MSIL,ExecuteReader,"ExecuteReader");
   pragma Import(MSIL,ExecuteScalar,"ExecuteScalar");
   pragma Import(MSIL,get_CommandText,"get_CommandText");
   pragma Import(MSIL,get_CommandTimeout,"get_CommandTimeout");
   pragma Import(MSIL,get_CommandType,"get_CommandType");
   pragma Import(MSIL,get_Connection,"get_Connection");
   pragma Import(MSIL,get_Parameters,"get_Parameters");
   pragma Import(MSIL,get_Transaction,"get_Transaction");
   pragma Import(MSIL,get_UpdatedRowSource,"get_UpdatedRowSource");
   pragma Import(MSIL,Prepare,"Prepare");
   pragma Import(MSIL,set_CommandText,"set_CommandText");
   pragma Import(MSIL,set_CommandTimeout,"set_CommandTimeout");
   pragma Import(MSIL,set_CommandType,"set_CommandType");
   pragma Import(MSIL,set_Connection,"set_Connection");
   pragma Import(MSIL,set_Transaction,"set_Transaction");
   pragma Import(MSIL,set_UpdatedRowSource,"set_UpdatedRowSource");
end MSSyst.Data.IDbCommand;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Data.IDbCommand,
   ".ver 1:0:5000:0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[System.Data]System.Data.IDbCommand");
