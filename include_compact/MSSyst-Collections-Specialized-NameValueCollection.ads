-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Collections.Specialized.NameObjectCollectionBase;
with MSSyst.Collections.ICollection;
with MSSyst.Runtime.Serialization.ISerializable;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
with type MSSyst.String.Ref is access;
with type MSSyst.Array_k.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.String.Ref_array is access;
with type MSSyst.Collections.Specialized.NameObjectCollectionBase.KeysCollection.Ref is access;
with type MSSyst.Collections.IEnumerator.Ref is access;
with type MSSyst.Runtime.Serialization.SerializationInfo.Ref is access;
with type MSSyst.Runtime.Serialization.StreamingContext.Valuetype is tagged;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.Collections.IHashCodeProvider.Ref is access;
with type MSSyst.Collections.IComparer.Ref is access;
with type MSSyst.Collections.IEqualityComparer.Ref is access;
package MSSyst.Collections.Specialized.NameValueCollection is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Collections.Specialized.NameObjectCollectionBase.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
   with record
      null;
   end record;
   function new_NameValueCollection(
      This : Ref := null) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      col : MSSyst.Collections.Specialized.NameValueCollection.Ref) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      hashProvider : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer;
      equalityComparer : MSSyst.Collections.IEqualityComparer.Ref) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer;
      col : MSSyst.Collections.Specialized.NameValueCollection.Ref) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer;
      hashProvider : MSSyst.Collections.IHashCodeProvider.Ref;
      comparer : MSSyst.Collections.IComparer.Ref) return Ref;
   procedure Add(
      This : access Typ;
      name : MSSyst.String.Ref;
      value : MSSyst.String.Ref);
   procedure Add(
      This : access Typ;
      c : MSSyst.Collections.Specialized.NameValueCollection.Ref);
   procedure Clear(
      This : access Typ);
   procedure CopyTo(
      This : access Typ;
      dest : MSSyst.Array_k.Ref;
      index : Integer);
   function Get(
      This : access Typ;
      index : Integer) return MSSyst.String.Ref;
   function Get(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.String.Ref;
   function get_AllKeys(
      This : access Typ) return MSSyst.String.Ref_array;
   function get_Item(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.String.Ref;
   function get_Item(
      This : access Typ;
      index : Integer) return MSSyst.String.Ref;
   function GetKey(
      This : access Typ;
      index : Integer) return MSSyst.String.Ref;
   function GetValues(
      This : access Typ;
      name : MSSyst.String.Ref) return MSSyst.String.Ref_array;
   function GetValues(
      This : access Typ;
      index : Integer) return MSSyst.String.Ref_array;
   function HasKeys(
      This : access Typ) return Standard.Boolean;
   procedure Remove(
      This : access Typ;
      name : MSSyst.String.Ref);
   procedure Set(
      This : access Typ;
      name : MSSyst.String.Ref;
      value : MSSyst.String.Ref);
   procedure set_Item(
      This : access Typ;
      name : MSSyst.String.Ref;
      value : MSSyst.String.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_NameValueCollection);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Get,"Get");
   pragma Import(MSIL,get_AllKeys,"get_AllKeys");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,GetKey,"GetKey");
   pragma Import(MSIL,GetValues,"GetValues");
   pragma Import(MSIL,HasKeys,"HasKeys");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,Set,"Set");
   pragma Import(MSIL,set_Item,"set_Item");
end MSSyst.Collections.Specialized.NameValueCollection;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Collections.Specialized.NameValueCollection,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Collections.Specialized.NameValueCollection");
