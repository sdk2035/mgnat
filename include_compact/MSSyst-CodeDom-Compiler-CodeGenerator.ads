-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.CodeDom.Compiler.ICodeGenerator;
with type MSSyst.CodeDom.CodeTypeMember.Ref is access;
with type MSSyst.IO.TextWriter.Ref is access;
with type MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.CodeDom.CodeObject.Ref is access;
package MSSyst.CodeDom.Compiler.CodeGenerator is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Object.Typ
         and MSSyst.CodeDom.Compiler.ICodeGenerator.Typ
   with record
      null;
   end record;
   procedure GenerateCodeFromMember(
      This : access Typ;
      member : MSSyst.CodeDom.CodeTypeMember.Ref;
      writer : MSSyst.IO.TextWriter.Ref;
      options : MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Ref);
   function IsValidLanguageIndependentIdentifier(
      value : MSSyst.String.Ref) return Standard.Boolean;
   procedure ValidateIdentifiers(
      e : MSSyst.CodeDom.CodeObject.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,GenerateCodeFromMember,"GenerateCodeFromMember");
   pragma Import(MSIL,IsValidLanguageIndependentIdentifier,"IsValidLanguageIndependentIdentifier");
   pragma Import(MSIL,ValidateIdentifiers,"ValidateIdentifiers");
end MSSyst.CodeDom.Compiler.CodeGenerator;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.CodeDom.Compiler.CodeGenerator,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.CodeDom.Compiler.CodeGenerator");
