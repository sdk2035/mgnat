-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.IO.FileSystemInfo;
with MSSyst.Runtime.Serialization.ISerializable;
with type MSSyst.Security.AccessControl.DirectorySecurity.Ref is access;
with type MSSyst.Runtime.Remoting.ObjRef.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Object.Ref is access;
with MSSyst.IO.FileAttributes;
with type MSSyst.DateTime.Valuetype is tagged;
with MSSyst.Security.AccessControl.AccessControlSections;
with type MSSyst.IO.DirectoryInfo.Ref_array is access;
with MSSyst.IO.SearchOption;
with type MSSyst.IO.FileInfo.Ref_array is access;
with type MSSyst.IO.FileSystemInfo.Ref_array is access;
with type MSSyst.Runtime.Serialization.SerializationInfo.Ref is access;
with type MSSyst.Runtime.Serialization.StreamingContext.Valuetype is tagged;
package MSSyst.IO.DirectoryInfo is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.IO.FileSystemInfo.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   function new_DirectoryInfo(
      This : Ref := null;
      path : MSSyst.String.Ref) return Ref;
   procedure Create(
      This : access Typ);
   procedure Create(
      This : access Typ;
      directorySecurity : MSSyst.Security.AccessControl.DirectorySecurity.Ref);
   function CreateSubdirectory(
      This : access Typ;
      path : MSSyst.String.Ref;
      directorySecurity : MSSyst.Security.AccessControl.DirectorySecurity.Ref) return MSSyst.IO.DirectoryInfo.Ref;
   function CreateSubdirectory(
      This : access Typ;
      path : MSSyst.String.Ref) return MSSyst.IO.DirectoryInfo.Ref;
   procedure Delete(
      This : access Typ;
      recursive : Standard.Boolean);
   procedure Delete(
      This : access Typ);
   function get_Exists(
      This : access Typ) return Standard.Boolean;
   function get_Name(
      This : access Typ) return MSSyst.String.Ref;
   function get_Parent(
      This : access Typ) return MSSyst.IO.DirectoryInfo.Ref;
   function get_Root(
      This : access Typ) return MSSyst.IO.DirectoryInfo.Ref;
   function GetAccessControl(
      This : access Typ;
      includeSections : MSSyst.Security.AccessControl.AccessControlSections.Valuetype) return MSSyst.Security.AccessControl.DirectorySecurity.Ref;
   function GetAccessControl(
      This : access Typ) return MSSyst.Security.AccessControl.DirectorySecurity.Ref;
   function GetDirectories(
      This : access Typ) return MSSyst.IO.DirectoryInfo.Ref_array;
   function GetDirectories(
      This : access Typ;
      searchPattern : MSSyst.String.Ref;
      searchOption : MSSyst.IO.SearchOption.Valuetype) return MSSyst.IO.DirectoryInfo.Ref_array;
   function GetDirectories(
      This : access Typ;
      searchPattern : MSSyst.String.Ref) return MSSyst.IO.DirectoryInfo.Ref_array;
   function GetFiles(
      This : access Typ;
      searchPattern : MSSyst.String.Ref;
      searchOption : MSSyst.IO.SearchOption.Valuetype) return MSSyst.IO.FileInfo.Ref_array;
   function GetFiles(
      This : access Typ;
      searchPattern : MSSyst.String.Ref) return MSSyst.IO.FileInfo.Ref_array;
   function GetFiles(
      This : access Typ) return MSSyst.IO.FileInfo.Ref_array;
   function GetFileSystemInfos(
      This : access Typ;
      searchPattern : MSSyst.String.Ref) return MSSyst.IO.FileSystemInfo.Ref_array;
   function GetFileSystemInfos(
      This : access Typ) return MSSyst.IO.FileSystemInfo.Ref_array;
   procedure MoveTo(
      This : access Typ;
      destDirName : MSSyst.String.Ref);
   procedure SetAccessControl(
      This : access Typ;
      directorySecurity : MSSyst.Security.AccessControl.DirectorySecurity.Ref);
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_DirectoryInfo);
   pragma Import(MSIL,Create,"Create");
   pragma Import(MSIL,CreateSubdirectory,"CreateSubdirectory");
   pragma Import(MSIL,Delete,"Delete");
   pragma Import(MSIL,get_Exists,"get_Exists");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_Parent,"get_Parent");
   pragma Import(MSIL,get_Root,"get_Root");
   pragma Import(MSIL,GetAccessControl,"GetAccessControl");
   pragma Import(MSIL,GetDirectories,"GetDirectories");
   pragma Import(MSIL,GetFiles,"GetFiles");
   pragma Import(MSIL,GetFileSystemInfos,"GetFileSystemInfos");
   pragma Import(MSIL,MoveTo,"MoveTo");
   pragma Import(MSIL,SetAccessControl,"SetAccessControl");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.IO.DirectoryInfo;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.IO.DirectoryInfo,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.IO.DirectoryInfo");
