-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.ComponentModel.IComponent.Ref is access;
with type MSSyst.IDisposable.Ref is access;
with type MSSyst.IServiceProvider.Ref is access;
with type MSSyst.ComponentModel.IBindingList.Ref is access;
with type MSSyst.Collections.IList.Ref is access;
with type MSSyst.Collections.ICollection.Ref is access;
with type MSSyst.Collections.IEnumerable.Ref is access;
with type MSSyst.ComponentModel.ITypedList.Ref is access;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.ComponentModel.ListChangedEventHandler.Ref is access;
with type MSSyst.Data.DataRowView.Ref is access;
with type MSSyst.Array_k.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Data.DataRowView.Ref_array is access;
with type MSSyst.ComponentModel.IContainer.Ref is access;
with type MSSyst.Data.DataViewManager.Ref is access;
with type MSSyst.String.Ref is access;
with MSSyst.Data.DataViewRowState;
with type MSSyst.ComponentModel.ISite.Ref is access;
with type MSSyst.Data.DataTable.Ref is access;
with type MSSyst.Collections.IEnumerator.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.ComponentModel.MarshalByValueComponent;
package MSSyst.Data.DataView is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Arr1 is array(Natural range <>) of Ref;
   type Ref_Array is access all Arr1;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ(
         I_IComponent : MSSyst.ComponentModel.IComponent.Ref;
         I_IDisposable : MSSyst.IDisposable.Ref;
         I_IServiceProvider : MSSyst.IServiceProvider.Ref;
         I_IBindingList : MSSyst.ComponentModel.IBindingList.Ref;
         I_IList : MSSyst.Collections.IList.Ref;
         I_ICollection : MSSyst.Collections.ICollection.Ref;
         I_IEnumerable : MSSyst.Collections.IEnumerable.Ref;
         I_ITypedList : MSSyst.ComponentModel.ITypedList.Ref
      ) is new MSSyst.ComponentModel.MarshalByValueComponent.Typ(
         I_IComponent => I_IComponent,
         I_IDisposable => I_IDisposable,
         I_IServiceProvider => I_IServiceProvider
      ) with record
      null;
   end record;
   function new_DataView(
      This : Ref := null) return Ref;
   function new_DataView(
      This : Ref := null;
      table : MSSyst.Data.DataTable.Ref) return Ref;
   function new_DataView(
      This : Ref := null;
      table : MSSyst.Data.DataTable.Ref;
      RowFilter : MSSyst.String.Ref;
      Sort : MSSyst.String.Ref;
      RowState : MSSyst.Data.DataViewRowState.Valuetype) return Ref;
   procedure add_ListChanged(
      This : access Typ;
      value : MSSyst.ComponentModel.ListChangedEventHandler.Ref);
   function AddNew(
      This : access Typ) return MSSyst.Data.DataRowView.Ref;
   procedure BeginInit(
      This : access Typ);
   procedure CopyTo(
      This : access Typ;
      array_k : MSSyst.Array_k.Ref;
      index : Integer);
   procedure Delete(
      This : access Typ;
      index : Integer);
   procedure Dispose(
      This : access Typ);
   procedure EndInit(
      This : access Typ);
   function Find(
      This : access Typ;
      key : MSSyst.Object.Ref) return Integer;
   function Find(
      This : access Typ;
      key : MSSyst.Object.Ref_array) return Integer;
   function FindRows(
      This : access Typ;
      key : MSSyst.Object.Ref_array) return MSSyst.Data.DataRowView.Ref_array;
   function FindRows(
      This : access Typ;
      key : MSSyst.Object.Ref) return MSSyst.Data.DataRowView.Ref_array;
   function get_AllowDelete(
      This : access Typ) return Standard.Boolean;
   function get_AllowEdit(
      This : access Typ) return Standard.Boolean;
   function get_AllowNew(
      This : access Typ) return Standard.Boolean;
   function get_ApplyDefaultSort(
      This : access Typ) return Standard.Boolean;
   function get_Count(
      This : access Typ) return Integer;
   function get_DataViewManager(
      This : access Typ) return MSSyst.Data.DataViewManager.Ref;
   function get_Item(
      This : access Typ;
      recordIndex : Integer) return MSSyst.Data.DataRowView.Ref;
   function get_RowFilter(
      This : access Typ) return MSSyst.String.Ref;
   function get_RowStateFilter(
      This : access Typ) return MSSyst.Data.DataViewRowState.Valuetype;
   function get_Sort(
      This : access Typ) return MSSyst.String.Ref;
   function get_Table(
      This : access Typ) return MSSyst.Data.DataTable.Ref;
   function GetEnumerator(
      This : access Typ) return MSSyst.Collections.IEnumerator.Ref;
   procedure remove_ListChanged(
      This : access Typ;
      value : MSSyst.ComponentModel.ListChangedEventHandler.Ref);
   procedure set_AllowDelete(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_AllowEdit(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_AllowNew(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_ApplyDefaultSort(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_RowFilter(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_RowStateFilter(
      This : access Typ;
      value : MSSyst.Data.DataViewRowState.Valuetype);
   procedure set_Sort(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Table(
      This : access Typ;
      value : MSSyst.Data.DataTable.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_DataView);
   pragma Import(MSIL,add_ListChanged,"add_ListChanged");
   pragma Import(MSIL,AddNew,"AddNew");
   pragma Import(MSIL,BeginInit,"BeginInit");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Delete,"Delete");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,EndInit,"EndInit");
   pragma Import(MSIL,Find,"Find");
   pragma Import(MSIL,FindRows,"FindRows");
   pragma Import(MSIL,get_AllowDelete,"get_AllowDelete");
   pragma Import(MSIL,get_AllowEdit,"get_AllowEdit");
   pragma Import(MSIL,get_AllowNew,"get_AllowNew");
   pragma Import(MSIL,get_ApplyDefaultSort,"get_ApplyDefaultSort");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_DataViewManager,"get_DataViewManager");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,get_RowFilter,"get_RowFilter");
   pragma Import(MSIL,get_RowStateFilter,"get_RowStateFilter");
   pragma Import(MSIL,get_Sort,"get_Sort");
   pragma Import(MSIL,get_Table,"get_Table");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,remove_ListChanged,"remove_ListChanged");
   pragma Import(MSIL,set_AllowDelete,"set_AllowDelete");
   pragma Import(MSIL,set_AllowEdit,"set_AllowEdit");
   pragma Import(MSIL,set_AllowNew,"set_AllowNew");
   pragma Import(MSIL,set_ApplyDefaultSort,"set_ApplyDefaultSort");
   pragma Import(MSIL,set_RowFilter,"set_RowFilter");
   pragma Import(MSIL,set_RowStateFilter,"set_RowStateFilter");
   pragma Import(MSIL,set_Sort,"set_Sort");
   pragma Import(MSIL,set_Table,"set_Table");
end MSSyst.Data.DataView;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Data.DataView,
   ".ver 1:0:5000:0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[System.Data]System.Data.DataView");
