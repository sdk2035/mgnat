-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with type MSSyst.Net.Sockets.Socket.Ref is access;
with type MSSyst.Net.Sockets.TcpClient.Ref is access;
with type MSSyst.IAsyncResult.Ref is access;
with type MSSyst.AsyncCallback.Ref is access;
with type MSSyst.Net.EndPoint.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Net.IPEndPoint.Ref is access;
with type MSSyst.Net.IPAddress.Ref is access;
package MSSyst.Net.Sockets.TcpListener is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   function new_TcpListener(
      This : Ref := null;
      localEP : MSSyst.Net.IPEndPoint.Ref) return Ref;
   function new_TcpListener(
      This : Ref := null;
      localaddr : MSSyst.Net.IPAddress.Ref;
      port : Integer) return Ref;
   function new_TcpListener(
      This : Ref := null;
      port : Integer) return Ref;
   function AcceptSocket(
      This : access Typ) return MSSyst.Net.Sockets.Socket.Ref;
   function AcceptTcpClient(
      This : access Typ) return MSSyst.Net.Sockets.TcpClient.Ref;
   function BeginAcceptSocket(
      This : access Typ;
      callback : MSSyst.AsyncCallback.Ref;
      state : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function BeginAcceptTcpClient(
      This : access Typ;
      callback : MSSyst.AsyncCallback.Ref;
      state : MSSyst.Object.Ref) return MSSyst.IAsyncResult.Ref;
   function EndAcceptSocket(
      This : access Typ;
      asyncResult : MSSyst.IAsyncResult.Ref) return MSSyst.Net.Sockets.Socket.Ref;
   function EndAcceptTcpClient(
      This : access Typ;
      asyncResult : MSSyst.IAsyncResult.Ref) return MSSyst.Net.Sockets.TcpClient.Ref;
   function get_ExclusiveAddressUse(
      This : access Typ) return Standard.Boolean;
   function get_LocalEndpoint(
      This : access Typ) return MSSyst.Net.EndPoint.Ref;
   function get_Server(
      This : access Typ) return MSSyst.Net.Sockets.Socket.Ref;
   function Pending(
      This : access Typ) return Standard.Boolean;
   procedure set_ExclusiveAddressUse(
      This : access Typ;
      value : Standard.Boolean);
   procedure Start(
      This : access Typ;
      backlog : Integer);
   procedure Start(
      This : access Typ);
   procedure Stop(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_TcpListener);
   pragma Import(MSIL,AcceptSocket,"AcceptSocket");
   pragma Import(MSIL,AcceptTcpClient,"AcceptTcpClient");
   pragma Import(MSIL,BeginAcceptSocket,"BeginAcceptSocket");
   pragma Import(MSIL,BeginAcceptTcpClient,"BeginAcceptTcpClient");
   pragma Import(MSIL,EndAcceptSocket,"EndAcceptSocket");
   pragma Import(MSIL,EndAcceptTcpClient,"EndAcceptTcpClient");
   pragma Import(MSIL,get_ExclusiveAddressUse,"get_ExclusiveAddressUse");
   pragma Import(MSIL,get_LocalEndpoint,"get_LocalEndpoint");
   pragma Import(MSIL,get_Server,"get_Server");
   pragma Import(MSIL,Pending,"Pending");
   pragma Import(MSIL,set_ExclusiveAddressUse,"set_ExclusiveAddressUse");
   pragma Import(MSIL,Start,"Start");
   pragma Import(MSIL,Stop,"Stop");
end MSSyst.Net.Sockets.TcpListener;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Net.Sockets.TcpListener,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Sockets.TcpListener");
