-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Object;
with MSSyst.ICloneable;
with MSSyst.IComparable;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.String.Ref is access;
package MSSyst.Version is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ
         and MSSyst.ICloneable.Typ
         and MSSyst.IComparable.Typ
   with record
      null;
   end record;
   function new_Version(
      This : Ref := null;
      major : Integer;
      minor : Integer;
      build : Integer;
      revision : Integer) return Ref;
   function new_Version(
      This : Ref := null;
      major : Integer;
      minor : Integer;
      build : Integer) return Ref;
   function new_Version(
      This : Ref := null;
      major : Integer;
      minor : Integer) return Ref;
   function new_Version(
      This : Ref := null;
      version : MSSyst.String.Ref) return Ref;
   function new_Version(
      This : Ref := null) return Ref;
   function Clone(
      This : access Typ) return MSSyst.Object.Ref;
   function CompareTo(
      This : access Typ;
      version : MSSyst.Object.Ref) return Integer;
   function CompareTo(
      This : access Typ;
      value : MSSyst.Version.Ref) return Integer;
   function Equals(
      This : access Typ;
      obj : MSSyst.Version.Ref) return Standard.Boolean;
   function Equals(
      This : access Typ;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function get_Build(
      This : access Typ) return Integer;
   function get_Major(
      This : access Typ) return Integer;
   function get_MajorRevision(
      This : access Typ) return MSIL_Types.int16;
   function get_Minor(
      This : access Typ) return Integer;
   function get_MinorRevision(
      This : access Typ) return MSIL_Types.int16;
   function get_Revision(
      This : access Typ) return Integer;
   function GetHashCode(
      This : access Typ) return Integer;
   function op_Equality(
      v1 : MSSyst.Version.Ref;
      v2 : MSSyst.Version.Ref) return Standard.Boolean;
   function op_GreaterThan(
      v1 : MSSyst.Version.Ref;
      v2 : MSSyst.Version.Ref) return Standard.Boolean;
   function op_GreaterThanOrEqual(
      v1 : MSSyst.Version.Ref;
      v2 : MSSyst.Version.Ref) return Standard.Boolean;
   function op_Inequality(
      v1 : MSSyst.Version.Ref;
      v2 : MSSyst.Version.Ref) return Standard.Boolean;
   function op_LessThan(
      v1 : MSSyst.Version.Ref;
      v2 : MSSyst.Version.Ref) return Standard.Boolean;
   function op_LessThanOrEqual(
      v1 : MSSyst.Version.Ref;
      v2 : MSSyst.Version.Ref) return Standard.Boolean;
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
   function ToString(
      This : access Typ;
      fieldCount : Integer) return MSSyst.String.Ref;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Version);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Build,"get_Build");
   pragma Import(MSIL,get_Major,"get_Major");
   pragma Import(MSIL,get_MajorRevision,"get_MajorRevision");
   pragma Import(MSIL,get_Minor,"get_Minor");
   pragma Import(MSIL,get_MinorRevision,"get_MinorRevision");
   pragma Import(MSIL,get_Revision,"get_Revision");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,op_Equality,"op_Equality");
   pragma Import(MSIL,op_GreaterThan,"op_GreaterThan");
   pragma Import(MSIL,op_GreaterThanOrEqual,"op_GreaterThanOrEqual");
   pragma Import(MSIL,op_Inequality,"op_Inequality");
   pragma Import(MSIL,op_LessThan,"op_LessThan");
   pragma Import(MSIL,op_LessThanOrEqual,"op_LessThanOrEqual");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Version;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Version,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Version");
