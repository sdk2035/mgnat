-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with MSSyst.Data.DataRowVersion;
with type MSSyst.Data.DataColumn.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Object.Ref_array is access;
with MSSyst.Data.DataRowState;
with type MSSyst.Data.DataTable.Ref is access;
with type MSSyst.Data.DataRow.Ref_array is access;
with type MSSyst.Data.DataRelation.Ref is access;
with type MSSyst.Data.DataColumn.Ref_array is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Object;
package MSSyst.Data.DataRow is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Arr1 is array(Natural range <>) of Ref;
   type Ref_Array is access all Arr1;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ with record
      null;
   end record;
   procedure AcceptChanges(
      This : access Typ);
   procedure BeginEdit(
      This : access Typ);
   procedure CancelEdit(
      This : access Typ);
   procedure ClearErrors(
      This : access Typ);
   procedure Delete(
      This : access Typ);
   procedure EndEdit(
      This : access Typ);
   function get_HasErrors(
      This : access Typ) return Standard.Boolean;
   function get_Item(
      This : access Typ;
      columnIndex : Integer;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Object.Ref;
   function get_Item(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Object.Ref;
   function get_Item(
      This : access Typ;
      columnName : MSSyst.String.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Object.Ref;
   function get_Item(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref) return MSSyst.Object.Ref;
   function get_Item(
      This : access Typ;
      columnIndex : Integer) return MSSyst.Object.Ref;
   function get_Item(
      This : access Typ;
      columnName : MSSyst.String.Ref) return MSSyst.Object.Ref;
   function get_ItemArray(
      This : access Typ) return MSSyst.Object.Ref_array;
   function get_RowError(
      This : access Typ) return MSSyst.String.Ref;
   function get_RowState(
      This : access Typ) return MSSyst.Data.DataRowState.Valuetype;
   function get_Table(
      This : access Typ) return MSSyst.Data.DataTable.Ref;
   function GetChildRows(
      This : access Typ;
      relation : MSSyst.Data.DataRelation.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Data.DataRow.Ref_array;
   function GetChildRows(
      This : access Typ;
      relationName : MSSyst.String.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Data.DataRow.Ref_array;
   function GetChildRows(
      This : access Typ;
      relationName : MSSyst.String.Ref) return MSSyst.Data.DataRow.Ref_array;
   function GetChildRows(
      This : access Typ;
      relation : MSSyst.Data.DataRelation.Ref) return MSSyst.Data.DataRow.Ref_array;
   function GetColumnError(
      This : access Typ;
      columnIndex : Integer) return MSSyst.String.Ref;
   function GetColumnError(
      This : access Typ;
      columnName : MSSyst.String.Ref) return MSSyst.String.Ref;
   function GetColumnError(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref) return MSSyst.String.Ref;
   function GetColumnsInError(
      This : access Typ) return MSSyst.Data.DataColumn.Ref_array;
   function GetParentRow(
      This : access Typ;
      relationName : MSSyst.String.Ref) return MSSyst.Data.DataRow.Ref;
   function GetParentRow(
      This : access Typ;
      relation : MSSyst.Data.DataRelation.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Data.DataRow.Ref;
   function GetParentRow(
      This : access Typ;
      relation : MSSyst.Data.DataRelation.Ref) return MSSyst.Data.DataRow.Ref;
   function GetParentRow(
      This : access Typ;
      relationName : MSSyst.String.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Data.DataRow.Ref;
   function GetParentRows(
      This : access Typ;
      relationName : MSSyst.String.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Data.DataRow.Ref_array;
   function GetParentRows(
      This : access Typ;
      relationName : MSSyst.String.Ref) return MSSyst.Data.DataRow.Ref_array;
   function GetParentRows(
      This : access Typ;
      relation : MSSyst.Data.DataRelation.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return MSSyst.Data.DataRow.Ref_array;
   function GetParentRows(
      This : access Typ;
      relation : MSSyst.Data.DataRelation.Ref) return MSSyst.Data.DataRow.Ref_array;
   function HasVersion(
      This : access Typ;
      version : MSSyst.Data.DataRowVersion.Valuetype) return Standard.Boolean;
   function IsNull(
      This : access Typ;
      columnName : MSSyst.String.Ref) return Standard.Boolean;
   function IsNull(
      This : access Typ;
      columnIndex : Integer) return Standard.Boolean;
   function IsNull(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref;
      version : MSSyst.Data.DataRowVersion.Valuetype) return Standard.Boolean;
   function IsNull(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref) return Standard.Boolean;
   procedure RejectChanges(
      This : access Typ);
   procedure set_Item(
      This : access Typ;
      columnName : MSSyst.String.Ref;
      value : MSSyst.Object.Ref);
   procedure set_Item(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref;
      value : MSSyst.Object.Ref);
   procedure set_Item(
      This : access Typ;
      columnIndex : Integer;
      value : MSSyst.Object.Ref);
   procedure set_ItemArray(
      This : access Typ;
      value : MSSyst.Object.Ref_array);
   procedure set_RowError(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure SetColumnError(
      This : access Typ;
      columnIndex : Integer;
      error : MSSyst.String.Ref);
   procedure SetColumnError(
      This : access Typ;
      column : MSSyst.Data.DataColumn.Ref;
      error : MSSyst.String.Ref);
   procedure SetColumnError(
      This : access Typ;
      columnName : MSSyst.String.Ref;
      error : MSSyst.String.Ref);
   procedure SetParentRow(
      This : access Typ;
      parentRow : MSSyst.Data.DataRow.Ref;
      relation : MSSyst.Data.DataRelation.Ref);
   procedure SetParentRow(
      This : access Typ;
      parentRow : MSSyst.Data.DataRow.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,AcceptChanges,"AcceptChanges");
   pragma Import(MSIL,BeginEdit,"BeginEdit");
   pragma Import(MSIL,CancelEdit,"CancelEdit");
   pragma Import(MSIL,ClearErrors,"ClearErrors");
   pragma Import(MSIL,Delete,"Delete");
   pragma Import(MSIL,EndEdit,"EndEdit");
   pragma Import(MSIL,get_HasErrors,"get_HasErrors");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,get_ItemArray,"get_ItemArray");
   pragma Import(MSIL,get_RowError,"get_RowError");
   pragma Import(MSIL,get_RowState,"get_RowState");
   pragma Import(MSIL,get_Table,"get_Table");
   pragma Import(MSIL,GetChildRows,"GetChildRows");
   pragma Import(MSIL,GetColumnError,"GetColumnError");
   pragma Import(MSIL,GetColumnsInError,"GetColumnsInError");
   pragma Import(MSIL,GetParentRow,"GetParentRow");
   pragma Import(MSIL,GetParentRows,"GetParentRows");
   pragma Import(MSIL,HasVersion,"HasVersion");
   pragma Import(MSIL,IsNull,"IsNull");
   pragma Import(MSIL,RejectChanges,"RejectChanges");
   pragma Import(MSIL,set_Item,"set_Item");
   pragma Import(MSIL,set_ItemArray,"set_ItemArray");
   pragma Import(MSIL,set_RowError,"set_RowError");
   pragma Import(MSIL,SetColumnError,"SetColumnError");
   pragma Import(MSIL,SetParentRow,"SetParentRow");
end MSSyst.Data.DataRow;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Data.DataRow,
   ".ver 1:0:5000:0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[System.Data]System.Data.DataRow");
