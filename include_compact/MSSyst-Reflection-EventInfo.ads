-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Reflection.MemberInfo;
with MSSyst.Reflection.ICustomAttributeProvider;
with MSSyst.Runtime.InteropServices.uMemberInfo;
with MSSyst.Runtime.InteropServices.uEventInfo;
with type MSSyst.Object.Ref is access;
with type MSSyst.Delegate.Ref is access;
with MSSyst.Reflection.EventAttributes;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Reflection.MemberTypes;
with type MSSyst.Reflection.Module.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Reflection.MethodInfo.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Reflection.MethodInfo.Ref_array is access;
package MSSyst.Reflection.EventInfo is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is abstract new MSSyst.Reflection.MemberInfo.Typ
         and MSSyst.Reflection.ICustomAttributeProvider.Typ
         and MSSyst.Runtime.InteropServices.uMemberInfo.Typ
         and MSSyst.Runtime.InteropServices.uEventInfo.Typ
   with record
      null;
   end record;
   procedure AddEventHandler(
      This : access Typ;
      target : MSSyst.Object.Ref;
      handler : MSSyst.Delegate.Ref);
   function get_Attributes(
      This : access Typ) return MSSyst.Reflection.EventAttributes.Valuetype;
   function get_EventHandlerType(
      This : access Typ) return MSSyst.Type_k.Ref;
   function get_IsMulticast(
      This : access Typ) return Standard.Boolean;
   function get_IsSpecialName(
      This : access Typ) return Standard.Boolean;
   function get_MemberType(
      This : access Typ) return MSSyst.Reflection.MemberTypes.Valuetype;
   function GetAddMethod(
      This : access Typ;
      nonPublic : Standard.Boolean) return MSSyst.Reflection.MethodInfo.Ref;
   function GetAddMethod(
      This : access Typ) return MSSyst.Reflection.MethodInfo.Ref;
   function GetOtherMethods(
      This : access Typ) return MSSyst.Reflection.MethodInfo.Ref_array;
   function GetOtherMethods(
      This : access Typ;
      nonPublic : Standard.Boolean) return MSSyst.Reflection.MethodInfo.Ref_array;
   function GetRaiseMethod(
      This : access Typ) return MSSyst.Reflection.MethodInfo.Ref;
   function GetRaiseMethod(
      This : access Typ;
      nonPublic : Standard.Boolean) return MSSyst.Reflection.MethodInfo.Ref;
   function GetRemoveMethod(
      This : access Typ;
      nonPublic : Standard.Boolean) return MSSyst.Reflection.MethodInfo.Ref;
   function GetRemoveMethod(
      This : access Typ) return MSSyst.Reflection.MethodInfo.Ref;
   procedure RemoveEventHandler(
      This : access Typ;
      target : MSSyst.Object.Ref;
      handler : MSSyst.Delegate.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,AddEventHandler,"AddEventHandler");
   pragma Import(MSIL,get_Attributes,"get_Attributes");
   pragma Import(MSIL,get_EventHandlerType,"get_EventHandlerType");
   pragma Import(MSIL,get_IsMulticast,"get_IsMulticast");
   pragma Import(MSIL,get_IsSpecialName,"get_IsSpecialName");
   pragma Import(MSIL,get_MemberType,"get_MemberType");
   pragma Import(MSIL,GetAddMethod,"GetAddMethod");
   pragma Import(MSIL,GetOtherMethods,"GetOtherMethods");
   pragma Import(MSIL,GetRaiseMethod,"GetRaiseMethod");
   pragma Import(MSIL,GetRemoveMethod,"GetRemoveMethod");
   pragma Import(MSIL,RemoveEventHandler,"RemoveEventHandler");
end MSSyst.Reflection.EventInfo;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Reflection.EventInfo,
   ".ver 2.0.0.0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[mscorlib]System.Reflection.EventInfo");
