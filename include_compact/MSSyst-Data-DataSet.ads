-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.ComponentModel.IComponent.Ref is access;
with type MSSyst.IDisposable.Ref is access;
with type MSSyst.IServiceProvider.Ref is access;
with type MSSyst.ComponentModel.IListSource.Ref is access;
with type MSSyst.Xml.Serialization.IXmlSerializable.Ref is access;
with type MSSyst.EventHandler.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.ComponentModel.IContainer.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Data.DataViewManager.Ref is access;
with type MSSyst.Data.PropertyCollection.Ref is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
with type MSSyst.Data.DataRelationCollection.Ref is access;
with type MSSyst.ComponentModel.ISite.Ref is access;
with type MSSyst.Data.DataTableCollection.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.Data.DataRowState;
with type MSSyst.Xml.XmlReader.Ref is access;
with type MSSyst.String.Ref_array is access;
with MSSyst.Data.XmlReadMode;
with type MSSyst.Xml.XmlWriter.Ref is access;
with MSSyst.Data.XmlWriteMode;
with MSSyst.ComponentModel.MarshalByValueComponent;
package MSSyst.Data.DataSet is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Arr1 is array(Natural range <>) of Ref;
   type Ref_Array is access all Arr1;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ(
         I_IComponent : MSSyst.ComponentModel.IComponent.Ref;
         I_IDisposable : MSSyst.IDisposable.Ref;
         I_IServiceProvider : MSSyst.IServiceProvider.Ref;
         I_IListSource : MSSyst.ComponentModel.IListSource.Ref;
         I_IXmlSerializable : MSSyst.Xml.Serialization.IXmlSerializable.Ref
      ) is new MSSyst.ComponentModel.MarshalByValueComponent.Typ(
         I_IComponent => I_IComponent,
         I_IDisposable => I_IDisposable,
         I_IServiceProvider => I_IServiceProvider
      ) with record
      null;
   end record;
   function new_DataSet(
      This : Ref := null) return Ref;
   function new_DataSet(
      This : Ref := null;
      dataSetName : MSSyst.String.Ref) return Ref;
   procedure AcceptChanges(
      This : access Typ);
   procedure BeginInit(
      This : access Typ);
   procedure Clear(
      This : access Typ);
   function Clone(
      This : access Typ) return MSSyst.Data.DataSet.Ref;
   procedure EndInit(
      This : access Typ);
   function get_CaseSensitive(
      This : access Typ) return Standard.Boolean;
   function get_DataSetName(
      This : access Typ) return MSSyst.String.Ref;
   function get_DefaultViewManager(
      This : access Typ) return MSSyst.Data.DataViewManager.Ref;
   function get_EnforceConstraints(
      This : access Typ) return Standard.Boolean;
   function get_ExtendedProperties(
      This : access Typ) return MSSyst.Data.PropertyCollection.Ref;
   function get_HasErrors(
      This : access Typ) return Standard.Boolean;
   function get_Locale(
      This : access Typ) return MSSyst.Globalization.CultureInfo.Ref;
   function get_Namespace(
      This : access Typ) return MSSyst.String.Ref;
   function get_Prefix(
      This : access Typ) return MSSyst.String.Ref;
   function get_Relations(
      This : access Typ) return MSSyst.Data.DataRelationCollection.Ref;
   function get_Tables(
      This : access Typ) return MSSyst.Data.DataTableCollection.Ref;
   function GetXml(
      This : access Typ) return MSSyst.String.Ref;
   function GetXmlSchema(
      This : access Typ) return MSSyst.String.Ref;
   function HasChanges(
      This : access Typ;
      rowStates : MSSyst.Data.DataRowState.Valuetype) return Standard.Boolean;
   function HasChanges(
      This : access Typ) return Standard.Boolean;
   procedure InferXmlSchema(
      This : access Typ;
      reader : MSSyst.Xml.XmlReader.Ref;
      nsArray : MSSyst.String.Ref_array);
   procedure InferXmlSchema(
      This : access Typ;
      fileName : MSSyst.String.Ref;
      nsArray : MSSyst.String.Ref_array);
   function ReadXml(
      This : access Typ;
      reader : MSSyst.Xml.XmlReader.Ref;
      mode : MSSyst.Data.XmlReadMode.Valuetype) return MSSyst.Data.XmlReadMode.Valuetype;
   function ReadXml(
      This : access Typ;
      fileName : MSSyst.String.Ref) return MSSyst.Data.XmlReadMode.Valuetype;
   function ReadXml(
      This : access Typ;
      reader : MSSyst.Xml.XmlReader.Ref) return MSSyst.Data.XmlReadMode.Valuetype;
   procedure ReadXmlSchema(
      This : access Typ;
      reader : MSSyst.Xml.XmlReader.Ref);
   procedure ReadXmlSchema(
      This : access Typ;
      fileName : MSSyst.String.Ref);
   procedure RejectChanges(
      This : access Typ);
   procedure Reset(
      This : access Typ);
   procedure set_CaseSensitive(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_DataSetName(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_EnforceConstraints(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Locale(
      This : access Typ;
      value : MSSyst.Globalization.CultureInfo.Ref);
   procedure set_Namespace(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure set_Prefix(
      This : access Typ;
      value : MSSyst.String.Ref);
   procedure WriteXml(
      This : access Typ;
      writer : MSSyst.Xml.XmlWriter.Ref;
      mode : MSSyst.Data.XmlWriteMode.Valuetype);
   procedure WriteXml(
      This : access Typ;
      fileName : MSSyst.String.Ref);
   procedure WriteXmlSchema(
      This : access Typ;
      fileName : MSSyst.String.Ref);
   procedure WriteXmlSchema(
      This : access Typ;
      writer : MSSyst.Xml.XmlWriter.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_DataSet);
   pragma Import(MSIL,AcceptChanges,"AcceptChanges");
   pragma Import(MSIL,BeginInit,"BeginInit");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,EndInit,"EndInit");
   pragma Import(MSIL,get_CaseSensitive,"get_CaseSensitive");
   pragma Import(MSIL,get_DataSetName,"get_DataSetName");
   pragma Import(MSIL,get_DefaultViewManager,"get_DefaultViewManager");
   pragma Import(MSIL,get_EnforceConstraints,"get_EnforceConstraints");
   pragma Import(MSIL,get_ExtendedProperties,"get_ExtendedProperties");
   pragma Import(MSIL,get_HasErrors,"get_HasErrors");
   pragma Import(MSIL,get_Locale,"get_Locale");
   pragma Import(MSIL,get_Namespace,"get_Namespace");
   pragma Import(MSIL,get_Prefix,"get_Prefix");
   pragma Import(MSIL,get_Relations,"get_Relations");
   pragma Import(MSIL,get_Tables,"get_Tables");
   pragma Import(MSIL,GetXml,"GetXml");
   pragma Import(MSIL,GetXmlSchema,"GetXmlSchema");
   pragma Import(MSIL,HasChanges,"HasChanges");
   pragma Import(MSIL,InferXmlSchema,"InferXmlSchema");
   pragma Import(MSIL,ReadXml,"ReadXml");
   pragma Import(MSIL,ReadXmlSchema,"ReadXmlSchema");
   pragma Import(MSIL,RejectChanges,"RejectChanges");
   pragma Import(MSIL,Reset,"Reset");
   pragma Import(MSIL,set_CaseSensitive,"set_CaseSensitive");
   pragma Import(MSIL,set_DataSetName,"set_DataSetName");
   pragma Import(MSIL,set_EnforceConstraints,"set_EnforceConstraints");
   pragma Import(MSIL,set_Locale,"set_Locale");
   pragma Import(MSIL,set_Namespace,"set_Namespace");
   pragma Import(MSIL,set_Prefix,"set_Prefix");
   pragma Import(MSIL,WriteXml,"WriteXml");
   pragma Import(MSIL,WriteXmlSchema,"WriteXmlSchema");
end MSSyst.Data.DataSet;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Data.DataSet,
   ".ver 1:0:5000:0 .publickeytoken=( 96 9d b8 05 3d 33 22 ac )",
   "[System.Data]System.Data.DataSet");
