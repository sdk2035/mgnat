-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Array_k;
with MSSyst.Collections.ICollection;
limited with MSSyst.Collections.IComparer;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Collections.IEnumerator;
limited with MSSyst.Collections.IEqualityComparer;
limited with MSSyst.Collections.IHashCodeProvider;
with MSSyst.Collections.Specialized.NameObjectCollectionBase;
limited with MSSyst.Collections.Specialized.NameObjectCollectionBase.KeysCollection;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Collections.Specialized.NameValueCollection is
   type Typ is new MSSyst.Collections.Specialized.NameObjectCollectionBase.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_NameValueCollection(
      This : Ref := null) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      col : access MSSyst.Collections.Specialized.NameValueCollection.Typ'Class) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      hashProvider : access MSSyst.Collections.IHashCodeProvider.Typ'Class;
      comparer : access MSSyst.Collections.IComparer.Typ'Class) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      equalityComparer : access MSSyst.Collections.IEqualityComparer.Typ'Class) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer;
      equalityComparer : access MSSyst.Collections.IEqualityComparer.Typ'Class) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer;
      col : access MSSyst.Collections.Specialized.NameValueCollection.Typ'Class) return Ref;
   function new_NameValueCollection(
      This : Ref := null;
      capacity : Integer;
      hashProvider : access MSSyst.Collections.IHashCodeProvider.Typ'Class;
      comparer : access MSSyst.Collections.IComparer.Typ'Class) return Ref;
   procedure Add(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      value : access MSSyst.String.Typ'Class);
   procedure Add(
      This : access Typ;
      c : access MSSyst.Collections.Specialized.NameValueCollection.Typ'Class);
   procedure Clear(
      This : access Typ);
   procedure CopyTo(
      This : access Typ;
      dest : access MSSyst.Array_k.Typ'Class;
      index : Integer);
   function Get(
      This : access Typ;
      index : Integer) return access MSSyst.String.Typ'Class;
   function Get(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   function get_AllKeys(
      This : access Typ) return access MSSyst.String.Ref_arr;
   function get_Item(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   function get_Item(
      This : access Typ;
      index : Integer) return access MSSyst.String.Typ'Class;
   function GetKey(
      This : access Typ;
      index : Integer) return access MSSyst.String.Typ'Class;
   function GetValues(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.String.Ref_arr;
   function GetValues(
      This : access Typ;
      index : Integer) return access MSSyst.String.Ref_arr;
   function HasKeys(
      This : access Typ) return Standard.Boolean;
   procedure Remove(
      This : access Typ;
      name : access MSSyst.String.Typ'Class);
   procedure Set(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      value : access MSSyst.String.Typ'Class);
   procedure set_Item(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      value : access MSSyst.String.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_NameValueCollection);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Get,"Get");
   pragma Import(MSIL,get_AllKeys,"get_AllKeys");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,GetKey,"GetKey");
   pragma Import(MSIL,GetValues,"GetValues");
   pragma Import(MSIL,HasKeys,"HasKeys");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,Set,"Set");
   pragma Import(MSIL,set_Item,"set_Item");
end MSSyst.Collections.Specialized.NameValueCollection;
pragma Import(MSIL,MSSyst.Collections.Specialized.NameValueCollection,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Collections.Specialized.NameValueCollection");
