-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Collections.IDictionary;
with MSSyst.Exception_k;
limited with MSSyst.Reflection.AssemblyName;
limited with MSSyst.Reflection.MethodBase;
limited with MSSyst.Reflection.MethodInfo;
with MSSyst.Runtime.InteropServices.uException;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
limited with MSSyst.Security.IPermission;
limited with MSSyst.Security.PermissionSet;
limited with MSSyst.Security.Permissions.SecurityAction;
limited with MSSyst.Security.Policy.Evidence;
limited with MSSyst.Security.SecurityZone;
limited with MSSyst.String;
with MSSyst.SystemException;
limited with MSSyst.Type_k;
package MSSyst.Security.SecurityException is
   type Typ is new MSSyst.SystemException.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.InteropServices.uException.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_SecurityException(
      This : Ref := null) return Ref;
   function new_SecurityException(
      This : Ref := null;
      message : access MSSyst.String.Typ'Class) return Ref;
   function new_SecurityException(
      This : Ref := null;
      message : access MSSyst.String.Typ'Class;
      type_k : access MSSyst.Type_k.Typ'Class) return Ref;
   function new_SecurityException(
      This : Ref := null;
      message : access MSSyst.String.Typ'Class;
      type_k : access MSSyst.Type_k.Typ'Class;
      state : access MSSyst.String.Typ'Class) return Ref;
   function new_SecurityException(
      This : Ref := null;
      message : access MSSyst.String.Typ'Class;
      inner : access MSSyst.Exception_k.Typ'Class) return Ref;
   function new_SecurityException(
      This : Ref := null;
      message : access MSSyst.String.Typ'Class;
      assemblyName : access MSSyst.Reflection.AssemblyName.Typ'Class;
      grant : access MSSyst.Security.PermissionSet.Typ'Class;
      refused : access MSSyst.Security.PermissionSet.Typ'Class;
      method : access MSSyst.Reflection.MethodInfo.Typ'Class;
      action : MSSyst.Security.Permissions.SecurityAction.Valuetype;
      demanded : access MSSyst.Object.Typ'Class;
      permThatFailed : access MSSyst.Security.IPermission.Typ'Class;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class) return Ref;
   function new_SecurityException(
      This : Ref := null;
      message : access MSSyst.String.Typ'Class;
      deny : access MSSyst.Object.Typ'Class;
      permitOnly : access MSSyst.Object.Typ'Class;
      method : access MSSyst.Reflection.MethodInfo.Typ'Class;
      demanded : access MSSyst.Object.Typ'Class;
      permThatFailed : access MSSyst.Security.IPermission.Typ'Class) return Ref;
   function get_Action(
      This : access Typ) return MSSyst.Security.Permissions.SecurityAction.Valuetype;
   function get_Demanded(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function get_DenySetInstance(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function get_FailedAssemblyInfo(
      This : access Typ) return access MSSyst.Reflection.AssemblyName.Typ'Class;
   function get_FirstPermissionThatFailed(
      This : access Typ) return access MSSyst.Security.IPermission.Typ'Class;
   function get_GrantedSet(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Method(
      This : access Typ) return access MSSyst.Reflection.MethodInfo.Typ'Class;
   function get_PermissionState(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_PermissionType(
      This : access Typ) return access MSSyst.Type_k.Typ'Class;
   function get_PermitOnlySetInstance(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function get_RefusedSet(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Url(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Zone(
      This : access Typ) return MSSyst.Security.SecurityZone.Valuetype;
   procedure GetObjectData(
      This : access Typ;
      info : access MSSyst.Runtime.Serialization.SerializationInfo.Typ'Class;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype);
   procedure set_Action(
      This : access Typ;
      value : MSSyst.Security.Permissions.SecurityAction.Valuetype);
   procedure set_Demanded(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class);
   procedure set_DenySetInstance(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class);
   procedure set_FailedAssemblyInfo(
      This : access Typ;
      value : access MSSyst.Reflection.AssemblyName.Typ'Class);
   procedure set_FirstPermissionThatFailed(
      This : access Typ;
      value : access MSSyst.Security.IPermission.Typ'Class);
   procedure set_GrantedSet(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Method(
      This : access Typ;
      value : access MSSyst.Reflection.MethodInfo.Typ'Class);
   procedure set_PermissionState(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_PermissionType(
      This : access Typ;
      value : access MSSyst.Type_k.Typ'Class);
   procedure set_PermitOnlySetInstance(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class);
   procedure set_RefusedSet(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Url(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Zone(
      This : access Typ;
      value : MSSyst.Security.SecurityZone.Valuetype);
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_SecurityException);
   pragma Import(MSIL,get_Action,"get_Action");
   pragma Import(MSIL,get_Demanded,"get_Demanded");
   pragma Import(MSIL,get_DenySetInstance,"get_DenySetInstance");
   pragma Import(MSIL,get_FailedAssemblyInfo,"get_FailedAssemblyInfo");
   pragma Import(MSIL,get_FirstPermissionThatFailed,"get_FirstPermissionThatFailed");
   pragma Import(MSIL,get_GrantedSet,"get_GrantedSet");
   pragma Import(MSIL,get_Method,"get_Method");
   pragma Import(MSIL,get_PermissionState,"get_PermissionState");
   pragma Import(MSIL,get_PermissionType,"get_PermissionType");
   pragma Import(MSIL,get_PermitOnlySetInstance,"get_PermitOnlySetInstance");
   pragma Import(MSIL,get_RefusedSet,"get_RefusedSet");
   pragma Import(MSIL,get_Url,"get_Url");
   pragma Import(MSIL,get_Zone,"get_Zone");
   pragma Import(MSIL,GetObjectData,"GetObjectData");
   pragma Import(MSIL,set_Action,"set_Action");
   pragma Import(MSIL,set_Demanded,"set_Demanded");
   pragma Import(MSIL,set_DenySetInstance,"set_DenySetInstance");
   pragma Import(MSIL,set_FailedAssemblyInfo,"set_FailedAssemblyInfo");
   pragma Import(MSIL,set_FirstPermissionThatFailed,"set_FirstPermissionThatFailed");
   pragma Import(MSIL,set_GrantedSet,"set_GrantedSet");
   pragma Import(MSIL,set_Method,"set_Method");
   pragma Import(MSIL,set_PermissionState,"set_PermissionState");
   pragma Import(MSIL,set_PermissionType,"set_PermissionType");
   pragma Import(MSIL,set_PermitOnlySetInstance,"set_PermitOnlySetInstance");
   pragma Import(MSIL,set_RefusedSet,"set_RefusedSet");
   pragma Import(MSIL,set_Url,"set_Url");
   pragma Import(MSIL,set_Zone,"set_Zone");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Security.SecurityException;
pragma Import(MSIL,MSSyst.Security.SecurityException,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.SecurityException");
