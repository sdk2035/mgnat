-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Reflection.Emit.DynamicMethod;
limited with MSSyst.RuntimeFieldHandle;
limited with MSSyst.RuntimeMethodHandle;
limited with MSSyst.RuntimeTypeHandle;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Reflection.Emit.DynamicILInfo is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_DynamicMethod(
      This : access Typ) return access MSSyst.Reflection.Emit.DynamicMethod.Typ'Class;
   function GetTokenFor(
      This : access Typ;
      field : MSSyst.RuntimeFieldHandle.Valuetype) return Integer;
   function GetTokenFor(
      This : access Typ;
      method : MSSyst.RuntimeMethodHandle.Valuetype;
      contextType : MSSyst.RuntimeTypeHandle.Valuetype) return Integer;
   function GetTokenFor(
      This : access Typ;
      type_k : MSSyst.RuntimeTypeHandle.Valuetype) return Integer;
   function GetTokenFor(
      This : access Typ;
      signature : MSIL_Types.unsigned_int8_Arr) return Integer;
   function GetTokenFor(
      This : access Typ;
      literal : access MSSyst.String.Typ'Class) return Integer;
   function GetTokenFor(
      This : access Typ;
      method : access MSSyst.Reflection.Emit.DynamicMethod.Typ'Class) return Integer;
   function GetTokenFor(
      This : access Typ;
      method : MSSyst.RuntimeMethodHandle.Valuetype) return Integer;
   procedure SetCode(
      This : access Typ;
      code : MSIL_Types.unsigned_int8_addrof;
      codeSize : Integer;
      maxStackSize : Integer);
   procedure SetCode(
      This : access Typ;
      code : MSIL_Types.unsigned_int8_Arr;
      maxStackSize : Integer);
   procedure SetExceptions(
      This : access Typ;
      exceptions : MSIL_Types.unsigned_int8_Arr);
   procedure SetExceptions(
      This : access Typ;
      exceptions : MSIL_Types.unsigned_int8_addrof;
      exceptionsSize : Integer);
   procedure SetLocalSignature(
      This : access Typ;
      localSignature : MSIL_Types.unsigned_int8_Arr);
   procedure SetLocalSignature(
      This : access Typ;
      localSignature : MSIL_Types.unsigned_int8_addrof;
      signatureSize : Integer);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,get_DynamicMethod,"get_DynamicMethod");
   pragma Import(MSIL,GetTokenFor,"GetTokenFor");
   pragma Import(MSIL,SetCode,"SetCode");
   pragma Import(MSIL,SetExceptions,"SetExceptions");
   pragma Import(MSIL,SetLocalSignature,"SetLocalSignature");
end MSSyst.Reflection.Emit.DynamicILInfo;
pragma Import(MSIL,MSSyst.Reflection.Emit.DynamicILInfo,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.Emit.DynamicILInfo");
