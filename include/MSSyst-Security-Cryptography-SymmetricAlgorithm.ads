-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.IDisposable;
limited with MSSyst.Security.Cryptography.CipherMode;
limited with MSSyst.Security.Cryptography.ICryptoTransform;
limited with MSSyst.Security.Cryptography.KeySizes;
limited with MSSyst.Security.Cryptography.PaddingMode;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Cryptography.SymmetricAlgorithm is
   type Typ is abstract new MSSyst.Object.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Clear(
      This : access Typ);
   function Create return access MSSyst.Security.Cryptography.SymmetricAlgorithm.Typ'Class;
   function Create(
      algName : access MSSyst.String.Typ'Class) return access MSSyst.Security.Cryptography.SymmetricAlgorithm.Typ'Class;
   function CreateDecryptor(
      This : access Typ;
      rgbKey : MSIL_Types.unsigned_int8_Arr;
      rgbIV : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Security.Cryptography.ICryptoTransform.Typ'Class;
   function CreateDecryptor(
      This : access Typ) return access MSSyst.Security.Cryptography.ICryptoTransform.Typ'Class;
   function CreateEncryptor(
      This : access Typ;
      rgbKey : MSIL_Types.unsigned_int8_Arr;
      rgbIV : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Security.Cryptography.ICryptoTransform.Typ'Class;
   function CreateEncryptor(
      This : access Typ) return access MSSyst.Security.Cryptography.ICryptoTransform.Typ'Class;
   procedure GenerateIV(
      This : access Typ);
   procedure GenerateKey(
      This : access Typ);
   function get_BlockSize(
      This : access Typ) return Integer;
   function get_FeedbackSize(
      This : access Typ) return Integer;
   function get_IV(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function get_Key(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function get_KeySize(
      This : access Typ) return Integer;
   function get_LegalBlockSizes(
      This : access Typ) return access MSSyst.Security.Cryptography.KeySizes.Ref_arr;
   function get_LegalKeySizes(
      This : access Typ) return access MSSyst.Security.Cryptography.KeySizes.Ref_arr;
   function get_Mode(
      This : access Typ) return MSSyst.Security.Cryptography.CipherMode.Valuetype;
   function get_Padding(
      This : access Typ) return MSSyst.Security.Cryptography.PaddingMode.Valuetype;
   procedure set_BlockSize(
      This : access Typ;
      value : Integer);
   procedure set_FeedbackSize(
      This : access Typ;
      value : Integer);
   procedure set_IV(
      This : access Typ;
      value : MSIL_Types.unsigned_int8_Arr);
   procedure set_Key(
      This : access Typ;
      value : MSIL_Types.unsigned_int8_Arr);
   procedure set_KeySize(
      This : access Typ;
      value : Integer);
   procedure set_Mode(
      This : access Typ;
      value : MSSyst.Security.Cryptography.CipherMode.Valuetype);
   procedure set_Padding(
      This : access Typ;
      value : MSSyst.Security.Cryptography.PaddingMode.Valuetype);
   function ValidKeySize(
      This : access Typ;
      bitLength : Integer) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Create,"Create");
   pragma Import(MSIL,CreateDecryptor,"CreateDecryptor");
   pragma Import(MSIL,CreateEncryptor,"CreateEncryptor");
   pragma Import(MSIL,GenerateIV,"GenerateIV");
   pragma Import(MSIL,GenerateKey,"GenerateKey");
   pragma Import(MSIL,get_BlockSize,"get_BlockSize");
   pragma Import(MSIL,get_FeedbackSize,"get_FeedbackSize");
   pragma Import(MSIL,get_IV,"get_IV");
   pragma Import(MSIL,get_Key,"get_Key");
   pragma Import(MSIL,get_KeySize,"get_KeySize");
   pragma Import(MSIL,get_LegalBlockSizes,"get_LegalBlockSizes");
   pragma Import(MSIL,get_LegalKeySizes,"get_LegalKeySizes");
   pragma Import(MSIL,get_Mode,"get_Mode");
   pragma Import(MSIL,get_Padding,"get_Padding");
   pragma Import(MSIL,set_BlockSize,"set_BlockSize");
   pragma Import(MSIL,set_FeedbackSize,"set_FeedbackSize");
   pragma Import(MSIL,set_IV,"set_IV");
   pragma Import(MSIL,set_Key,"set_Key");
   pragma Import(MSIL,set_KeySize,"set_KeySize");
   pragma Import(MSIL,set_Mode,"set_Mode");
   pragma Import(MSIL,set_Padding,"set_Padding");
   pragma Import(MSIL,ValidKeySize,"ValidKeySize");
end MSSyst.Security.Cryptography.SymmetricAlgorithm;
pragma Import(MSIL,MSSyst.Security.Cryptography.SymmetricAlgorithm,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Cryptography.SymmetricAlgorithm");
