-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.IDisposable;
limited with MSSyst.IO.Stream;
limited with MSSyst.Net.CookieCollection;
limited with MSSyst.Net.Cookie;
limited with MSSyst.Net.WebHeaderCollection;
limited with MSSyst.String;
limited with MSSyst.Text.Encoding;
limited with MSSyst.Type_k;
limited with MSSyst.Version;
package MSSyst.Net.HttpListenerResponse is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Abort_k(
      This : access Typ);
   procedure AddHeader(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      value : access MSSyst.String.Typ'Class);
   procedure AppendCookie(
      This : access Typ;
      cookie : access MSSyst.Net.Cookie.Typ'Class);
   procedure AppendHeader(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      value : access MSSyst.String.Typ'Class);
   procedure Close(
      This : access Typ);
   procedure Close(
      This : access Typ;
      responseEntity : MSIL_Types.unsigned_int8_Arr;
      willBlock : Standard.Boolean);
   procedure CopyFrom(
      This : access Typ;
      templateResponse : access MSSyst.Net.HttpListenerResponse.Typ'Class);
   function get_ContentEncoding(
      This : access Typ) return access MSSyst.Text.Encoding.Typ'Class;
   function get_ContentLength64(
      This : access Typ) return Long_Long_Integer;
   function get_ContentType(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Cookies(
      This : access Typ) return access MSSyst.Net.CookieCollection.Typ'Class;
   function get_Headers(
      This : access Typ) return access MSSyst.Net.WebHeaderCollection.Typ'Class;
   function get_KeepAlive(
      This : access Typ) return Standard.Boolean;
   function get_OutputStream(
      This : access Typ) return access MSSyst.IO.Stream.Typ'Class;
   function get_ProtocolVersion(
      This : access Typ) return access MSSyst.Version.Typ'Class;
   function get_RedirectLocation(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_SendChunked(
      This : access Typ) return Standard.Boolean;
   function get_StatusCode(
      This : access Typ) return Integer;
   function get_StatusDescription(
      This : access Typ) return access MSSyst.String.Typ'Class;
   procedure Redirect(
      This : access Typ;
      url : access MSSyst.String.Typ'Class);
   procedure set_ContentEncoding(
      This : access Typ;
      value : access MSSyst.Text.Encoding.Typ'Class);
   procedure set_ContentLength64(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_ContentType(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Cookies(
      This : access Typ;
      value : access MSSyst.Net.CookieCollection.Typ'Class);
   procedure set_Headers(
      This : access Typ;
      value : access MSSyst.Net.WebHeaderCollection.Typ'Class);
   procedure set_KeepAlive(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_ProtocolVersion(
      This : access Typ;
      value : access MSSyst.Version.Typ'Class);
   procedure set_RedirectLocation(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_SendChunked(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_StatusCode(
      This : access Typ;
      value : Integer);
   procedure set_StatusDescription(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure SetCookie(
      This : access Typ;
      cookie : access MSSyst.Net.Cookie.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Abort_k,"Abort");
   pragma Import(MSIL,AddHeader,"AddHeader");
   pragma Import(MSIL,AppendCookie,"AppendCookie");
   pragma Import(MSIL,AppendHeader,"AppendHeader");
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,CopyFrom,"CopyFrom");
   pragma Import(MSIL,get_ContentEncoding,"get_ContentEncoding");
   pragma Import(MSIL,get_ContentLength64,"get_ContentLength64");
   pragma Import(MSIL,get_ContentType,"get_ContentType");
   pragma Import(MSIL,get_Cookies,"get_Cookies");
   pragma Import(MSIL,get_Headers,"get_Headers");
   pragma Import(MSIL,get_KeepAlive,"get_KeepAlive");
   pragma Import(MSIL,get_OutputStream,"get_OutputStream");
   pragma Import(MSIL,get_ProtocolVersion,"get_ProtocolVersion");
   pragma Import(MSIL,get_RedirectLocation,"get_RedirectLocation");
   pragma Import(MSIL,get_SendChunked,"get_SendChunked");
   pragma Import(MSIL,get_StatusCode,"get_StatusCode");
   pragma Import(MSIL,get_StatusDescription,"get_StatusDescription");
   pragma Import(MSIL,Redirect,"Redirect");
   pragma Import(MSIL,set_ContentEncoding,"set_ContentEncoding");
   pragma Import(MSIL,set_ContentLength64,"set_ContentLength64");
   pragma Import(MSIL,set_ContentType,"set_ContentType");
   pragma Import(MSIL,set_Cookies,"set_Cookies");
   pragma Import(MSIL,set_Headers,"set_Headers");
   pragma Import(MSIL,set_KeepAlive,"set_KeepAlive");
   pragma Import(MSIL,set_ProtocolVersion,"set_ProtocolVersion");
   pragma Import(MSIL,set_RedirectLocation,"set_RedirectLocation");
   pragma Import(MSIL,set_SendChunked,"set_SendChunked");
   pragma Import(MSIL,set_StatusCode,"set_StatusCode");
   pragma Import(MSIL,set_StatusDescription,"set_StatusDescription");
   pragma Import(MSIL,SetCookie,"SetCookie");
end MSSyst.Net.HttpListenerResponse;
pragma Import(MSIL,MSSyst.Net.HttpListenerResponse,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.HttpListenerResponse");
