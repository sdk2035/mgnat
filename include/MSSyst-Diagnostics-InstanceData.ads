-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Diagnostics.CounterSample;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Diagnostics.InstanceData is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_InstanceData(
      This : Ref := null;
      instanceName : access MSSyst.String.Typ'Class;
      sample : MSSyst.Diagnostics.CounterSample.Valuetype) return Ref;
   function get_InstanceName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_RawValue(
      This : access Typ) return Long_Long_Integer;
   function get_Sample(
      This : access Typ) return MSSyst.Diagnostics.CounterSample.Valuetype;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_InstanceData);
   pragma Import(MSIL,get_InstanceName,"get_InstanceName");
   pragma Import(MSIL,get_RawValue,"get_RawValue");
   pragma Import(MSIL,get_Sample,"get_Sample");
end MSSyst.Diagnostics.InstanceData;
pragma Import(MSIL,MSSyst.Diagnostics.InstanceData,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Diagnostics.InstanceData");
