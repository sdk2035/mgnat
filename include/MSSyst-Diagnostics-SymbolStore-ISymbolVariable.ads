-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Diagnostics.SymbolStore.SymAddressKind;
limited with MSSyst.String;
package MSSyst.Diagnostics.SymbolStore.ISymbolVariable is
   type Typ is interface;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_AddressField1(
      This : access Typ) return Integer is abstract;
   function get_AddressField2(
      This : access Typ) return Integer is abstract;
   function get_AddressField3(
      This : access Typ) return Integer is abstract;
   function get_AddressKind(
      This : access Typ) return MSSyst.Diagnostics.SymbolStore.SymAddressKind.Valuetype is abstract;
   function get_Attributes(
      This : access Typ) return access MSSyst.Object.Typ'Class is abstract;
   function get_EndOffset(
      This : access Typ) return Integer is abstract;
   function get_Name(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_StartOffset(
      This : access Typ) return Integer is abstract;
   function GetSignature(
      This : access Typ) return MSIL_Types.unsigned_int8_Array is abstract;
private
   pragma Import(MSIL,get_AddressField1,"get_AddressField1");
   pragma Import(MSIL,get_AddressField2,"get_AddressField2");
   pragma Import(MSIL,get_AddressField3,"get_AddressField3");
   pragma Import(MSIL,get_AddressKind,"get_AddressKind");
   pragma Import(MSIL,get_Attributes,"get_Attributes");
   pragma Import(MSIL,get_EndOffset,"get_EndOffset");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_StartOffset,"get_StartOffset");
   pragma Import(MSIL,GetSignature,"GetSignature");
end MSSyst.Diagnostics.SymbolStore.ISymbolVariable;
pragma Import(MSIL,MSSyst.Diagnostics.SymbolStore.ISymbolVariable,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Diagnostics.SymbolStore.ISymbolVariable");
