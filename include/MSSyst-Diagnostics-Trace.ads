-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Diagnostics.CorrelationManager;
limited with MSSyst.Diagnostics.TraceListenerCollection;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Diagnostics.Trace is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Assert(
      condition : Standard.Boolean);
   procedure Assert(
      condition : Standard.Boolean;
      message : access MSSyst.String.Typ'Class);
   procedure Assert(
      condition : Standard.Boolean;
      message : access MSSyst.String.Typ'Class;
      detailMessage : access MSSyst.String.Typ'Class);
   procedure Close;
   procedure Fail(
      message : access MSSyst.String.Typ'Class);
   procedure Fail(
      message : access MSSyst.String.Typ'Class;
      detailMessage : access MSSyst.String.Typ'Class);
   procedure Flush;
   function get_AutoFlush return Standard.Boolean;
   function get_CorrelationManager return access MSSyst.Diagnostics.CorrelationManager.Typ'Class;
   function get_IndentLevel return Integer;
   function get_IndentSize return Integer;
   function get_Listeners return access MSSyst.Diagnostics.TraceListenerCollection.Typ'Class;
   function get_UseGlobalLock return Standard.Boolean;
   procedure Indent;
   procedure Refresh;
   procedure set_AutoFlush(
      value : Standard.Boolean);
   procedure set_IndentLevel(
      value : Integer);
   procedure set_IndentSize(
      value : Integer);
   procedure set_UseGlobalLock(
      value : Standard.Boolean);
   procedure TraceError(
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr);
   procedure TraceError(
      message : access MSSyst.String.Typ'Class);
   procedure TraceInformation(
      message : access MSSyst.String.Typ'Class);
   procedure TraceInformation(
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr);
   procedure TraceWarning(
      message : access MSSyst.String.Typ'Class);
   procedure TraceWarning(
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr);
   procedure Unindent;
   procedure Write(
      message : access MSSyst.String.Typ'Class);
   procedure Write(
      value : access MSSyst.Object.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure Write(
      value : access MSSyst.Object.Typ'Class);
   procedure Write(
      message : access MSSyst.String.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteIf(
      condition : Standard.Boolean;
      value : access MSSyst.Object.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteIf(
      condition : Standard.Boolean;
      value : access MSSyst.Object.Typ'Class);
   procedure WriteIf(
      condition : Standard.Boolean;
      message : access MSSyst.String.Typ'Class);
   procedure WriteIf(
      condition : Standard.Boolean;
      message : access MSSyst.String.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      message : access MSSyst.String.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      value : access MSSyst.Object.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      message : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      value : access MSSyst.Object.Typ'Class);
   procedure WriteLineIf(
      condition : Standard.Boolean;
      value : access MSSyst.Object.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLineIf(
      condition : Standard.Boolean;
      message : access MSSyst.String.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLineIf(
      condition : Standard.Boolean;
      value : access MSSyst.Object.Typ'Class);
   procedure WriteLineIf(
      condition : Standard.Boolean;
      message : access MSSyst.String.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Assert,"Assert");
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,Fail,"Fail");
   pragma Import(MSIL,Flush,"Flush");
   pragma Import(MSIL,get_AutoFlush,"get_AutoFlush");
   pragma Import(MSIL,get_CorrelationManager,"get_CorrelationManager");
   pragma Import(MSIL,get_IndentLevel,"get_IndentLevel");
   pragma Import(MSIL,get_IndentSize,"get_IndentSize");
   pragma Import(MSIL,get_Listeners,"get_Listeners");
   pragma Import(MSIL,get_UseGlobalLock,"get_UseGlobalLock");
   pragma Import(MSIL,Indent,"Indent");
   pragma Import(MSIL,Refresh,"Refresh");
   pragma Import(MSIL,set_AutoFlush,"set_AutoFlush");
   pragma Import(MSIL,set_IndentLevel,"set_IndentLevel");
   pragma Import(MSIL,set_IndentSize,"set_IndentSize");
   pragma Import(MSIL,set_UseGlobalLock,"set_UseGlobalLock");
   pragma Import(MSIL,TraceError,"TraceError");
   pragma Import(MSIL,TraceInformation,"TraceInformation");
   pragma Import(MSIL,TraceWarning,"TraceWarning");
   pragma Import(MSIL,Unindent,"Unindent");
   pragma Import(MSIL,Write,"Write");
   pragma Import(MSIL,WriteIf,"WriteIf");
   pragma Import(MSIL,WriteLine,"WriteLine");
   pragma Import(MSIL,WriteLineIf,"WriteLineIf");
end MSSyst.Diagnostics.Trace;
pragma Import(MSIL,MSSyst.Diagnostics.Trace,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Diagnostics.Trace");
