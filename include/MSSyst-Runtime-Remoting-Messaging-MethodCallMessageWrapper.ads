-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Collections.IDictionary;
limited with MSSyst.Reflection.MethodBase;
with MSSyst.Runtime.Remoting.Messaging.IMessage;
with MSSyst.Runtime.Remoting.Messaging.IMethodCallMessage;
with MSSyst.Runtime.Remoting.Messaging.IMethodMessage;
with MSSyst.Runtime.Remoting.Messaging.InternalMessageWrapper;
limited with MSSyst.Runtime.Remoting.Messaging.LogicalCallContext;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Runtime.Remoting.Messaging.MethodCallMessageWrapper is
   type Typ is new MSSyst.Runtime.Remoting.Messaging.InternalMessageWrapper.Typ
         and MSSyst.Runtime.Remoting.Messaging.IMethodCallMessage.Typ
         and MSSyst.Runtime.Remoting.Messaging.IMethodMessage.Typ
         and MSSyst.Runtime.Remoting.Messaging.IMessage.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_MethodCallMessageWrapper(
      This : Ref := null;
      msg : access MSSyst.Runtime.Remoting.Messaging.IMethodCallMessage.Typ'Class) return Ref;
   function get_ArgCount(
      This : access Typ) return Integer;
   function get_Args(
      This : access Typ) return access MSSyst.Object.Ref_array;
   function get_HasVarArgs(
      This : access Typ) return Standard.Boolean;
   function get_InArgCount(
      This : access Typ) return Integer;
   function get_InArgs(
      This : access Typ) return access MSSyst.Object.Ref_array;
   function get_LogicalCallContext(
      This : access Typ) return access MSSyst.Runtime.Remoting.Messaging.LogicalCallContext.Typ'Class;
   function get_MethodBase(
      This : access Typ) return access MSSyst.Reflection.MethodBase.Typ'Class;
   function get_MethodName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_MethodSignature(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function get_Properties(
      This : access Typ) return access MSSyst.Collections.IDictionary.Typ'Class;
   function get_TypeName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Uri(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetArg(
      This : access Typ;
      argNum : Integer) return access MSSyst.Object.Typ'Class;
   function GetArgName(
      This : access Typ;
      index : Integer) return access MSSyst.String.Typ'Class;
   function GetInArg(
      This : access Typ;
      argNum : Integer) return access MSSyst.Object.Typ'Class;
   function GetInArgName(
      This : access Typ;
      index : Integer) return access MSSyst.String.Typ'Class;
   procedure set_Args(
      This : access Typ;
      value : access MSSyst.Object.Ref_arr);
   procedure set_Uri(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_MethodCallMessageWrapper);
   pragma Import(MSIL,get_ArgCount,"get_ArgCount");
   pragma Import(MSIL,get_Args,"get_Args");
   pragma Import(MSIL,get_HasVarArgs,"get_HasVarArgs");
   pragma Import(MSIL,get_InArgCount,"get_InArgCount");
   pragma Import(MSIL,get_InArgs,"get_InArgs");
   pragma Import(MSIL,get_LogicalCallContext,"get_LogicalCallContext");
   pragma Import(MSIL,get_MethodBase,"get_MethodBase");
   pragma Import(MSIL,get_MethodName,"get_MethodName");
   pragma Import(MSIL,get_MethodSignature,"get_MethodSignature");
   pragma Import(MSIL,get_Properties,"get_Properties");
   pragma Import(MSIL,get_TypeName,"get_TypeName");
   pragma Import(MSIL,get_Uri,"get_Uri");
   pragma Import(MSIL,GetArg,"GetArg");
   pragma Import(MSIL,GetArgName,"GetArgName");
   pragma Import(MSIL,GetInArg,"GetInArg");
   pragma Import(MSIL,GetInArgName,"GetInArgName");
   pragma Import(MSIL,set_Args,"set_Args");
   pragma Import(MSIL,set_Uri,"set_Uri");
end MSSyst.Runtime.Remoting.Messaging.MethodCallMessageWrapper;
pragma Import(MSIL,MSSyst.Runtime.Remoting.Messaging.MethodCallMessageWrapper,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Runtime.Remoting.Messaging.MethodCallMessageWrapper");
