-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Collections.Specialized.StringDictionary;
limited with MSSyst.Diagnostics.TraceEventCache;
limited with MSSyst.Diagnostics.TraceEventType;
limited with MSSyst.Diagnostics.TraceFilter;
limited with MSSyst.Diagnostics.TraceOptions;
limited with MSSyst.Guid;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Diagnostics.TraceListener is
   type Typ is abstract new MSSyst.MarshalByRefObject.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Close(
      This : access Typ);
   procedure Dispose(
      This : access Typ);
   procedure Fail(
      This : access Typ;
      message : access MSSyst.String.Typ'Class);
   procedure Fail(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      detailMessage : access MSSyst.String.Typ'Class);
   procedure Flush(
      This : access Typ);
   function get_Attributes(
      This : access Typ) return access MSSyst.Collections.Specialized.StringDictionary.Typ'Class;
   function get_Filter(
      This : access Typ) return access MSSyst.Diagnostics.TraceFilter.Typ'Class;
   function get_IndentLevel(
      This : access Typ) return Integer;
   function get_IndentSize(
      This : access Typ) return Integer;
   function get_IsThreadSafe(
      This : access Typ) return Standard.Boolean;
   function get_Name(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_TraceOutputOptions(
      This : access Typ) return MSSyst.Diagnostics.TraceOptions.Valuetype;
   procedure set_Filter(
      This : access Typ;
      value : access MSSyst.Diagnostics.TraceFilter.Typ'Class);
   procedure set_IndentLevel(
      This : access Typ;
      value : Integer);
   procedure set_IndentSize(
      This : access Typ;
      value : Integer);
   procedure set_Name(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_TraceOutputOptions(
      This : access Typ;
      value : MSSyst.Diagnostics.TraceOptions.Valuetype);
   procedure TraceData(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      data : access MSSyst.Object.Ref_arr);
   procedure TraceData(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      data : access MSSyst.Object.Typ'Class);
   procedure TraceEvent(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      message : access MSSyst.String.Typ'Class);
   procedure TraceEvent(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr);
   procedure TraceEvent(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer);
   procedure TraceTransfer(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      id : Integer;
      message : access MSSyst.String.Typ'Class;
      relatedActivityId : MSSyst.Guid.Valuetype);
   procedure Write(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure Write(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure Write(
      This : access Typ;
      message : access MSSyst.String.Typ'Class);
   procedure Write(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class;
      category : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      message : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      o : access MSSyst.Object.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,Fail,"Fail");
   pragma Import(MSIL,Flush,"Flush");
   pragma Import(MSIL,get_Attributes,"get_Attributes");
   pragma Import(MSIL,get_Filter,"get_Filter");
   pragma Import(MSIL,get_IndentLevel,"get_IndentLevel");
   pragma Import(MSIL,get_IndentSize,"get_IndentSize");
   pragma Import(MSIL,get_IsThreadSafe,"get_IsThreadSafe");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_TraceOutputOptions,"get_TraceOutputOptions");
   pragma Import(MSIL,set_Filter,"set_Filter");
   pragma Import(MSIL,set_IndentLevel,"set_IndentLevel");
   pragma Import(MSIL,set_IndentSize,"set_IndentSize");
   pragma Import(MSIL,set_Name,"set_Name");
   pragma Import(MSIL,set_TraceOutputOptions,"set_TraceOutputOptions");
   pragma Import(MSIL,TraceData,"TraceData");
   pragma Import(MSIL,TraceEvent,"TraceEvent");
   pragma Import(MSIL,TraceTransfer,"TraceTransfer");
   pragma Import(MSIL,Write,"Write");
   pragma Import(MSIL,WriteLine,"WriteLine");
end MSSyst.Diagnostics.TraceListener;
pragma Import(MSIL,MSSyst.Diagnostics.TraceListener,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Diagnostics.TraceListener");
