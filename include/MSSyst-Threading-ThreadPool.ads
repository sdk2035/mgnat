-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Runtime.InteropServices.SafeHandle;
limited with MSSyst.String;
with MSSyst.Threading.NativeOverlapped;
limited with MSSyst.Threading.RegisteredWaitHandle;
limited with MSSyst.Threading.WaitCallback;
limited with MSSyst.Threading.WaitHandle;
limited with MSSyst.Threading.WaitOrTimerCallback;
limited with MSSyst.TimeSpan;
limited with MSSyst.Type_k;
package MSSyst.Threading.ThreadPool is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function BindHandle(
      osHandle : access MSSyst.Runtime.InteropServices.SafeHandle.Typ'Class) return Standard.Boolean;
   function BindHandle(
      osHandle : MSIL_Types.native_int) return Standard.Boolean;
   procedure GetAvailableThreads(
      workerThreads : MSIL_Types.Int32_addrof;
      completionPortThreads : MSIL_Types.Int32_addrof);
   procedure GetMaxThreads(
      workerThreads : MSIL_Types.Int32_addrof;
      completionPortThreads : MSIL_Types.Int32_addrof);
   procedure GetMinThreads(
      workerThreads : MSIL_Types.Int32_addrof;
      completionPortThreads : MSIL_Types.Int32_addrof);
   function QueueUserWorkItem(
      callBack : access MSSyst.Threading.WaitCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function QueueUserWorkItem(
      callBack : access MSSyst.Threading.WaitCallback.Typ'Class) return Standard.Boolean;
   function RegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      timeout : MSSyst.TimeSpan.Valuetype;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function RegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      millisecondsTimeOutInterval : MSIL_Types.Unsigned_Integer;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function RegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      millisecondsTimeOutInterval : Integer;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function RegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      millisecondsTimeOutInterval : Long_Long_Integer;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function SetMaxThreads(
      workerThreads : Integer;
      completionPortThreads : Integer) return Standard.Boolean;
   function SetMinThreads(
      workerThreads : Integer;
      completionPortThreads : Integer) return Standard.Boolean;
   function UnsafeQueueNativeOverlapped(
      overlapped : access MSSyst.Threading.NativeOverlapped.Valuetype) return Standard.Boolean;
   function UnsafeQueueUserWorkItem(
      callBack : access MSSyst.Threading.WaitCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function UnsafeRegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      timeout : MSSyst.TimeSpan.Valuetype;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function UnsafeRegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      millisecondsTimeOutInterval : Long_Long_Integer;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function UnsafeRegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      millisecondsTimeOutInterval : MSIL_Types.Unsigned_Integer;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
   function UnsafeRegisterWaitForSingleObject(
      waitObject : access MSSyst.Threading.WaitHandle.Typ'Class;
      callBack : access MSSyst.Threading.WaitOrTimerCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class;
      millisecondsTimeOutInterval : Integer;
      executeOnlyOnce : Standard.Boolean) return access MSSyst.Threading.RegisteredWaitHandle.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,BindHandle,"BindHandle");
   pragma Import(MSIL,GetAvailableThreads,"GetAvailableThreads");
   pragma Import(MSIL,GetMaxThreads,"GetMaxThreads");
   pragma Import(MSIL,GetMinThreads,"GetMinThreads");
   pragma Import(MSIL,QueueUserWorkItem,"QueueUserWorkItem");
   pragma Import(MSIL,RegisterWaitForSingleObject,"RegisterWaitForSingleObject");
   pragma Import(MSIL,SetMaxThreads,"SetMaxThreads");
   pragma Import(MSIL,SetMinThreads,"SetMinThreads");
   pragma Import(MSIL,UnsafeQueueNativeOverlapped,"UnsafeQueueNativeOverlapped");
   pragma Import(MSIL,UnsafeQueueUserWorkItem,"UnsafeQueueUserWorkItem");
   pragma Import(MSIL,UnsafeRegisterWaitForSingleObject,"UnsafeRegisterWaitForSingleObject");
end MSSyst.Threading.ThreadPool;
pragma Import(MSIL,MSSyst.Threading.ThreadPool,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Threading.ThreadPool");
