-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.BitConverter is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   IsLittleEndian : Standard.Boolean;
   pragma Import(MSIL,IsLittleEndian,"IsLittleEndian");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function DoubleToInt64Bits(
      value : Long_Float) return Long_Long_Integer;
   function GetBytes(
      value : MSIL_Types.Unsigned_Long_Long_Integer) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : MSIL_Types.Unsigned_Integer) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : Long_Float) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : Float) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : MSIL_Types.int16) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : Standard.Boolean) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : Wide_Character) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : MSIL_Types.unsigned_int16) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : Long_Long_Integer) return MSIL_Types.unsigned_int8_Array;
   function GetBytes(
      value : Integer) return MSIL_Types.unsigned_int8_Array;
   function Int64BitsToDouble(
      value : Long_Long_Integer) return Long_Float;
   function ToBoolean(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return Standard.Boolean;
   function ToChar(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return Wide_Character;
   function ToDouble(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return Long_Float;
   function ToInt16(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return MSIL_Types.int16;
   function ToInt32(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return Integer;
   function ToInt64(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return Long_Long_Integer;
   function ToSingle(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return Float;
   function ToString(
      value : MSIL_Types.unsigned_int8_Arr) return access MSSyst.String.Typ'Class;
   function ToString(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer;
      length : Integer) return access MSSyst.String.Typ'Class;
   function ToString(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return access MSSyst.String.Typ'Class;
   function ToUInt16(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return MSIL_Types.unsigned_int16;
   function ToUInt32(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return MSIL_Types.Unsigned_Integer;
   function ToUInt64(
      value : MSIL_Types.unsigned_int8_Arr;
      startIndex : Integer) return MSIL_Types.Unsigned_Long_Long_Integer;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,DoubleToInt64Bits,"DoubleToInt64Bits");
   pragma Import(MSIL,GetBytes,"GetBytes");
   pragma Import(MSIL,Int64BitsToDouble,"Int64BitsToDouble");
   pragma Import(MSIL,ToBoolean,"ToBoolean");
   pragma Import(MSIL,ToChar,"ToChar");
   pragma Import(MSIL,ToDouble,"ToDouble");
   pragma Import(MSIL,ToInt16,"ToInt16");
   pragma Import(MSIL,ToInt32,"ToInt32");
   pragma Import(MSIL,ToInt64,"ToInt64");
   pragma Import(MSIL,ToSingle,"ToSingle");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,ToUInt16,"ToUInt16");
   pragma Import(MSIL,ToUInt32,"ToUInt32");
   pragma Import(MSIL,ToUInt64,"ToUInt64");
end MSSyst.BitConverter;
pragma Import(MSIL,MSSyst.BitConverter,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.BitConverter");
