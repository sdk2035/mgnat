-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.IDisposable;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
with MSSyst.Security.Principal.IIdentity;
limited with MSSyst.Security.Principal.IdentityReferenceCollection;
limited with MSSyst.Security.Principal.SecurityIdentifier;
limited with MSSyst.Security.Principal.TokenAccessLevels;
limited with MSSyst.Security.Principal.TokenImpersonationLevel;
limited with MSSyst.Security.Principal.WindowsAccountType;
limited with MSSyst.Security.Principal.WindowsImpersonationContext;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Principal.WindowsIdentity is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Security.Principal.IIdentity.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_WindowsIdentity(
      This : Ref := null;
      userToken : MSIL_Types.native_int) return Ref;
   function new_WindowsIdentity(
      This : Ref := null;
      userToken : MSIL_Types.native_int;
      type_k : access MSSyst.String.Typ'Class) return Ref;
   function new_WindowsIdentity(
      This : Ref := null;
      userToken : MSIL_Types.native_int;
      type_k : access MSSyst.String.Typ'Class;
      acctType : MSSyst.Security.Principal.WindowsAccountType.Valuetype) return Ref;
   function new_WindowsIdentity(
      This : Ref := null;
      userToken : MSIL_Types.native_int;
      type_k : access MSSyst.String.Typ'Class;
      acctType : MSSyst.Security.Principal.WindowsAccountType.Valuetype;
      isAuthenticated : Standard.Boolean) return Ref;
   function new_WindowsIdentity(
      This : Ref := null;
      sUserPrincipalName : access MSSyst.String.Typ'Class) return Ref;
   function new_WindowsIdentity(
      This : Ref := null;
      sUserPrincipalName : access MSSyst.String.Typ'Class;
      type_k : access MSSyst.String.Typ'Class) return Ref;
   function new_WindowsIdentity(
      This : Ref := null;
      info : access MSSyst.Runtime.Serialization.SerializationInfo.Typ'Class;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype) return Ref;
   procedure Dispose(
      This : access Typ);
   function get_AuthenticationType(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Groups(
      This : access Typ) return access MSSyst.Security.Principal.IdentityReferenceCollection.Typ'Class;
   function get_ImpersonationLevel(
      This : access Typ) return MSSyst.Security.Principal.TokenImpersonationLevel.Valuetype;
   function get_IsAnonymous(
      This : access Typ) return Standard.Boolean;
   function get_IsAuthenticated(
      This : access Typ) return Standard.Boolean;
   function get_IsGuest(
      This : access Typ) return Standard.Boolean;
   function get_IsSystem(
      This : access Typ) return Standard.Boolean;
   function get_Name(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Owner(
      This : access Typ) return access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
   function get_Token(
      This : access Typ) return MSIL_Types.native_int;
   function get_User(
      This : access Typ) return access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
   function GetAnonymous return access MSSyst.Security.Principal.WindowsIdentity.Typ'Class;
   function GetCurrent return access MSSyst.Security.Principal.WindowsIdentity.Typ'Class;
   function GetCurrent(
      ifImpersonating : Standard.Boolean) return access MSSyst.Security.Principal.WindowsIdentity.Typ'Class;
   function GetCurrent(
      desiredAccess : MSSyst.Security.Principal.TokenAccessLevels.Valuetype) return access MSSyst.Security.Principal.WindowsIdentity.Typ'Class;
   function Impersonate(
      This : access Typ) return access MSSyst.Security.Principal.WindowsImpersonationContext.Typ'Class;
   function Impersonate(
      userToken : MSIL_Types.native_int) return access MSSyst.Security.Principal.WindowsImpersonationContext.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_WindowsIdentity);
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,get_AuthenticationType,"get_AuthenticationType");
   pragma Import(MSIL,get_Groups,"get_Groups");
   pragma Import(MSIL,get_ImpersonationLevel,"get_ImpersonationLevel");
   pragma Import(MSIL,get_IsAnonymous,"get_IsAnonymous");
   pragma Import(MSIL,get_IsAuthenticated,"get_IsAuthenticated");
   pragma Import(MSIL,get_IsGuest,"get_IsGuest");
   pragma Import(MSIL,get_IsSystem,"get_IsSystem");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_Owner,"get_Owner");
   pragma Import(MSIL,get_Token,"get_Token");
   pragma Import(MSIL,get_User,"get_User");
   pragma Import(MSIL,GetAnonymous,"GetAnonymous");
   pragma Import(MSIL,GetCurrent,"GetCurrent");
   pragma Import(MSIL,Impersonate,"Impersonate");
end MSSyst.Security.Principal.WindowsIdentity;
pragma Import(MSIL,MSSyst.Security.Principal.WindowsIdentity,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Principal.WindowsIdentity");
