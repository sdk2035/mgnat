-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Collections.IEnumerator;
with MSSyst.IDisposable;
with MSSyst.IO.IsolatedStorage.IsolatedStorage;
limited with MSSyst.IO.IsolatedStorage.IsolatedStorageScope;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.Security.Policy.Evidence;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.IO.IsolatedStorage.IsolatedStorageFile is
   type Typ is new MSSyst.IO.IsolatedStorage.IsolatedStorage.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Close(
      This : access Typ);
   procedure CreateDirectory(
      This : access Typ;
      dir : access MSSyst.String.Typ'Class);
   procedure DeleteDirectory(
      This : access Typ;
      dir : access MSSyst.String.Typ'Class);
   procedure DeleteFile(
      This : access Typ;
      file : access MSSyst.String.Typ'Class);
   procedure Dispose(
      This : access Typ);
   function get_CurrentSize(
      This : access Typ) return MSIL_Types.Unsigned_Long_Long_Integer;
   function get_MaximumSize(
      This : access Typ) return MSIL_Types.Unsigned_Long_Long_Integer;
   function GetDirectoryNames(
      This : access Typ;
      searchPattern : access MSSyst.String.Typ'Class) return access MSSyst.String.Ref_arr;
   function GetEnumerator(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function GetFileNames(
      This : access Typ;
      searchPattern : access MSSyst.String.Typ'Class) return access MSSyst.String.Ref_arr;
   function GetMachineStoreForApplication return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetMachineStoreForAssembly return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetMachineStoreForDomain return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetStore(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype;
      domainEvidence : access MSSyst.Security.Policy.Evidence.Typ'Class;
      domainEvidenceType : access MSSyst.Type_k.Typ'Class;
      assemblyEvidence : access MSSyst.Security.Policy.Evidence.Typ'Class;
      assemblyEvidenceType : access MSSyst.Type_k.Typ'Class) return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetStore(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype;
      applicationEvidenceType : access MSSyst.Type_k.Typ'Class) return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetStore(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype;
      applicationIdentity : access MSSyst.Object.Typ'Class) return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetStore(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype;
      domainIdentity : access MSSyst.Object.Typ'Class;
      assemblyIdentity : access MSSyst.Object.Typ'Class) return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetStore(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype;
      domainEvidenceType : access MSSyst.Type_k.Typ'Class;
      assemblyEvidenceType : access MSSyst.Type_k.Typ'Class) return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetUserStoreForApplication return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetUserStoreForAssembly return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   function GetUserStoreForDomain return access MSSyst.IO.IsolatedStorage.IsolatedStorageFile.Typ'Class;
   procedure Remove(
      scope : MSSyst.IO.IsolatedStorage.IsolatedStorageScope.Valuetype);
   procedure Remove(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,CreateDirectory,"CreateDirectory");
   pragma Import(MSIL,DeleteDirectory,"DeleteDirectory");
   pragma Import(MSIL,DeleteFile,"DeleteFile");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,get_CurrentSize,"get_CurrentSize");
   pragma Import(MSIL,get_MaximumSize,"get_MaximumSize");
   pragma Import(MSIL,GetDirectoryNames,"GetDirectoryNames");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetFileNames,"GetFileNames");
   pragma Import(MSIL,GetMachineStoreForApplication,"GetMachineStoreForApplication");
   pragma Import(MSIL,GetMachineStoreForAssembly,"GetMachineStoreForAssembly");
   pragma Import(MSIL,GetMachineStoreForDomain,"GetMachineStoreForDomain");
   pragma Import(MSIL,GetStore,"GetStore");
   pragma Import(MSIL,GetUserStoreForApplication,"GetUserStoreForApplication");
   pragma Import(MSIL,GetUserStoreForAssembly,"GetUserStoreForAssembly");
   pragma Import(MSIL,GetUserStoreForDomain,"GetUserStoreForDomain");
   pragma Import(MSIL,Remove,"Remove");
end MSSyst.IO.IsolatedStorage.IsolatedStorageFile;
pragma Import(MSIL,MSSyst.IO.IsolatedStorage.IsolatedStorageFile,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.IO.IsolatedStorage.IsolatedStorageFile");
