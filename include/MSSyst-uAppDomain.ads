-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.AssemblyLoadEventHandler;
limited with MSSyst.CrossAppDomainDelegate;
limited with MSSyst.EventHandler;
limited with MSSyst.Globalization.CultureInfo;
with MSSyst.Guid;
limited with MSSyst.Reflection.AssemblyName;
limited with MSSyst.Reflection.Assembly;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.Emit.AssemblyBuilderAccess;
limited with MSSyst.Reflection.Emit.AssemblyBuilder;
limited with MSSyst.ResolveEventHandler;
limited with MSSyst.Runtime.Remoting.ObjectHandle;
limited with MSSyst.Security.PermissionSet;
limited with MSSyst.Security.Policy.Evidence;
limited with MSSyst.Security.Policy.PolicyLevel;
limited with MSSyst.Security.Principal.IPrincipal;
limited with MSSyst.Security.Principal.PrincipalPolicy;
limited with MSSyst.String;
limited with MSSyst.Type_k;
limited with MSSyst.UnhandledExceptionEventHandler;
package MSSyst.uAppDomain is
   type Typ is interface;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure add_AssemblyLoad(
      This : access Typ;
      value : access MSSyst.AssemblyLoadEventHandler.Typ'Class) is abstract;
   procedure add_AssemblyResolve(
      This : access Typ;
      value : access MSSyst.ResolveEventHandler.Typ'Class) is abstract;
   procedure add_DomainUnload(
      This : access Typ;
      value : access MSSyst.EventHandler.Typ'Class) is abstract;
   procedure add_ProcessExit(
      This : access Typ;
      value : access MSSyst.EventHandler.Typ'Class) is abstract;
   procedure add_ResourceResolve(
      This : access Typ;
      value : access MSSyst.ResolveEventHandler.Typ'Class) is abstract;
   procedure add_TypeResolve(
      This : access Typ;
      value : access MSSyst.ResolveEventHandler.Typ'Class) is abstract;
   procedure add_UnhandledException(
      This : access Typ;
      value : access MSSyst.UnhandledExceptionEventHandler.Typ'Class) is abstract;
   procedure AppendPrivatePath(
      This : access Typ;
      path : access MSSyst.String.Typ'Class) is abstract;
   procedure ClearPrivatePath(
      This : access Typ) is abstract;
   procedure ClearShadowCopyPath(
      This : access Typ) is abstract;
   function CreateInstance(
      This : access Typ;
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class is abstract;
   function CreateInstance(
      This : access Typ;
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr;
      securityAttributes : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class is abstract;
   function CreateInstance(
      This : access Typ;
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class is abstract;
   function CreateInstanceFrom(
      This : access Typ;
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class is abstract;
   function CreateInstanceFrom(
      This : access Typ;
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class is abstract;
   function CreateInstanceFrom(
      This : access Typ;
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr;
      securityAttributes : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      dir : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class;
      requiredPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      optionalPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      refusedPermissions : access MSSyst.Security.PermissionSet.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      dir : access MSSyst.String.Typ'Class;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class;
      requiredPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      optionalPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      refusedPermissions : access MSSyst.Security.PermissionSet.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      dir : access MSSyst.String.Typ'Class;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class;
      requiredPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      optionalPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      refusedPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      isSynchronized : Standard.Boolean) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      dir : access MSSyst.String.Typ'Class;
      requiredPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      optionalPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      refusedPermissions : access MSSyst.Security.PermissionSet.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      requiredPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      optionalPermissions : access MSSyst.Security.PermissionSet.Typ'Class;
      refusedPermissions : access MSSyst.Security.PermissionSet.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   function DefineDynamicAssembly(
      This : access Typ;
      name : access MSSyst.Reflection.AssemblyName.Typ'Class;
      access_k : MSSyst.Reflection.Emit.AssemblyBuilderAccess.Valuetype;
      dir : access MSSyst.String.Typ'Class;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Reflection.Emit.AssemblyBuilder.Typ'Class is abstract;
   procedure DoCallBack(
      This : access Typ;
      theDelegate : access MSSyst.CrossAppDomainDelegate.Typ'Class) is abstract;
   function Equals(
      This : access Typ;
      other : access MSSyst.Object.Typ'Class) return Standard.Boolean is abstract;
   function ExecuteAssembly(
      This : access Typ;
      assemblyFile : access MSSyst.String.Typ'Class) return Integer is abstract;
   function ExecuteAssembly(
      This : access Typ;
      assemblyFile : access MSSyst.String.Typ'Class;
      assemblySecurity : access MSSyst.Security.Policy.Evidence.Typ'Class) return Integer is abstract;
   function ExecuteAssembly(
      This : access Typ;
      assemblyFile : access MSSyst.String.Typ'Class;
      assemblySecurity : access MSSyst.Security.Policy.Evidence.Typ'Class;
      args : access MSSyst.String.Ref_arr) return Integer is abstract;
   function get_BaseDirectory(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_DynamicDirectory(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_Evidence(
      This : access Typ) return access MSSyst.Security.Policy.Evidence.Typ'Class is abstract;
   function get_FriendlyName(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_RelativeSearchPath(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_ShadowCopyFiles(
      This : access Typ) return Standard.Boolean is abstract;
   function GetAssemblies(
      This : access Typ) return access MSSyst.Reflection.Assembly.Ref_arr is abstract;
   function GetData(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Object.Typ'Class is abstract;
   function GetHashCode(
      This : access Typ) return Integer is abstract;
   procedure GetIDsOfNames(
      This : access Typ;
      riid : access MSSyst.Guid.Valuetype;
      rgszNames : MSIL_Types.native_int;
      cNames : MSIL_Types.Unsigned_Integer;
      lcid : MSIL_Types.Unsigned_Integer;
      rgDispId : MSIL_Types.native_int) is abstract;
   function GetLifetimeService(
      This : access Typ) return access MSSyst.Object.Typ'Class is abstract;
   function GetType(
      This : access Typ) return access MSSyst.Type_k.Typ'Class is abstract;
   procedure GetTypeInfo(
      This : access Typ;
      iTInfo : MSIL_Types.Unsigned_Integer;
      lcid : MSIL_Types.Unsigned_Integer;
      ppTInfo : MSIL_Types.native_int) is abstract;
   procedure GetTypeInfoCount(
      This : access Typ;
      pcTInfo : MSIL_Types.Unsigned_Integer_addrof) is abstract;
   function InitializeLifetimeService(
      This : access Typ) return access MSSyst.Object.Typ'Class is abstract;
   procedure Invoke(
      This : access Typ;
      dispIdMember : MSIL_Types.Unsigned_Integer;
      riid : access MSSyst.Guid.Valuetype;
      lcid : MSIL_Types.Unsigned_Integer;
      wFlags : MSIL_Types.int16;
      pDispParams : MSIL_Types.native_int;
      pVarResult : MSIL_Types.native_int;
      pExcepInfo : MSIL_Types.native_int;
      puArgErr : MSIL_Types.native_int) is abstract;
   function Load(
      This : access Typ;
      assemblyRef : access MSSyst.Reflection.AssemblyName.Typ'Class;
      assemblySecurity : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function Load(
      This : access Typ;
      assemblyString : access MSSyst.String.Typ'Class;
      assemblySecurity : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function Load(
      This : access Typ;
      rawAssembly : MSIL_Types.unsigned_int8_Arr;
      rawSymbolStore : MSIL_Types.unsigned_int8_Arr;
      securityEvidence : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function Load(
      This : access Typ;
      assemblyString : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function Load(
      This : access Typ;
      assemblyRef : access MSSyst.Reflection.AssemblyName.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function Load(
      This : access Typ;
      rawAssembly : MSIL_Types.unsigned_int8_Arr;
      rawSymbolStore : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function Load(
      This : access Typ;
      rawAssembly : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   procedure remove_AssemblyLoad(
      This : access Typ;
      value : access MSSyst.AssemblyLoadEventHandler.Typ'Class) is abstract;
   procedure remove_AssemblyResolve(
      This : access Typ;
      value : access MSSyst.ResolveEventHandler.Typ'Class) is abstract;
   procedure remove_DomainUnload(
      This : access Typ;
      value : access MSSyst.EventHandler.Typ'Class) is abstract;
   procedure remove_ProcessExit(
      This : access Typ;
      value : access MSSyst.EventHandler.Typ'Class) is abstract;
   procedure remove_ResourceResolve(
      This : access Typ;
      value : access MSSyst.ResolveEventHandler.Typ'Class) is abstract;
   procedure remove_TypeResolve(
      This : access Typ;
      value : access MSSyst.ResolveEventHandler.Typ'Class) is abstract;
   procedure remove_UnhandledException(
      This : access Typ;
      value : access MSSyst.UnhandledExceptionEventHandler.Typ'Class) is abstract;
   procedure SetAppDomainPolicy(
      This : access Typ;
      domainPolicy : access MSSyst.Security.Policy.PolicyLevel.Typ'Class) is abstract;
   procedure SetCachePath(
      This : access Typ;
      s : access MSSyst.String.Typ'Class) is abstract;
   procedure SetData(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      data : access MSSyst.Object.Typ'Class) is abstract;
   procedure SetPrincipalPolicy(
      This : access Typ;
      policy : MSSyst.Security.Principal.PrincipalPolicy.Valuetype) is abstract;
   procedure SetShadowCopyPath(
      This : access Typ;
      s : access MSSyst.String.Typ'Class) is abstract;
   procedure SetThreadPrincipal(
      This : access Typ;
      principal : access MSSyst.Security.Principal.IPrincipal.Typ'Class) is abstract;
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
private
   pragma Import(MSIL,add_AssemblyLoad,"add_AssemblyLoad");
   pragma Import(MSIL,add_AssemblyResolve,"add_AssemblyResolve");
   pragma Import(MSIL,add_DomainUnload,"add_DomainUnload");
   pragma Import(MSIL,add_ProcessExit,"add_ProcessExit");
   pragma Import(MSIL,add_ResourceResolve,"add_ResourceResolve");
   pragma Import(MSIL,add_TypeResolve,"add_TypeResolve");
   pragma Import(MSIL,add_UnhandledException,"add_UnhandledException");
   pragma Import(MSIL,AppendPrivatePath,"AppendPrivatePath");
   pragma Import(MSIL,ClearPrivatePath,"ClearPrivatePath");
   pragma Import(MSIL,ClearShadowCopyPath,"ClearShadowCopyPath");
   pragma Import(MSIL,CreateInstance,"CreateInstance");
   pragma Import(MSIL,CreateInstanceFrom,"CreateInstanceFrom");
   pragma Import(MSIL,DefineDynamicAssembly,"DefineDynamicAssembly");
   pragma Import(MSIL,DoCallBack,"DoCallBack");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,ExecuteAssembly,"ExecuteAssembly");
   pragma Import(MSIL,get_BaseDirectory,"get_BaseDirectory");
   pragma Import(MSIL,get_DynamicDirectory,"get_DynamicDirectory");
   pragma Import(MSIL,get_Evidence,"get_Evidence");
   pragma Import(MSIL,get_FriendlyName,"get_FriendlyName");
   pragma Import(MSIL,get_RelativeSearchPath,"get_RelativeSearchPath");
   pragma Import(MSIL,get_ShadowCopyFiles,"get_ShadowCopyFiles");
   pragma Import(MSIL,GetAssemblies,"GetAssemblies");
   pragma Import(MSIL,GetData,"GetData");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetIDsOfNames,"GetIDsOfNames");
   pragma Import(MSIL,GetLifetimeService,"GetLifetimeService");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeInfo,"GetTypeInfo");
   pragma Import(MSIL,GetTypeInfoCount,"GetTypeInfoCount");
   pragma Import(MSIL,InitializeLifetimeService,"InitializeLifetimeService");
   pragma Import(MSIL,Invoke,"Invoke");
   pragma Import(MSIL,Load,"Load");
   pragma Import(MSIL,remove_AssemblyLoad,"remove_AssemblyLoad");
   pragma Import(MSIL,remove_AssemblyResolve,"remove_AssemblyResolve");
   pragma Import(MSIL,remove_DomainUnload,"remove_DomainUnload");
   pragma Import(MSIL,remove_ProcessExit,"remove_ProcessExit");
   pragma Import(MSIL,remove_ResourceResolve,"remove_ResourceResolve");
   pragma Import(MSIL,remove_TypeResolve,"remove_TypeResolve");
   pragma Import(MSIL,remove_UnhandledException,"remove_UnhandledException");
   pragma Import(MSIL,SetAppDomainPolicy,"SetAppDomainPolicy");
   pragma Import(MSIL,SetCachePath,"SetCachePath");
   pragma Import(MSIL,SetData,"SetData");
   pragma Import(MSIL,SetPrincipalPolicy,"SetPrincipalPolicy");
   pragma Import(MSIL,SetShadowCopyPath,"SetShadowCopyPath");
   pragma Import(MSIL,SetThreadPrincipal,"SetThreadPrincipal");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.uAppDomain;
pragma Import(MSIL,MSSyst.uAppDomain,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System._AppDomain");
