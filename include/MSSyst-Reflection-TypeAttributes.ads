-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.IFormatProvider;
limited with MSSyst.String;
limited with MSSyst.TypeCode;
limited with MSSyst.Type_k;
package MSSyst.Reflection.TypeAttributes is
   type ValueType is (
      AnsiClass,
      Public,
      NestedPublic,
      NestedPrivate,
      NestedFamily,
      NestedAssembly,
      NestedFamANDAssem,
      VisibilityMask,
      SequentialLayout,
      ExplicitLayout,
      LayoutMask,
      ClassSemanticsMask,
      Abstract_k,
      Sealed,
      SpecialName,
      RTSpecialName,
      Import,
      Serializable,
      UnicodeClass,
      AutoClass,
      CustomFormatClass,
      HasSecurity,
      ReservedMask,
      BeforeFieldInit,
      CustomFormatMask);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      AnsiClass =>  0,
      Public =>  1,
      NestedPublic =>  2,
      NestedPrivate =>  3,
      NestedFamily =>  4,
      NestedAssembly =>  5,
      NestedFamANDAssem =>  6,
      VisibilityMask =>  7,
      SequentialLayout =>  8,
      ExplicitLayout =>  16,
      LayoutMask =>  24,
      ClassSemanticsMask =>  32,
      Abstract_k =>  128,
      Sealed =>  256,
      SpecialName =>  1024,
      RTSpecialName =>  2048,
      Import =>  4096,
      Serializable =>  8192,
      UnicodeClass =>  65536,
      AutoClass =>  131072,
      CustomFormatClass =>  196608,
      HasSecurity =>  262144,
      ReservedMask =>  264192,
      BeforeFieldInit =>  1048576,
      CustomFormatMask =>  12582912);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function "+" (L,R : Valuetype) return Valuetype;
   pragma Import (MSIL, "+", "+");
   Class : constant Valuetype := AnsiClass;
   NotPublic : constant Valuetype := AnsiClass;
   AutoLayout : constant Valuetype := AnsiClass;
   NestedFamORAssem : constant Valuetype := VisibilityMask;
   Interface_k : constant Valuetype := ClassSemanticsMask;
   StringFormatMask : constant Valuetype := CustomFormatClass;
   function CompareTo(
      This : Valuetype;
      target : access MSSyst.Object.Typ'Class) return Integer;
   function Equals(
      This : Valuetype;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return access MSSyst.Type_k.Typ'Class;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : access MSSyst.IFormatProvider.Typ'Class) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype;
      format : access MSSyst.String.Typ'Class;
      provider : access MSSyst.IFormatProvider.Typ'Class) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype;
      format : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Reflection.TypeAttributes;
pragma Import(MSIL,MSSyst.Reflection.TypeAttributes,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.TypeAttributes");
