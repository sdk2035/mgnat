-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Diagnostics.SymbolStore.ISymbolDocument;
limited with MSSyst.Diagnostics.SymbolStore.ISymbolNamespace;
limited with MSSyst.Diagnostics.SymbolStore.ISymbolScope;
limited with MSSyst.Diagnostics.SymbolStore.ISymbolVariable;
limited with MSSyst.Diagnostics.SymbolStore.SymbolToken;
package MSSyst.Diagnostics.SymbolStore.ISymbolMethod is
   type Typ is interface;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_RootScope(
      This : access Typ) return access MSSyst.Diagnostics.SymbolStore.ISymbolScope.Typ'Class is abstract;
   function get_SequencePointCount(
      This : access Typ) return Integer is abstract;
   function get_Token(
      This : access Typ) return MSSyst.Diagnostics.SymbolStore.SymbolToken.Valuetype is abstract;
   function GetNamespace(
      This : access Typ) return access MSSyst.Diagnostics.SymbolStore.ISymbolNamespace.Typ'Class is abstract;
   function GetOffset(
      This : access Typ;
      document : access MSSyst.Diagnostics.SymbolStore.ISymbolDocument.Typ'Class;
      line : Integer;
      column : Integer) return Integer is abstract;
   function GetParameters(
      This : access Typ) return access MSSyst.Diagnostics.SymbolStore.ISymbolVariable.Ref_arr is abstract;
   function GetRanges(
      This : access Typ;
      document : access MSSyst.Diagnostics.SymbolStore.ISymbolDocument.Typ'Class;
      line : Integer;
      column : Integer) return MSIL_Types.Int32_Array is abstract;
   function GetScope(
      This : access Typ;
      offset : Integer) return access MSSyst.Diagnostics.SymbolStore.ISymbolScope.Typ'Class is abstract;
   procedure GetSequencePoints(
      This : access Typ;
      offsets : MSIL_Types.Int32_Arr;
      documents : access MSSyst.Diagnostics.SymbolStore.ISymbolDocument.Ref_arr;
      lines : MSIL_Types.Int32_Arr;
      columns : MSIL_Types.Int32_Arr;
      endLines : MSIL_Types.Int32_Arr;
      endColumns : MSIL_Types.Int32_Arr) is abstract;
   function GetSourceStartEnd(
      This : access Typ;
      docs : access MSSyst.Diagnostics.SymbolStore.ISymbolDocument.Ref_arr;
      lines : MSIL_Types.Int32_Arr;
      columns : MSIL_Types.Int32_Arr) return Standard.Boolean is abstract;
private
   pragma Import(MSIL,get_RootScope,"get_RootScope");
   pragma Import(MSIL,get_SequencePointCount,"get_SequencePointCount");
   pragma Import(MSIL,get_Token,"get_Token");
   pragma Import(MSIL,GetNamespace,"GetNamespace");
   pragma Import(MSIL,GetOffset,"GetOffset");
   pragma Import(MSIL,GetParameters,"GetParameters");
   pragma Import(MSIL,GetRanges,"GetRanges");
   pragma Import(MSIL,GetScope,"GetScope");
   pragma Import(MSIL,GetSequencePoints,"GetSequencePoints");
   pragma Import(MSIL,GetSourceStartEnd,"GetSourceStartEnd");
end MSSyst.Diagnostics.SymbolStore.ISymbolMethod;
pragma Import(MSIL,MSSyst.Diagnostics.SymbolStore.ISymbolMethod,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Diagnostics.SymbolStore.ISymbolMethod");
