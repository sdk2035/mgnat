-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.IFormatProvider;
limited with MSSyst.String;
limited with MSSyst.TypeCode;
limited with MSSyst.Type_k;
package MSSyst.Security.AccessControl.FileSystemRights is
   type ValueType is (
      ListDirectory,
      ReadData,
      CreateFiles,
      AppendData,
      ReadExtendedAttributes,
      WriteExtendedAttributes,
      ExecuteFile,
      DeleteSubdirectoriesAndFiles,
      ReadAttributes,
      WriteAttributes,
      Write,
      Delete,
      ReadPermissions,
      Read,
      ReadAndExecute,
      Modify,
      ChangePermissions,
      TakeOwnership,
      Synchronize,
      FullControl);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      ListDirectory =>  0,
      ReadData =>  1,
      CreateFiles =>  2,
      AppendData =>  4,
      ReadExtendedAttributes =>  8,
      WriteExtendedAttributes =>  16,
      ExecuteFile =>  32,
      DeleteSubdirectoriesAndFiles =>  64,
      ReadAttributes =>  128,
      WriteAttributes =>  256,
      Write =>  278,
      Delete =>  65536,
      ReadPermissions =>  131072,
      Read =>  131209,
      ReadAndExecute =>  131241,
      Modify =>  197055,
      ChangePermissions =>  262144,
      TakeOwnership =>  524288,
      Synchronize =>  1048576,
      FullControl =>  2032127);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function "+" (L,R : Valuetype) return Valuetype;
   pragma Import (MSIL, "+", "+");
   WriteData : constant Valuetype := CreateFiles;
   CreateDirectories : constant Valuetype := AppendData;
   Traverse : constant Valuetype := ExecuteFile;
   function CompareTo(
      This : Valuetype;
      target : access MSSyst.Object.Typ'Class) return Integer;
   function Equals(
      This : Valuetype;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return access MSSyst.Type_k.Typ'Class;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : access MSSyst.IFormatProvider.Typ'Class) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype;
      format : access MSSyst.String.Typ'Class;
      provider : access MSSyst.IFormatProvider.Typ'Class) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype;
      format : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Security.AccessControl.FileSystemRights;
pragma Import(MSIL,MSSyst.Security.AccessControl.FileSystemRights,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.AccessControl.FileSystemRights");
