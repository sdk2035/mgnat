-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.CodeDom.CodeCompileUnit;
limited with MSSyst.CodeDom.CodeExpression;
limited with MSSyst.CodeDom.CodeNamespace;
limited with MSSyst.CodeDom.CodeStatement;
limited with MSSyst.CodeDom.CodeTypeDeclaration;
limited with MSSyst.CodeDom.CodeTypeMember;
limited with MSSyst.CodeDom.CodeTypeReference;
with MSSyst.CodeDom.Compiler.CodeDomProvider;
limited with MSSyst.CodeDom.Compiler.CodeGeneratorOptions;
limited with MSSyst.CodeDom.Compiler.CompilerParameters;
limited with MSSyst.CodeDom.Compiler.CompilerResults;
limited with MSSyst.CodeDom.Compiler.GeneratorSupport;
limited with MSSyst.CodeDom.Compiler.ICodeCompiler;
limited with MSSyst.CodeDom.Compiler.ICodeGenerator;
limited with MSSyst.CodeDom.Compiler.ICodeParser;
limited with MSSyst.CodeDom.Compiler.LanguageOptions;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
limited with MSSyst.ComponentModel.IContainer;
limited with MSSyst.ComponentModel.ISite;
limited with MSSyst.ComponentModel.TypeConverter;
limited with MSSyst.EventHandler;
with MSSyst.IDisposable;
limited with MSSyst.IO.TextReader;
limited with MSSyst.IO.TextWriter;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package Microsoft.VisualBasic.VBCodeProvider is
   type Typ is new MSSyst.CodeDom.Compiler.CodeDomProvider.Typ
         and MSSyst.ComponentModel.IComponent.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_VBCodeProvider(
      This : Ref := null) return Ref;
   function CreateCompiler(
      This : access Typ) return access MSSyst.CodeDom.Compiler.ICodeCompiler.Typ'Class;
   function CreateGenerator(
      This : access Typ) return access MSSyst.CodeDom.Compiler.ICodeGenerator.Typ'Class;
   procedure GenerateCodeFromMember(
      This : access Typ;
      member : access MSSyst.CodeDom.CodeTypeMember.Typ'Class;
      writer : access MSSyst.IO.TextWriter.Typ'Class;
      options : access MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Typ'Class);
   function get_FileExtension(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_LanguageOptions(
      This : access Typ) return MSSyst.CodeDom.Compiler.LanguageOptions.Valuetype;
   function GetConverter(
      This : access Typ;
      type_k : access MSSyst.Type_k.Typ'Class) return access MSSyst.ComponentModel.TypeConverter.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_VBCodeProvider);
   pragma Import(MSIL,CreateCompiler,"CreateCompiler");
   pragma Import(MSIL,CreateGenerator,"CreateGenerator");
   pragma Import(MSIL,GenerateCodeFromMember,"GenerateCodeFromMember");
   pragma Import(MSIL,get_FileExtension,"get_FileExtension");
   pragma Import(MSIL,get_LanguageOptions,"get_LanguageOptions");
   pragma Import(MSIL,GetConverter,"GetConverter");
end Microsoft.VisualBasic.VBCodeProvider;
pragma Import(MSIL,Microsoft.VisualBasic.VBCodeProvider,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]Microsoft.VisualBasic.VBCodeProvider");
