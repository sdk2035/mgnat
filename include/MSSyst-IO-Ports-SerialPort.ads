-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
limited with MSSyst.ComponentModel.IContainer;
limited with MSSyst.ComponentModel.ISite;
limited with MSSyst.EventHandler;
with MSSyst.IDisposable;
limited with MSSyst.IO.Ports.Handshake;
limited with MSSyst.IO.Ports.Parity;
limited with MSSyst.IO.Ports.SerialDataReceivedEventHandler;
limited with MSSyst.IO.Ports.SerialErrorReceivedEventHandler;
limited with MSSyst.IO.Ports.SerialPinChangedEventHandler;
limited with MSSyst.IO.Ports.StopBits;
limited with MSSyst.IO.Stream;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Text.Encoding;
limited with MSSyst.Type_k;
package MSSyst.IO.Ports.SerialPort is
   type Typ is new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   InfiniteTimeout : Integer;
   pragma Import(MSIL,InfiniteTimeout,"InfiniteTimeout");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_SerialPort(
      This : Ref := null;
      container : access MSSyst.ComponentModel.IContainer.Typ'Class) return Ref;
   function new_SerialPort(
      This : Ref := null) return Ref;
   function new_SerialPort(
      This : Ref := null;
      portName : access MSSyst.String.Typ'Class) return Ref;
   function new_SerialPort(
      This : Ref := null;
      portName : access MSSyst.String.Typ'Class;
      baudRate : Integer) return Ref;
   function new_SerialPort(
      This : Ref := null;
      portName : access MSSyst.String.Typ'Class;
      baudRate : Integer;
      parity : MSSyst.IO.Ports.Parity.Valuetype) return Ref;
   function new_SerialPort(
      This : Ref := null;
      portName : access MSSyst.String.Typ'Class;
      baudRate : Integer;
      parity : MSSyst.IO.Ports.Parity.Valuetype;
      dataBits : Integer) return Ref;
   function new_SerialPort(
      This : Ref := null;
      portName : access MSSyst.String.Typ'Class;
      baudRate : Integer;
      parity : MSSyst.IO.Ports.Parity.Valuetype;
      dataBits : Integer;
      stopBits : MSSyst.IO.Ports.StopBits.Valuetype) return Ref;
   procedure add_DataReceived(
      This : access Typ;
      value : access MSSyst.IO.Ports.SerialDataReceivedEventHandler.Typ'Class);
   procedure add_ErrorReceived(
      This : access Typ;
      value : access MSSyst.IO.Ports.SerialErrorReceivedEventHandler.Typ'Class);
   procedure add_PinChanged(
      This : access Typ;
      value : access MSSyst.IO.Ports.SerialPinChangedEventHandler.Typ'Class);
   procedure Close(
      This : access Typ);
   procedure DiscardInBuffer(
      This : access Typ);
   procedure DiscardOutBuffer(
      This : access Typ);
   function get_BaseStream(
      This : access Typ) return access MSSyst.IO.Stream.Typ'Class;
   function get_BaudRate(
      This : access Typ) return Integer;
   function get_BreakState(
      This : access Typ) return Standard.Boolean;
   function get_BytesToRead(
      This : access Typ) return Integer;
   function get_BytesToWrite(
      This : access Typ) return Integer;
   function get_CDHolding(
      This : access Typ) return Standard.Boolean;
   function get_CtsHolding(
      This : access Typ) return Standard.Boolean;
   function get_DataBits(
      This : access Typ) return Integer;
   function get_DiscardNull(
      This : access Typ) return Standard.Boolean;
   function get_DsrHolding(
      This : access Typ) return Standard.Boolean;
   function get_DtrEnable(
      This : access Typ) return Standard.Boolean;
   function get_Encoding(
      This : access Typ) return access MSSyst.Text.Encoding.Typ'Class;
   function get_Handshake(
      This : access Typ) return MSSyst.IO.Ports.Handshake.Valuetype;
   function get_IsOpen(
      This : access Typ) return Standard.Boolean;
   function get_NewLine(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Parity(
      This : access Typ) return MSSyst.IO.Ports.Parity.Valuetype;
   function get_ParityReplace(
      This : access Typ) return MSIL_Types.unsigned_int8;
   function get_PortName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_ReadBufferSize(
      This : access Typ) return Integer;
   function get_ReadTimeout(
      This : access Typ) return Integer;
   function get_ReceivedBytesThreshold(
      This : access Typ) return Integer;
   function get_RtsEnable(
      This : access Typ) return Standard.Boolean;
   function get_StopBits(
      This : access Typ) return MSSyst.IO.Ports.StopBits.Valuetype;
   function get_WriteBufferSize(
      This : access Typ) return Integer;
   function get_WriteTimeout(
      This : access Typ) return Integer;
   function GetPortNames return access MSSyst.String.Ref_arr;
   procedure Open(
      This : access Typ);
   function Read(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr;
      offset : Integer;
      count : Integer) return Integer;
   function Read(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer) return Integer;
   function ReadByte(
      This : access Typ) return Integer;
   function ReadChar(
      This : access Typ) return Integer;
   function ReadExisting(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function ReadLine(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function ReadTo(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   procedure remove_DataReceived(
      This : access Typ;
      value : access MSSyst.IO.Ports.SerialDataReceivedEventHandler.Typ'Class);
   procedure remove_ErrorReceived(
      This : access Typ;
      value : access MSSyst.IO.Ports.SerialErrorReceivedEventHandler.Typ'Class);
   procedure remove_PinChanged(
      This : access Typ;
      value : access MSSyst.IO.Ports.SerialPinChangedEventHandler.Typ'Class);
   procedure set_BaudRate(
      This : access Typ;
      value : Integer);
   procedure set_BreakState(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_DataBits(
      This : access Typ;
      value : Integer);
   procedure set_DiscardNull(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_DtrEnable(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Encoding(
      This : access Typ;
      value : access MSSyst.Text.Encoding.Typ'Class);
   procedure set_Handshake(
      This : access Typ;
      value : MSSyst.IO.Ports.Handshake.Valuetype);
   procedure set_NewLine(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Parity(
      This : access Typ;
      value : MSSyst.IO.Ports.Parity.Valuetype);
   procedure set_ParityReplace(
      This : access Typ;
      value : MSIL_Types.unsigned_int8);
   procedure set_PortName(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_ReadBufferSize(
      This : access Typ;
      value : Integer);
   procedure set_ReadTimeout(
      This : access Typ;
      value : Integer);
   procedure set_ReceivedBytesThreshold(
      This : access Typ;
      value : Integer);
   procedure set_RtsEnable(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_StopBits(
      This : access Typ;
      value : MSSyst.IO.Ports.StopBits.Valuetype);
   procedure set_WriteBufferSize(
      This : access Typ;
      value : Integer);
   procedure set_WriteTimeout(
      This : access Typ;
      value : Integer);
   procedure Write(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      count : Integer);
   procedure Write(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr;
      offset : Integer;
      count : Integer);
   procedure Write(
      This : access Typ;
      text : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      text : access MSSyst.String.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_SerialPort);
   pragma Import(MSIL,add_DataReceived,"add_DataReceived");
   pragma Import(MSIL,add_ErrorReceived,"add_ErrorReceived");
   pragma Import(MSIL,add_PinChanged,"add_PinChanged");
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,DiscardInBuffer,"DiscardInBuffer");
   pragma Import(MSIL,DiscardOutBuffer,"DiscardOutBuffer");
   pragma Import(MSIL,get_BaseStream,"get_BaseStream");
   pragma Import(MSIL,get_BaudRate,"get_BaudRate");
   pragma Import(MSIL,get_BreakState,"get_BreakState");
   pragma Import(MSIL,get_BytesToRead,"get_BytesToRead");
   pragma Import(MSIL,get_BytesToWrite,"get_BytesToWrite");
   pragma Import(MSIL,get_CDHolding,"get_CDHolding");
   pragma Import(MSIL,get_CtsHolding,"get_CtsHolding");
   pragma Import(MSIL,get_DataBits,"get_DataBits");
   pragma Import(MSIL,get_DiscardNull,"get_DiscardNull");
   pragma Import(MSIL,get_DsrHolding,"get_DsrHolding");
   pragma Import(MSIL,get_DtrEnable,"get_DtrEnable");
   pragma Import(MSIL,get_Encoding,"get_Encoding");
   pragma Import(MSIL,get_Handshake,"get_Handshake");
   pragma Import(MSIL,get_IsOpen,"get_IsOpen");
   pragma Import(MSIL,get_NewLine,"get_NewLine");
   pragma Import(MSIL,get_Parity,"get_Parity");
   pragma Import(MSIL,get_ParityReplace,"get_ParityReplace");
   pragma Import(MSIL,get_PortName,"get_PortName");
   pragma Import(MSIL,get_ReadBufferSize,"get_ReadBufferSize");
   pragma Import(MSIL,get_ReadTimeout,"get_ReadTimeout");
   pragma Import(MSIL,get_ReceivedBytesThreshold,"get_ReceivedBytesThreshold");
   pragma Import(MSIL,get_RtsEnable,"get_RtsEnable");
   pragma Import(MSIL,get_StopBits,"get_StopBits");
   pragma Import(MSIL,get_WriteBufferSize,"get_WriteBufferSize");
   pragma Import(MSIL,get_WriteTimeout,"get_WriteTimeout");
   pragma Import(MSIL,GetPortNames,"GetPortNames");
   pragma Import(MSIL,Open,"Open");
   pragma Import(MSIL,Read,"Read");
   pragma Import(MSIL,ReadByte,"ReadByte");
   pragma Import(MSIL,ReadChar,"ReadChar");
   pragma Import(MSIL,ReadExisting,"ReadExisting");
   pragma Import(MSIL,ReadLine,"ReadLine");
   pragma Import(MSIL,ReadTo,"ReadTo");
   pragma Import(MSIL,remove_DataReceived,"remove_DataReceived");
   pragma Import(MSIL,remove_ErrorReceived,"remove_ErrorReceived");
   pragma Import(MSIL,remove_PinChanged,"remove_PinChanged");
   pragma Import(MSIL,set_BaudRate,"set_BaudRate");
   pragma Import(MSIL,set_BreakState,"set_BreakState");
   pragma Import(MSIL,set_DataBits,"set_DataBits");
   pragma Import(MSIL,set_DiscardNull,"set_DiscardNull");
   pragma Import(MSIL,set_DtrEnable,"set_DtrEnable");
   pragma Import(MSIL,set_Encoding,"set_Encoding");
   pragma Import(MSIL,set_Handshake,"set_Handshake");
   pragma Import(MSIL,set_NewLine,"set_NewLine");
   pragma Import(MSIL,set_Parity,"set_Parity");
   pragma Import(MSIL,set_ParityReplace,"set_ParityReplace");
   pragma Import(MSIL,set_PortName,"set_PortName");
   pragma Import(MSIL,set_ReadBufferSize,"set_ReadBufferSize");
   pragma Import(MSIL,set_ReadTimeout,"set_ReadTimeout");
   pragma Import(MSIL,set_ReceivedBytesThreshold,"set_ReceivedBytesThreshold");
   pragma Import(MSIL,set_RtsEnable,"set_RtsEnable");
   pragma Import(MSIL,set_StopBits,"set_StopBits");
   pragma Import(MSIL,set_WriteBufferSize,"set_WriteBufferSize");
   pragma Import(MSIL,set_WriteTimeout,"set_WriteTimeout");
   pragma Import(MSIL,Write,"Write");
   pragma Import(MSIL,WriteLine,"WriteLine");
end MSSyst.IO.Ports.SerialPort;
pragma Import(MSIL,MSSyst.IO.Ports.SerialPort,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.IO.Ports.SerialPort");
