-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Net.Sockets.AddressFamily;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Net.IPAddress is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   Any : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,Any,"Any");
   Loopback : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,Loopback,"Loopback");
   Broadcast : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,Broadcast,"Broadcast");
   None : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,None,"None");
   IPv6Any : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,IPv6Any,"IPv6Any");
   IPv6Loopback : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,IPv6Loopback,"IPv6Loopback");
   IPv6None : access MSSyst.Net.IPAddress.Typ'Class;
   pragma Import(MSIL,IPv6None,"IPv6None");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_IPAddress(
      This : Ref := null;
      newAddress : Long_Long_Integer) return Ref;
   function new_IPAddress(
      This : Ref := null;
      address : MSIL_Types.unsigned_int8_Arr;
      scopeid : Long_Long_Integer) return Ref;
   function new_IPAddress(
      This : Ref := null;
      address : MSIL_Types.unsigned_int8_Arr) return Ref;
   function Equals(
      This : access Typ;
      comparand : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function get_Address(
      This : access Typ) return Long_Long_Integer;
   function get_AddressFamily(
      This : access Typ) return MSSyst.Net.Sockets.AddressFamily.Valuetype;
   function get_IsIPv6LinkLocal(
      This : access Typ) return Standard.Boolean;
   function get_IsIPv6Multicast(
      This : access Typ) return Standard.Boolean;
   function get_IsIPv6SiteLocal(
      This : access Typ) return Standard.Boolean;
   function get_ScopeId(
      This : access Typ) return Long_Long_Integer;
   function GetAddressBytes(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetHashCode(
      This : access Typ) return Integer;
   function HostToNetworkOrder(
      host : MSIL_Types.int16) return MSIL_Types.int16;
   function HostToNetworkOrder(
      host : Long_Long_Integer) return Long_Long_Integer;
   function HostToNetworkOrder(
      host : Integer) return Integer;
   function IsLoopback(
      address : access MSSyst.Net.IPAddress.Typ'Class) return Standard.Boolean;
   function NetworkToHostOrder(
      network : Long_Long_Integer) return Long_Long_Integer;
   function NetworkToHostOrder(
      network : Integer) return Integer;
   function NetworkToHostOrder(
      network : MSIL_Types.int16) return MSIL_Types.int16;
   function Parse(
      ipString : access MSSyst.String.Typ'Class) return access MSSyst.Net.IPAddress.Typ'Class;
   procedure set_Address(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_ScopeId(
      This : access Typ;
      value : Long_Long_Integer);
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function TryParse(
      ipString : access MSSyst.String.Typ'Class;
      address : access MSSyst.Net.IPAddress.Ref) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_IPAddress);
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Address,"get_Address");
   pragma Import(MSIL,get_AddressFamily,"get_AddressFamily");
   pragma Import(MSIL,get_IsIPv6LinkLocal,"get_IsIPv6LinkLocal");
   pragma Import(MSIL,get_IsIPv6Multicast,"get_IsIPv6Multicast");
   pragma Import(MSIL,get_IsIPv6SiteLocal,"get_IsIPv6SiteLocal");
   pragma Import(MSIL,get_ScopeId,"get_ScopeId");
   pragma Import(MSIL,GetAddressBytes,"GetAddressBytes");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,HostToNetworkOrder,"HostToNetworkOrder");
   pragma Import(MSIL,IsLoopback,"IsLoopback");
   pragma Import(MSIL,NetworkToHostOrder,"NetworkToHostOrder");
   pragma Import(MSIL,Parse,"Parse");
   pragma Import(MSIL,set_Address,"set_Address");
   pragma Import(MSIL,set_ScopeId,"set_ScopeId");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,TryParse,"TryParse");
end MSSyst.Net.IPAddress;
pragma Import(MSIL,MSSyst.Net.IPAddress,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.IPAddress");
