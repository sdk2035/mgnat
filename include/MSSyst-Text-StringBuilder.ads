-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Decimal;
limited with MSSyst.IFormatProvider;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.SByte;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Text.StringBuilder is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_StringBuilder(
      This : Ref := null) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      capacity : Integer) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      value : access MSSyst.String.Typ'Class) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      value : access MSSyst.String.Typ'Class;
      capacity : Integer) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      value : access MSSyst.String.Typ'Class;
      startIndex : Integer;
      length : Integer;
      capacity : Integer) return Ref;
   function new_StringBuilder(
      This : Ref := null;
      capacity : Integer;
      maxCapacity : Integer) return Ref;
   function Append(
      This : access Typ;
      value : MSIL_Types.int16) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Long_Long_Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Wide_Character) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Standard.Boolean) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSSyst.SByte.Valuetype) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSIL_Types.unsigned_int8) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Float) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSIL_Types.Unsigned_Long_Long_Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSIL_Types.Char_Arr) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSIL_Types.Unsigned_Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Long_Float) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSSyst.Decimal.Valuetype) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSIL_Types.unsigned_int16) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : access MSSyst.String.Typ'Class;
      startIndex : Integer;
      count : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : Wide_Character;
      repeatCount : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Append(
      This : access Typ;
      value : MSIL_Types.Char_Arr;
      startIndex : Integer;
      charCount : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendFormat(
      This : access Typ;
      provider : access MSSyst.IFormatProvider.Typ'Class;
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendFormat(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class;
      arg1 : access MSSyst.Object.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendFormat(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendFormat(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendFormat(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class;
      arg1 : access MSSyst.Object.Typ'Class;
      arg2 : access MSSyst.Object.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendLine(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function AppendLine(
      This : access Typ) return access MSSyst.Text.StringBuilder.Typ'Class;
   procedure CopyTo(
      This : access Typ;
      sourceIndex : Integer;
      destination : MSIL_Types.Char_Arr;
      destinationIndex : Integer;
      count : Integer);
   function EnsureCapacity(
      This : access Typ;
      capacity : Integer) return Integer;
   function Equals(
      This : access Typ;
      sb : access MSSyst.Text.StringBuilder.Typ'Class) return Standard.Boolean;
   function get_Capacity(
      This : access Typ) return Integer;
   function get_Chars(
      This : access Typ;
      index : Integer) return Wide_Character;
   function get_Length(
      This : access Typ) return Integer;
   function get_MaxCapacity(
      This : access Typ) return Integer;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Long_Float) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.Decimal.Valuetype) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Long_Long_Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Float) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Unsigned_Long_Long_Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : access MSSyst.Object.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.unsigned_int16) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Unsigned_Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSSyst.SByte.Valuetype) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.unsigned_int8) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Standard.Boolean) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : access MSSyst.String.Typ'Class;
      count : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : access MSSyst.String.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Char_Arr;
      startIndex : Integer;
      charCount : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.Char_Arr) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : MSIL_Types.int16) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Insert(
      This : access Typ;
      index : Integer;
      value : Wide_Character) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Remove(
      This : access Typ;
      startIndex : Integer;
      length : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Replace(
      This : access Typ;
      oldChar : Wide_Character;
      newChar : Wide_Character) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Replace(
      This : access Typ;
      oldChar : Wide_Character;
      newChar : Wide_Character;
      startIndex : Integer;
      count : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Replace(
      This : access Typ;
      oldValue : access MSSyst.String.Typ'Class;
      newValue : access MSSyst.String.Typ'Class) return access MSSyst.Text.StringBuilder.Typ'Class;
   function Replace(
      This : access Typ;
      oldValue : access MSSyst.String.Typ'Class;
      newValue : access MSSyst.String.Typ'Class;
      startIndex : Integer;
      count : Integer) return access MSSyst.Text.StringBuilder.Typ'Class;
   procedure set_Capacity(
      This : access Typ;
      value : Integer);
   procedure set_Chars(
      This : access Typ;
      index : Integer;
      value : Wide_Character);
   procedure set_Length(
      This : access Typ;
      value : Integer);
   function ToString(
      This : access Typ;
      startIndex : Integer;
      length : Integer) return access MSSyst.String.Typ'Class;
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_StringBuilder);
   pragma Import(MSIL,Append,"Append");
   pragma Import(MSIL,AppendFormat,"AppendFormat");
   pragma Import(MSIL,AppendLine,"AppendLine");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,EnsureCapacity,"EnsureCapacity");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Capacity,"get_Capacity");
   pragma Import(MSIL,get_Chars,"get_Chars");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,get_MaxCapacity,"get_MaxCapacity");
   pragma Import(MSIL,Insert,"Insert");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,Replace,"Replace");
   pragma Import(MSIL,set_Capacity,"set_Capacity");
   pragma Import(MSIL,set_Chars,"set_Chars");
   pragma Import(MSIL,set_Length,"set_Length");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Text.StringBuilder;
pragma Import(MSIL,MSSyst.Text.StringBuilder,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Text.StringBuilder");
