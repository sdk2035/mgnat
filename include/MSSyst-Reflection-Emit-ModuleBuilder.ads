-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Diagnostics.SymbolStore.ISymbolDocumentWriter;
limited with MSSyst.Diagnostics.SymbolStore.ISymbolWriter;
limited with MSSyst.Guid;
limited with MSSyst.IO.Stream;
limited with MSSyst.ModuleHandle;
limited with MSSyst.Reflection.Assembly;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.CallingConventions;
limited with MSSyst.Reflection.ConstructorInfo;
limited with MSSyst.Reflection.Emit.CustomAttributeBuilder;
limited with MSSyst.Reflection.Emit.EnumBuilder;
limited with MSSyst.Reflection.Emit.FieldBuilder;
limited with MSSyst.Reflection.Emit.FieldToken;
limited with MSSyst.Reflection.Emit.MethodBuilder;
limited with MSSyst.Reflection.Emit.MethodToken;
limited with MSSyst.Reflection.Emit.PackingSize;
limited with MSSyst.Reflection.Emit.SignatureHelper;
limited with MSSyst.Reflection.Emit.SignatureToken;
limited with MSSyst.Reflection.Emit.StringToken;
limited with MSSyst.Reflection.Emit.TypeBuilder;
limited with MSSyst.Reflection.Emit.TypeToken;
limited with MSSyst.Reflection.FieldAttributes;
limited with MSSyst.Reflection.FieldInfo;
with MSSyst.Reflection.ICustomAttributeProvider;
with MSSyst.Reflection.ImageFileMachine;
limited with MSSyst.Reflection.MemberInfo;
limited with MSSyst.Reflection.MethodAttributes;
limited with MSSyst.Reflection.MethodBase;
limited with MSSyst.Reflection.MethodInfo;
with MSSyst.Reflection.Module;
with MSSyst.Reflection.ParameterModifier;
with MSSyst.Reflection.PortableExecutableKinds;
limited with MSSyst.Reflection.ResourceAttributes;
limited with MSSyst.Reflection.TypeAttributes;
limited with MSSyst.Reflection.TypeFilter;
limited with MSSyst.Resources.IResourceWriter;
limited with MSSyst.Runtime.InteropServices.CallingConvention;
limited with MSSyst.Runtime.InteropServices.CharSet;
with MSSyst.Runtime.InteropServices.uModule;
with MSSyst.Runtime.InteropServices.uModuleBuilder;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
limited with MSSyst.Security.Cryptography.X509Certificates.X509Certificate;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Reflection.Emit.ModuleBuilder is
   type Typ is new MSSyst.Reflection.Module.Typ
         and MSSyst.Runtime.InteropServices.uModule.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Reflection.ICustomAttributeProvider.Typ
         and MSSyst.Runtime.InteropServices.uModuleBuilder.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure CreateGlobalFunctions(
      This : access Typ);
   function DefineDocument(
      This : access Typ;
      url : access MSSyst.String.Typ'Class;
      language : MSSyst.Guid.Valuetype;
      languageVendor : MSSyst.Guid.Valuetype;
      documentType : MSSyst.Guid.Valuetype) return access MSSyst.Diagnostics.SymbolStore.ISymbolDocumentWriter.Typ'Class;
   function DefineEnum(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      visibility : MSSyst.Reflection.TypeAttributes.Valuetype;
      underlyingType : access MSSyst.Type_k.Typ'Class) return access MSSyst.Reflection.Emit.EnumBuilder.Typ'Class;
   function DefineGlobalMethod(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attributes : MSSyst.Reflection.MethodAttributes.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      parameterTypes : access MSSyst.Type_k.Ref_arr) return access MSSyst.Reflection.Emit.MethodBuilder.Typ'Class;
   function DefineGlobalMethod(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attributes : MSSyst.Reflection.MethodAttributes.Valuetype;
      callingConvention : MSSyst.Reflection.CallingConventions.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      requiredReturnTypeCustomModifiers : access MSSyst.Type_k.Ref_arr;
      optionalReturnTypeCustomModifiers : access MSSyst.Type_k.Ref_arr;
      parameterTypes : access MSSyst.Type_k.Ref_arr;
      requiredParameterTypeCustomModifiers : access MSSyst.Type_k.Ref_array;
      optionalParameterTypeCustomModifiers : access MSSyst.Type_k.Ref_array) return access MSSyst.Reflection.Emit.MethodBuilder.Typ'Class;
   function DefineGlobalMethod(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attributes : MSSyst.Reflection.MethodAttributes.Valuetype;
      callingConvention : MSSyst.Reflection.CallingConventions.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      parameterTypes : access MSSyst.Type_k.Ref_arr) return access MSSyst.Reflection.Emit.MethodBuilder.Typ'Class;
   function DefineInitializedData(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      data : MSIL_Types.unsigned_int8_Arr;
      attributes : MSSyst.Reflection.FieldAttributes.Valuetype) return access MSSyst.Reflection.Emit.FieldBuilder.Typ'Class;
   procedure DefineManifestResource(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      stream : access MSSyst.IO.Stream.Typ'Class;
      attribute : MSSyst.Reflection.ResourceAttributes.Valuetype);
   function DefinePInvokeMethod(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      dllName : access MSSyst.String.Typ'Class;
      attributes : MSSyst.Reflection.MethodAttributes.Valuetype;
      callingConvention : MSSyst.Reflection.CallingConventions.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      parameterTypes : access MSSyst.Type_k.Ref_arr;
      nativeCallConv : MSSyst.Runtime.InteropServices.CallingConvention.Valuetype;
      nativeCharSet : MSSyst.Runtime.InteropServices.CharSet.Valuetype) return access MSSyst.Reflection.Emit.MethodBuilder.Typ'Class;
   function DefinePInvokeMethod(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      dllName : access MSSyst.String.Typ'Class;
      entryName : access MSSyst.String.Typ'Class;
      attributes : MSSyst.Reflection.MethodAttributes.Valuetype;
      callingConvention : MSSyst.Reflection.CallingConventions.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      parameterTypes : access MSSyst.Type_k.Ref_arr;
      nativeCallConv : MSSyst.Runtime.InteropServices.CallingConvention.Valuetype;
      nativeCharSet : MSSyst.Runtime.InteropServices.CharSet.Valuetype) return access MSSyst.Reflection.Emit.MethodBuilder.Typ'Class;
   function DefineResource(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      description : access MSSyst.String.Typ'Class) return access MSSyst.Resources.IResourceWriter.Typ'Class;
   function DefineResource(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      description : access MSSyst.String.Typ'Class;
      attribute : MSSyst.Reflection.ResourceAttributes.Valuetype) return access MSSyst.Resources.IResourceWriter.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attr : MSSyst.Reflection.TypeAttributes.Valuetype;
      parent : access MSSyst.Type_k.Typ'Class) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attr : MSSyst.Reflection.TypeAttributes.Valuetype) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attr : MSSyst.Reflection.TypeAttributes.Valuetype;
      parent : access MSSyst.Type_k.Typ'Class;
      typesize : Integer) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attr : MSSyst.Reflection.TypeAttributes.Valuetype;
      parent : access MSSyst.Type_k.Typ'Class;
      interfaces : access MSSyst.Type_k.Ref_arr) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attr : MSSyst.Reflection.TypeAttributes.Valuetype;
      parent : access MSSyst.Type_k.Typ'Class;
      packsize : MSSyst.Reflection.Emit.PackingSize.Valuetype) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      attr : MSSyst.Reflection.TypeAttributes.Valuetype;
      parent : access MSSyst.Type_k.Typ'Class;
      packingSize : MSSyst.Reflection.Emit.PackingSize.Valuetype;
      typesize : Integer) return access MSSyst.Reflection.Emit.TypeBuilder.Typ'Class;
   function DefineUninitializedData(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      size : Integer;
      attributes : MSSyst.Reflection.FieldAttributes.Valuetype) return access MSSyst.Reflection.Emit.FieldBuilder.Typ'Class;
   procedure DefineUnmanagedResource(
      This : access Typ;
      resourceFileName : access MSSyst.String.Typ'Class);
   procedure DefineUnmanagedResource(
      This : access Typ;
      resource : MSIL_Types.unsigned_int8_Arr);
   function get_FullyQualifiedName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetArrayMethod(
      This : access Typ;
      arrayClass : access MSSyst.Type_k.Typ'Class;
      methodName : access MSSyst.String.Typ'Class;
      callingConvention : MSSyst.Reflection.CallingConventions.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      parameterTypes : access MSSyst.Type_k.Ref_arr) return access MSSyst.Reflection.MethodInfo.Typ'Class;
   function GetArrayMethodToken(
      This : access Typ;
      arrayClass : access MSSyst.Type_k.Typ'Class;
      methodName : access MSSyst.String.Typ'Class;
      callingConvention : MSSyst.Reflection.CallingConventions.Valuetype;
      returnType : access MSSyst.Type_k.Typ'Class;
      parameterTypes : access MSSyst.Type_k.Ref_arr) return MSSyst.Reflection.Emit.MethodToken.Valuetype;
   function GetConstructorToken(
      This : access Typ;
      con : access MSSyst.Reflection.ConstructorInfo.Typ'Class) return MSSyst.Reflection.Emit.MethodToken.Valuetype;
   function GetFieldToken(
      This : access Typ;
      field : access MSSyst.Reflection.FieldInfo.Typ'Class) return MSSyst.Reflection.Emit.FieldToken.Valuetype;
   function GetMethodToken(
      This : access Typ;
      method : access MSSyst.Reflection.MethodInfo.Typ'Class) return MSSyst.Reflection.Emit.MethodToken.Valuetype;
   function GetSignatureToken(
      This : access Typ;
      sigHelper : access MSSyst.Reflection.Emit.SignatureHelper.Typ'Class) return MSSyst.Reflection.Emit.SignatureToken.Valuetype;
   function GetSignatureToken(
      This : access Typ;
      sigBytes : MSIL_Types.unsigned_int8_Arr;
      sigLength : Integer) return MSSyst.Reflection.Emit.SignatureToken.Valuetype;
   function GetStringConstant(
      This : access Typ;
      str : access MSSyst.String.Typ'Class) return MSSyst.Reflection.Emit.StringToken.Valuetype;
   function GetSymWriter(
      This : access Typ) return access MSSyst.Diagnostics.SymbolStore.ISymbolWriter.Typ'Class;
   function GetType(
      This : access Typ;
      className : access MSSyst.String.Typ'Class;
      throwOnError : Standard.Boolean;
      ignoreCase : Standard.Boolean) return access MSSyst.Type_k.Typ'Class;
   function GetType(
      This : access Typ;
      className : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean) return access MSSyst.Type_k.Typ'Class;
   function GetType(
      This : access Typ;
      className : access MSSyst.String.Typ'Class) return access MSSyst.Type_k.Typ'Class;
   function GetTypes(
      This : access Typ) return access MSSyst.Type_k.Ref_arr;
   function GetTypeToken(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return MSSyst.Reflection.Emit.TypeToken.Valuetype;
   function GetTypeToken(
      This : access Typ;
      type_k : access MSSyst.Type_k.Typ'Class) return MSSyst.Reflection.Emit.TypeToken.Valuetype;
   function IsTransient(
      This : access Typ) return Standard.Boolean;
   procedure SetCustomAttribute(
      This : access Typ;
      con : access MSSyst.Reflection.ConstructorInfo.Typ'Class;
      binaryAttribute : MSIL_Types.unsigned_int8_Arr);
   procedure SetCustomAttribute(
      This : access Typ;
      customBuilder : access MSSyst.Reflection.Emit.CustomAttributeBuilder.Typ'Class);
   procedure SetSymCustomAttribute(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      data : MSIL_Types.unsigned_int8_Arr);
   procedure SetUserEntryPoint(
      This : access Typ;
      entryPoint : access MSSyst.Reflection.MethodInfo.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,CreateGlobalFunctions,"CreateGlobalFunctions");
   pragma Import(MSIL,DefineDocument,"DefineDocument");
   pragma Import(MSIL,DefineEnum,"DefineEnum");
   pragma Import(MSIL,DefineGlobalMethod,"DefineGlobalMethod");
   pragma Import(MSIL,DefineInitializedData,"DefineInitializedData");
   pragma Import(MSIL,DefineManifestResource,"DefineManifestResource");
   pragma Import(MSIL,DefinePInvokeMethod,"DefinePInvokeMethod");
   pragma Import(MSIL,DefineResource,"DefineResource");
   pragma Import(MSIL,DefineType,"DefineType");
   pragma Import(MSIL,DefineUninitializedData,"DefineUninitializedData");
   pragma Import(MSIL,DefineUnmanagedResource,"DefineUnmanagedResource");
   pragma Import(MSIL,get_FullyQualifiedName,"get_FullyQualifiedName");
   pragma Import(MSIL,GetArrayMethod,"GetArrayMethod");
   pragma Import(MSIL,GetArrayMethodToken,"GetArrayMethodToken");
   pragma Import(MSIL,GetConstructorToken,"GetConstructorToken");
   pragma Import(MSIL,GetFieldToken,"GetFieldToken");
   pragma Import(MSIL,GetMethodToken,"GetMethodToken");
   pragma Import(MSIL,GetSignatureToken,"GetSignatureToken");
   pragma Import(MSIL,GetStringConstant,"GetStringConstant");
   pragma Import(MSIL,GetSymWriter,"GetSymWriter");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypes,"GetTypes");
   pragma Import(MSIL,GetTypeToken,"GetTypeToken");
   pragma Import(MSIL,IsTransient,"IsTransient");
   pragma Import(MSIL,SetCustomAttribute,"SetCustomAttribute");
   pragma Import(MSIL,SetSymCustomAttribute,"SetSymCustomAttribute");
   pragma Import(MSIL,SetUserEntryPoint,"SetUserEntryPoint");
end MSSyst.Reflection.Emit.ModuleBuilder;
pragma Import(MSIL,MSSyst.Reflection.Emit.ModuleBuilder,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.Emit.ModuleBuilder");
