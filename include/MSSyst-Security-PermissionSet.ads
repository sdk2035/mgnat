-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Array_k;
with MSSyst.Collections.ICollection;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Collections.IEnumerator;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
limited with MSSyst.Security.IPermission;
with MSSyst.Security.ISecurityEncodable;
with MSSyst.Security.IStackWalk;
limited with MSSyst.Security.Permissions.PermissionState;
limited with MSSyst.Security.SecurityElement;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.PermissionSet is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Security.ISecurityEncodable.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
         and MSSyst.Security.IStackWalk.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_PermissionSet(
      This : Ref := null;
      state : MSSyst.Security.Permissions.PermissionState.Valuetype) return Ref;
   function new_PermissionSet(
      This : Ref := null;
      permSet : access MSSyst.Security.PermissionSet.Typ'Class) return Ref;
   function AddPermission(
      This : access Typ;
      perm : access MSSyst.Security.IPermission.Typ'Class) return access MSSyst.Security.IPermission.Typ'Class;
   procedure Assert(
      This : access Typ);
   function ContainsNonCodeAccessPermissions(
      This : access Typ) return Standard.Boolean;
   function ConvertPermissionSet(
      inFormat : access MSSyst.String.Typ'Class;
      inData : MSIL_Types.unsigned_int8_Arr;
      outFormat : access MSSyst.String.Typ'Class) return MSIL_Types.unsigned_int8_Array;
   function Copy(
      This : access Typ) return access MSSyst.Security.PermissionSet.Typ'Class;
   procedure CopyTo(
      This : access Typ;
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer);
   procedure Demand(
      This : access Typ);
   procedure Deny(
      This : access Typ);
   function Equals(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   procedure FromXml(
      This : access Typ;
      et : access MSSyst.Security.SecurityElement.Typ'Class);
   function get_Count(
      This : access Typ) return Integer;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_SyncRoot(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function GetEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetPermission(
      This : access Typ;
      permClass : access MSSyst.Type_k.Typ'Class) return access MSSyst.Security.IPermission.Typ'Class;
   function Intersect(
      This : access Typ;
      other : access MSSyst.Security.PermissionSet.Typ'Class) return access MSSyst.Security.PermissionSet.Typ'Class;
   function IsEmpty(
      This : access Typ) return Standard.Boolean;
   function IsSubsetOf(
      This : access Typ;
      target : access MSSyst.Security.PermissionSet.Typ'Class) return Standard.Boolean;
   function IsUnrestricted(
      This : access Typ) return Standard.Boolean;
   procedure PermitOnly(
      This : access Typ);
   function RemovePermission(
      This : access Typ;
      permClass : access MSSyst.Type_k.Typ'Class) return access MSSyst.Security.IPermission.Typ'Class;
   procedure RevertAssert;
   function SetPermission(
      This : access Typ;
      perm : access MSSyst.Security.IPermission.Typ'Class) return access MSSyst.Security.IPermission.Typ'Class;
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function ToXml(
      This : access Typ) return access MSSyst.Security.SecurityElement.Typ'Class;
   function Union(
      This : access Typ;
      other : access MSSyst.Security.PermissionSet.Typ'Class) return access MSSyst.Security.PermissionSet.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_PermissionSet);
   pragma Import(MSIL,AddPermission,"AddPermission");
   pragma Import(MSIL,Assert,"Assert");
   pragma Import(MSIL,ContainsNonCodeAccessPermissions,"ContainsNonCodeAccessPermissions");
   pragma Import(MSIL,ConvertPermissionSet,"ConvertPermissionSet");
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Demand,"Demand");
   pragma Import(MSIL,Deny,"Deny");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,FromXml,"FromXml");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetPermission,"GetPermission");
   pragma Import(MSIL,Intersect,"Intersect");
   pragma Import(MSIL,IsEmpty,"IsEmpty");
   pragma Import(MSIL,IsSubsetOf,"IsSubsetOf");
   pragma Import(MSIL,IsUnrestricted,"IsUnrestricted");
   pragma Import(MSIL,PermitOnly,"PermitOnly");
   pragma Import(MSIL,RemovePermission,"RemovePermission");
   pragma Import(MSIL,RevertAssert,"RevertAssert");
   pragma Import(MSIL,SetPermission,"SetPermission");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,ToXml,"ToXml");
   pragma Import(MSIL,Union,"Union");
end MSSyst.Security.PermissionSet;
pragma Import(MSIL,MSSyst.Security.PermissionSet,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.PermissionSet");
