-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Drawing.FontFamily;
limited with MSSyst.Drawing.FontStyle;
limited with MSSyst.Drawing.GraphicsUnit;
limited with MSSyst.Drawing.Graphics;
with MSSyst.ICloneable;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Drawing.Font is
   type Typ is new MSSyst.MarshalByRefObject.Typ
         and MSSyst.ICloneable.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Font(
      This : Ref := null;
      prototype : access MSSyst.Drawing.Font.Typ'Class;
      newStyle : MSSyst.Drawing.FontStyle.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      family : access MSSyst.Drawing.FontFamily.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype;
      gdiCharSet : MSIL_Types.unsigned_int8;
      gdiVerticalFont : Standard.Boolean) return Ref;
   function new_Font(
      This : Ref := null;
      family : access MSSyst.Drawing.FontFamily.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      family : access MSSyst.Drawing.FontFamily.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype;
      gdiCharSet : MSIL_Types.unsigned_int8) return Ref;
   function new_Font(
      This : Ref := null;
      familyName : access MSSyst.String.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype;
      gdiCharSet : MSIL_Types.unsigned_int8) return Ref;
   function new_Font(
      This : Ref := null;
      familyName : access MSSyst.String.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype;
      gdiCharSet : MSIL_Types.unsigned_int8;
      gdiVerticalFont : Standard.Boolean) return Ref;
   function new_Font(
      This : Ref := null;
      family : access MSSyst.Drawing.FontFamily.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      family : access MSSyst.Drawing.FontFamily.Typ'Class;
      emSize : Float;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      family : access MSSyst.Drawing.FontFamily.Typ'Class;
      emSize : Float) return Ref;
   function new_Font(
      This : Ref := null;
      familyName : access MSSyst.String.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      familyName : access MSSyst.String.Typ'Class;
      emSize : Float;
      style : MSSyst.Drawing.FontStyle.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      familyName : access MSSyst.String.Typ'Class;
      emSize : Float;
      unit : MSSyst.Drawing.GraphicsUnit.Valuetype) return Ref;
   function new_Font(
      This : Ref := null;
      familyName : access MSSyst.String.Typ'Class;
      emSize : Float) return Ref;
   function Clone(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   procedure Dispose(
      This : access Typ);
   function Equals(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function FromHdc(
      hdc : MSIL_Types.native_int) return access MSSyst.Drawing.Font.Typ'Class;
   function FromHfont(
      hfont : MSIL_Types.native_int) return access MSSyst.Drawing.Font.Typ'Class;
   function FromLogFont(
      lf : access MSSyst.Object.Typ'Class) return access MSSyst.Drawing.Font.Typ'Class;
   function FromLogFont(
      lf : access MSSyst.Object.Typ'Class;
      hdc : MSIL_Types.native_int) return access MSSyst.Drawing.Font.Typ'Class;
   function get_Bold(
      This : access Typ) return Standard.Boolean;
   function get_FontFamily(
      This : access Typ) return access MSSyst.Drawing.FontFamily.Typ'Class;
   function get_GdiCharSet(
      This : access Typ) return MSIL_Types.unsigned_int8;
   function get_GdiVerticalFont(
      This : access Typ) return Standard.Boolean;
   function get_Height(
      This : access Typ) return Integer;
   function get_IsSystemFont(
      This : access Typ) return Standard.Boolean;
   function get_Italic(
      This : access Typ) return Standard.Boolean;
   function get_Name(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Size(
      This : access Typ) return Float;
   function get_SizeInPoints(
      This : access Typ) return Float;
   function get_Strikeout(
      This : access Typ) return Standard.Boolean;
   function get_Style(
      This : access Typ) return MSSyst.Drawing.FontStyle.Valuetype;
   function get_SystemFontName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Underline(
      This : access Typ) return Standard.Boolean;
   function get_Unit(
      This : access Typ) return MSSyst.Drawing.GraphicsUnit.Valuetype;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetHeight(
      This : access Typ) return Float;
   function GetHeight(
      This : access Typ;
      dpi : Float) return Float;
   function GetHeight(
      This : access Typ;
      graphics : access MSSyst.Drawing.Graphics.Typ'Class) return Float;
   function ToHfont(
      This : access Typ) return MSIL_Types.native_int;
   procedure ToLogFont(
      This : access Typ;
      logFont : access MSSyst.Object.Typ'Class;
      graphics : access MSSyst.Drawing.Graphics.Typ'Class);
   procedure ToLogFont(
      This : access Typ;
      logFont : access MSSyst.Object.Typ'Class);
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Font);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,FromHdc,"FromHdc");
   pragma Import(MSIL,FromHfont,"FromHfont");
   pragma Import(MSIL,FromLogFont,"FromLogFont");
   pragma Import(MSIL,get_Bold,"get_Bold");
   pragma Import(MSIL,get_FontFamily,"get_FontFamily");
   pragma Import(MSIL,get_GdiCharSet,"get_GdiCharSet");
   pragma Import(MSIL,get_GdiVerticalFont,"get_GdiVerticalFont");
   pragma Import(MSIL,get_Height,"get_Height");
   pragma Import(MSIL,get_IsSystemFont,"get_IsSystemFont");
   pragma Import(MSIL,get_Italic,"get_Italic");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_Size,"get_Size");
   pragma Import(MSIL,get_SizeInPoints,"get_SizeInPoints");
   pragma Import(MSIL,get_Strikeout,"get_Strikeout");
   pragma Import(MSIL,get_Style,"get_Style");
   pragma Import(MSIL,get_SystemFontName,"get_SystemFontName");
   pragma Import(MSIL,get_Underline,"get_Underline");
   pragma Import(MSIL,get_Unit,"get_Unit");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetHeight,"GetHeight");
   pragma Import(MSIL,ToHfont,"ToHfont");
   pragma Import(MSIL,ToLogFont,"ToLogFont");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Drawing.Font;
pragma Import(MSIL,MSSyst.Drawing.Font,
   ".ver 2:0:0:0 .publickeytoken=( b0 3f 5f 7f 11 d5 0a 3a )",
   "[System.Drawing]System.Drawing.Font");
