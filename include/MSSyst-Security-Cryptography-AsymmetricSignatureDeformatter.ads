-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Security.Cryptography.AsymmetricAlgorithm;
limited with MSSyst.Security.Cryptography.HashAlgorithm;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Cryptography.AsymmetricSignatureDeformatter is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure SetHashAlgorithm(
      This : access Typ;
      strName : access MSSyst.String.Typ'Class);
   procedure SetKey(
      This : access Typ;
      key : access MSSyst.Security.Cryptography.AsymmetricAlgorithm.Typ'Class);
   function VerifySignature(
      This : access Typ;
      hash : access MSSyst.Security.Cryptography.HashAlgorithm.Typ'Class;
      rgbSignature : MSIL_Types.unsigned_int8_Arr) return Standard.Boolean;
   function VerifySignature(
      This : access Typ;
      rgbHash : MSIL_Types.unsigned_int8_Arr;
      rgbSignature : MSIL_Types.unsigned_int8_Arr) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,SetHashAlgorithm,"SetHashAlgorithm");
   pragma Import(MSIL,SetKey,"SetKey");
   pragma Import(MSIL,VerifySignature,"VerifySignature");
end MSSyst.Security.Cryptography.AsymmetricSignatureDeformatter;
pragma Import(MSIL,MSSyst.Security.Cryptography.AsymmetricSignatureDeformatter,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Cryptography.AsymmetricSignatureDeformatter");
