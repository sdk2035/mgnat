-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.AsyncCallback;
limited with MSSyst.IAsyncResult;
limited with MSSyst.Net.EndPoint;
limited with MSSyst.Net.IPAddress;
limited with MSSyst.Net.IPEndPoint;
limited with MSSyst.Net.Sockets.Socket;
limited with MSSyst.Net.Sockets.TcpClient;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Net.Sockets.TcpListener is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_TcpListener(
      This : Ref := null;
      localEP : access MSSyst.Net.IPEndPoint.Typ'Class) return Ref;
   function new_TcpListener(
      This : Ref := null;
      localaddr : access MSSyst.Net.IPAddress.Typ'Class;
      port : Integer) return Ref;
   function new_TcpListener(
      This : Ref := null;
      port : Integer) return Ref;
   function AcceptSocket(
      This : access Typ) return access MSSyst.Net.Sockets.Socket.Typ'Class;
   function AcceptTcpClient(
      This : access Typ) return access MSSyst.Net.Sockets.TcpClient.Typ'Class;
   function BeginAcceptSocket(
      This : access Typ;
      callback : access MSSyst.AsyncCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return access MSSyst.IAsyncResult.Typ'Class;
   function BeginAcceptTcpClient(
      This : access Typ;
      callback : access MSSyst.AsyncCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return access MSSyst.IAsyncResult.Typ'Class;
   function EndAcceptSocket(
      This : access Typ;
      asyncResult : access MSSyst.IAsyncResult.Typ'Class) return access MSSyst.Net.Sockets.Socket.Typ'Class;
   function EndAcceptTcpClient(
      This : access Typ;
      asyncResult : access MSSyst.IAsyncResult.Typ'Class) return access MSSyst.Net.Sockets.TcpClient.Typ'Class;
   function get_ExclusiveAddressUse(
      This : access Typ) return Standard.Boolean;
   function get_LocalEndpoint(
      This : access Typ) return access MSSyst.Net.EndPoint.Typ'Class;
   function get_Server(
      This : access Typ) return access MSSyst.Net.Sockets.Socket.Typ'Class;
   function Pending(
      This : access Typ) return Standard.Boolean;
   procedure set_ExclusiveAddressUse(
      This : access Typ;
      value : Standard.Boolean);
   procedure Start(
      This : access Typ;
      backlog : Integer);
   procedure Start(
      This : access Typ);
   procedure Stop(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_TcpListener);
   pragma Import(MSIL,AcceptSocket,"AcceptSocket");
   pragma Import(MSIL,AcceptTcpClient,"AcceptTcpClient");
   pragma Import(MSIL,BeginAcceptSocket,"BeginAcceptSocket");
   pragma Import(MSIL,BeginAcceptTcpClient,"BeginAcceptTcpClient");
   pragma Import(MSIL,EndAcceptSocket,"EndAcceptSocket");
   pragma Import(MSIL,EndAcceptTcpClient,"EndAcceptTcpClient");
   pragma Import(MSIL,get_ExclusiveAddressUse,"get_ExclusiveAddressUse");
   pragma Import(MSIL,get_LocalEndpoint,"get_LocalEndpoint");
   pragma Import(MSIL,get_Server,"get_Server");
   pragma Import(MSIL,Pending,"Pending");
   pragma Import(MSIL,set_ExclusiveAddressUse,"set_ExclusiveAddressUse");
   pragma Import(MSIL,Start,"Start");
   pragma Import(MSIL,Stop,"Stop");
end MSSyst.Net.Sockets.TcpListener;
pragma Import(MSIL,MSSyst.Net.Sockets.TcpListener,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Sockets.TcpListener");
