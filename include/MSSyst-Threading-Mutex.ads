-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with Microsoft.Win32.SafeHandles.SafeWaitHandle;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.Security.AccessControl.MutexRights;
limited with MSSyst.Security.AccessControl.MutexSecurity;
limited with MSSyst.String;
with MSSyst.Threading.WaitHandle;
limited with MSSyst.TimeSpan;
limited with MSSyst.Type_k;
package MSSyst.Threading.Mutex is
   type Typ is new MSSyst.Threading.WaitHandle.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Mutex(
      This : Ref := null) return Ref;
   function new_Mutex(
      This : Ref := null;
      initiallyOwned : Standard.Boolean;
      name : access MSSyst.String.Typ'Class;
      createdNew : MSIL_Types.Bool_addrof) return Ref;
   function new_Mutex(
      This : Ref := null;
      initiallyOwned : Standard.Boolean;
      name : access MSSyst.String.Typ'Class;
      createdNew : MSIL_Types.Bool_addrof;
      mutexSecurity : access MSSyst.Security.AccessControl.MutexSecurity.Typ'Class) return Ref;
   function new_Mutex(
      This : Ref := null;
      initiallyOwned : Standard.Boolean;
      name : access MSSyst.String.Typ'Class) return Ref;
   function new_Mutex(
      This : Ref := null;
      initiallyOwned : Standard.Boolean) return Ref;
   function GetAccessControl(
      This : access Typ) return access MSSyst.Security.AccessControl.MutexSecurity.Typ'Class;
   function OpenExisting(
      name : access MSSyst.String.Typ'Class;
      rights : MSSyst.Security.AccessControl.MutexRights.Valuetype) return access MSSyst.Threading.Mutex.Typ'Class;
   function OpenExisting(
      name : access MSSyst.String.Typ'Class) return access MSSyst.Threading.Mutex.Typ'Class;
   procedure ReleaseMutex(
      This : access Typ);
   procedure SetAccessControl(
      This : access Typ;
      mutexSecurity : access MSSyst.Security.AccessControl.MutexSecurity.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Mutex);
   pragma Import(MSIL,GetAccessControl,"GetAccessControl");
   pragma Import(MSIL,OpenExisting,"OpenExisting");
   pragma Import(MSIL,ReleaseMutex,"ReleaseMutex");
   pragma Import(MSIL,SetAccessControl,"SetAccessControl");
end MSSyst.Threading.Mutex;
pragma Import(MSIL,MSSyst.Threading.Mutex,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Threading.Mutex");
