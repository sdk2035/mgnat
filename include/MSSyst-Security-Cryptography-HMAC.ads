-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.IDisposable;
limited with MSSyst.IO.Stream;
with MSSyst.Security.Cryptography.HashAlgorithm;
with MSSyst.Security.Cryptography.ICryptoTransform;
with MSSyst.Security.Cryptography.KeyedHashAlgorithm;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Cryptography.HMAC is
   type Typ is abstract new MSSyst.Security.Cryptography.KeyedHashAlgorithm.Typ
         and MSSyst.Security.Cryptography.ICryptoTransform.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function Create(
      algorithmName : access MSSyst.String.Typ'Class) return access MSSyst.Security.Cryptography.HMAC.Typ'Class;
   function Create return access MSSyst.Security.Cryptography.HMAC.Typ'Class;
   function get_HashName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Key(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   procedure Initialize(
      This : access Typ);
   procedure set_HashName(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Key(
      This : access Typ;
      value : MSIL_Types.unsigned_int8_Arr);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Create,"Create");
   pragma Import(MSIL,get_HashName,"get_HashName");
   pragma Import(MSIL,get_Key,"get_Key");
   pragma Import(MSIL,Initialize,"Initialize");
   pragma Import(MSIL,set_HashName,"set_HashName");
   pragma Import(MSIL,set_Key,"set_Key");
end MSSyst.Security.Cryptography.HMAC;
pragma Import(MSIL,MSSyst.Security.Cryptography.HMAC,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Cryptography.HMAC");
