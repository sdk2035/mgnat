-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.IO.UnmanagedMemoryStream;
limited with MSSyst.Reflection.Assembly;
limited with MSSyst.Resources.ResourceSet;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Resources.ResourceManager is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   MagicNumber : Integer;
   pragma Import(MSIL,MagicNumber,"MagicNumber");
   HeaderVersionNumber : Integer;
   pragma Import(MSIL,HeaderVersionNumber,"HeaderVersionNumber");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_ResourceManager(
      This : Ref := null;
      baseName : access MSSyst.String.Typ'Class;
      assembly : access MSSyst.Reflection.Assembly.Typ'Class) return Ref;
   function new_ResourceManager(
      This : Ref := null;
      baseName : access MSSyst.String.Typ'Class;
      assembly : access MSSyst.Reflection.Assembly.Typ'Class;
      usingResourceSet : access MSSyst.Type_k.Typ'Class) return Ref;
   function new_ResourceManager(
      This : Ref := null;
      resourceSource : access MSSyst.Type_k.Typ'Class) return Ref;
   function CreateFileBasedResourceManager(
      baseName : access MSSyst.String.Typ'Class;
      resourceDir : access MSSyst.String.Typ'Class;
      usingResourceSet : access MSSyst.Type_k.Typ'Class) return access MSSyst.Resources.ResourceManager.Typ'Class;
   function get_BaseName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_IgnoreCase(
      This : access Typ) return Standard.Boolean;
   function get_ResourceSetType(
      This : access Typ) return access MSSyst.Type_k.Typ'Class;
   function GetObject(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Object.Typ'Class;
   function GetObject(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Object.Typ'Class;
   function GetResourceSet(
      This : access Typ;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      createIfNotExists : Standard.Boolean;
      tryParents : Standard.Boolean) return access MSSyst.Resources.ResourceSet.Typ'Class;
   function GetStream(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.IO.UnmanagedMemoryStream.Typ'Class;
   function GetStream(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.UnmanagedMemoryStream.Typ'Class;
   function GetString(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.String.Typ'Class;
   function GetString(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   procedure ReleaseAllResources(
      This : access Typ);
   procedure set_IgnoreCase(
      This : access Typ;
      value : Standard.Boolean);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_ResourceManager);
   pragma Import(MSIL,CreateFileBasedResourceManager,"CreateFileBasedResourceManager");
   pragma Import(MSIL,get_BaseName,"get_BaseName");
   pragma Import(MSIL,get_IgnoreCase,"get_IgnoreCase");
   pragma Import(MSIL,get_ResourceSetType,"get_ResourceSetType");
   pragma Import(MSIL,GetObject,"GetObject");
   pragma Import(MSIL,GetResourceSet,"GetResourceSet");
   pragma Import(MSIL,GetStream,"GetStream");
   pragma Import(MSIL,GetString,"GetString");
   pragma Import(MSIL,ReleaseAllResources,"ReleaseAllResources");
   pragma Import(MSIL,set_IgnoreCase,"set_IgnoreCase");
end MSSyst.Resources.ResourceManager;
pragma Import(MSIL,MSSyst.Resources.ResourceManager,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Resources.ResourceManager");
