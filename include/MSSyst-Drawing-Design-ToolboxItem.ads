-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Collections.ICollection;
limited with MSSyst.Collections.IDictionary;
limited with MSSyst.ComponentModel.Design.IDesignerHost;
limited with MSSyst.ComponentModel.IComponent;
limited with MSSyst.Drawing.Bitmap;
limited with MSSyst.Drawing.Design.ToolboxComponentsCreatedEventHandler;
limited with MSSyst.Drawing.Design.ToolboxComponentsCreatingEventHandler;
limited with MSSyst.Reflection.AssemblyName;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Drawing.Design.ToolboxItem is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_ToolboxItem(
      This : Ref := null) return Ref;
   function new_ToolboxItem(
      This : Ref := null;
      toolType : access MSSyst.Type_k.Typ'Class) return Ref;
   procedure add_ComponentsCreated(
      This : access Typ;
      value : access MSSyst.Drawing.Design.ToolboxComponentsCreatedEventHandler.Typ'Class);
   procedure add_ComponentsCreating(
      This : access Typ;
      value : access MSSyst.Drawing.Design.ToolboxComponentsCreatingEventHandler.Typ'Class);
   function CreateComponents(
      This : access Typ;
      host : access MSSyst.ComponentModel.Design.IDesignerHost.Typ'Class) return access MSSyst.ComponentModel.IComponent.Ref_arr;
   function CreateComponents(
      This : access Typ) return access MSSyst.ComponentModel.IComponent.Ref_arr;
   function CreateComponents(
      This : access Typ;
      host : access MSSyst.ComponentModel.Design.IDesignerHost.Typ'Class;
      defaultValues : access MSSyst.Collections.IDictionary.Typ'Class) return access MSSyst.ComponentModel.IComponent.Ref_arr;
   function Equals(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function get_AssemblyName(
      This : access Typ) return access MSSyst.Reflection.AssemblyName.Typ'Class;
   function get_Bitmap(
      This : access Typ) return access MSSyst.Drawing.Bitmap.Typ'Class;
   function get_Company(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_ComponentType(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_DependentAssemblies(
      This : access Typ) return access MSSyst.Reflection.AssemblyName.Ref_arr;
   function get_Description(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_DisplayName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Filter(
      This : access Typ) return access MSSyst.Collections.ICollection.Typ'Class;
   function get_IsTransient(
      This : access Typ) return Standard.Boolean;
   function get_Locked(
      This : access Typ) return Standard.Boolean;
   function get_Properties(
      This : access Typ) return access MSSyst.Collections.IDictionary.Typ'Class;
   function get_TypeName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Version(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetType(
      This : access Typ;
      host : access MSSyst.ComponentModel.Design.IDesignerHost.Typ'Class) return access MSSyst.Type_k.Typ'Class;
   procedure Initialize(
      This : access Typ;
      type_k : access MSSyst.Type_k.Typ'Class);
   procedure Lock(
      This : access Typ);
   procedure remove_ComponentsCreated(
      This : access Typ;
      value : access MSSyst.Drawing.Design.ToolboxComponentsCreatedEventHandler.Typ'Class);
   procedure remove_ComponentsCreating(
      This : access Typ;
      value : access MSSyst.Drawing.Design.ToolboxComponentsCreatingEventHandler.Typ'Class);
   procedure set_AssemblyName(
      This : access Typ;
      value : access MSSyst.Reflection.AssemblyName.Typ'Class);
   procedure set_Bitmap(
      This : access Typ;
      value : access MSSyst.Drawing.Bitmap.Typ'Class);
   procedure set_Company(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_DependentAssemblies(
      This : access Typ;
      value : access MSSyst.Reflection.AssemblyName.Ref_arr);
   procedure set_Description(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_DisplayName(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Filter(
      This : access Typ;
      value : access MSSyst.Collections.ICollection.Typ'Class);
   procedure set_IsTransient(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_TypeName(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_ToolboxItem);
   pragma Import(MSIL,add_ComponentsCreated,"add_ComponentsCreated");
   pragma Import(MSIL,add_ComponentsCreating,"add_ComponentsCreating");
   pragma Import(MSIL,CreateComponents,"CreateComponents");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_AssemblyName,"get_AssemblyName");
   pragma Import(MSIL,get_Bitmap,"get_Bitmap");
   pragma Import(MSIL,get_Company,"get_Company");
   pragma Import(MSIL,get_ComponentType,"get_ComponentType");
   pragma Import(MSIL,get_DependentAssemblies,"get_DependentAssemblies");
   pragma Import(MSIL,get_Description,"get_Description");
   pragma Import(MSIL,get_DisplayName,"get_DisplayName");
   pragma Import(MSIL,get_Filter,"get_Filter");
   pragma Import(MSIL,get_IsTransient,"get_IsTransient");
   pragma Import(MSIL,get_Locked,"get_Locked");
   pragma Import(MSIL,get_Properties,"get_Properties");
   pragma Import(MSIL,get_TypeName,"get_TypeName");
   pragma Import(MSIL,get_Version,"get_Version");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,Initialize,"Initialize");
   pragma Import(MSIL,Lock,"Lock");
   pragma Import(MSIL,remove_ComponentsCreated,"remove_ComponentsCreated");
   pragma Import(MSIL,remove_ComponentsCreating,"remove_ComponentsCreating");
   pragma Import(MSIL,set_AssemblyName,"set_AssemblyName");
   pragma Import(MSIL,set_Bitmap,"set_Bitmap");
   pragma Import(MSIL,set_Company,"set_Company");
   pragma Import(MSIL,set_DependentAssemblies,"set_DependentAssemblies");
   pragma Import(MSIL,set_Description,"set_Description");
   pragma Import(MSIL,set_DisplayName,"set_DisplayName");
   pragma Import(MSIL,set_Filter,"set_Filter");
   pragma Import(MSIL,set_IsTransient,"set_IsTransient");
   pragma Import(MSIL,set_TypeName,"set_TypeName");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Drawing.Design.ToolboxItem;
pragma Import(MSIL,MSSyst.Drawing.Design.ToolboxItem,
   ".ver 2:0:0:0 .publickeytoken=( b0 3f 5f 7f 11 d5 0a 3a )",
   "[System.Drawing]System.Drawing.Design.ToolboxItem");
