-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Runtime.Remoting.ActivatedClientTypeEntry;
limited with MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry;
limited with MSSyst.Runtime.Remoting.CustomErrorsModes;
limited with MSSyst.Runtime.Remoting.WellKnownClientTypeEntry;
limited with MSSyst.Runtime.Remoting.WellKnownObjectMode;
limited with MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Runtime.Remoting.RemotingConfiguration is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Configure(
      filename : access MSSyst.String.Typ'Class;
      ensureSecurity : Standard.Boolean);
   procedure Configure(
      filename : access MSSyst.String.Typ'Class);
   function CustomErrorsEnabled(
      isLocalRequest : Standard.Boolean) return Standard.Boolean;
   function get_ApplicationId return access MSSyst.String.Typ'Class;
   function get_ApplicationName return access MSSyst.String.Typ'Class;
   function get_CustomErrorsMode return MSSyst.Runtime.Remoting.CustomErrorsModes.Valuetype;
   function get_ProcessId return access MSSyst.String.Typ'Class;
   function GetRegisteredActivatedClientTypes return access MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Ref_arr;
   function GetRegisteredActivatedServiceTypes return access MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry.Ref_arr;
   function GetRegisteredWellKnownClientTypes return access MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Ref_arr;
   function GetRegisteredWellKnownServiceTypes return access MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry.Ref_arr;
   function IsActivationAllowed(
      svrType : access MSSyst.Type_k.Typ'Class) return Standard.Boolean;
   function IsRemotelyActivatedClientType(
      typeName : access MSSyst.String.Typ'Class;
      assemblyName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Typ'Class;
   function IsRemotelyActivatedClientType(
      svrType : access MSSyst.Type_k.Typ'Class) return access MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Typ'Class;
   function IsWellKnownClientType(
      svrType : access MSSyst.Type_k.Typ'Class) return access MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Typ'Class;
   function IsWellKnownClientType(
      typeName : access MSSyst.String.Typ'Class;
      assemblyName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Typ'Class;
   procedure RegisterActivatedClientType(
      entry_k : access MSSyst.Runtime.Remoting.ActivatedClientTypeEntry.Typ'Class);
   procedure RegisterActivatedClientType(
      type_k : access MSSyst.Type_k.Typ'Class;
      appUrl : access MSSyst.String.Typ'Class);
   procedure RegisterActivatedServiceType(
      type_k : access MSSyst.Type_k.Typ'Class);
   procedure RegisterActivatedServiceType(
      entry_k : access MSSyst.Runtime.Remoting.ActivatedServiceTypeEntry.Typ'Class);
   procedure RegisterWellKnownClientType(
      type_k : access MSSyst.Type_k.Typ'Class;
      objectUrl : access MSSyst.String.Typ'Class);
   procedure RegisterWellKnownClientType(
      entry_k : access MSSyst.Runtime.Remoting.WellKnownClientTypeEntry.Typ'Class);
   procedure RegisterWellKnownServiceType(
      entry_k : access MSSyst.Runtime.Remoting.WellKnownServiceTypeEntry.Typ'Class);
   procedure RegisterWellKnownServiceType(
      type_k : access MSSyst.Type_k.Typ'Class;
      objectUri : access MSSyst.String.Typ'Class;
      mode : MSSyst.Runtime.Remoting.WellKnownObjectMode.Valuetype);
   procedure set_ApplicationName(
      value : access MSSyst.String.Typ'Class);
   procedure set_CustomErrorsMode(
      value : MSSyst.Runtime.Remoting.CustomErrorsModes.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Configure,"Configure");
   pragma Import(MSIL,CustomErrorsEnabled,"CustomErrorsEnabled");
   pragma Import(MSIL,get_ApplicationId,"get_ApplicationId");
   pragma Import(MSIL,get_ApplicationName,"get_ApplicationName");
   pragma Import(MSIL,get_CustomErrorsMode,"get_CustomErrorsMode");
   pragma Import(MSIL,get_ProcessId,"get_ProcessId");
   pragma Import(MSIL,GetRegisteredActivatedClientTypes,"GetRegisteredActivatedClientTypes");
   pragma Import(MSIL,GetRegisteredActivatedServiceTypes,"GetRegisteredActivatedServiceTypes");
   pragma Import(MSIL,GetRegisteredWellKnownClientTypes,"GetRegisteredWellKnownClientTypes");
   pragma Import(MSIL,GetRegisteredWellKnownServiceTypes,"GetRegisteredWellKnownServiceTypes");
   pragma Import(MSIL,IsActivationAllowed,"IsActivationAllowed");
   pragma Import(MSIL,IsRemotelyActivatedClientType,"IsRemotelyActivatedClientType");
   pragma Import(MSIL,IsWellKnownClientType,"IsWellKnownClientType");
   pragma Import(MSIL,RegisterActivatedClientType,"RegisterActivatedClientType");
   pragma Import(MSIL,RegisterActivatedServiceType,"RegisterActivatedServiceType");
   pragma Import(MSIL,RegisterWellKnownClientType,"RegisterWellKnownClientType");
   pragma Import(MSIL,RegisterWellKnownServiceType,"RegisterWellKnownServiceType");
   pragma Import(MSIL,set_ApplicationName,"set_ApplicationName");
   pragma Import(MSIL,set_CustomErrorsMode,"set_CustomErrorsMode");
end MSSyst.Runtime.Remoting.RemotingConfiguration;
pragma Import(MSIL,MSSyst.Runtime.Remoting.RemotingConfiguration,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Runtime.Remoting.RemotingConfiguration");
