-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Security.Cryptography.AsymmetricAlgorithm;
with MSSyst.Security.Cryptography.AsymmetricKeyExchangeFormatter;
limited with MSSyst.Security.Cryptography.RandomNumberGenerator;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Cryptography.RSAPKCS1KeyExchangeFormatter is
   type Typ is new MSSyst.Security.Cryptography.AsymmetricKeyExchangeFormatter.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_RSAPKCS1KeyExchangeFormatter(
      This : Ref := null) return Ref;
   function new_RSAPKCS1KeyExchangeFormatter(
      This : Ref := null;
      key : access MSSyst.Security.Cryptography.AsymmetricAlgorithm.Typ'Class) return Ref;
   function CreateKeyExchange(
      This : access Typ;
      rgbData : MSIL_Types.unsigned_int8_Arr) return MSIL_Types.unsigned_int8_Array;
   function CreateKeyExchange(
      This : access Typ;
      rgbData : MSIL_Types.unsigned_int8_Arr;
      symAlgType : access MSSyst.Type_k.Typ'Class) return MSIL_Types.unsigned_int8_Array;
   function get_Parameters(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Rng(
      This : access Typ) return access MSSyst.Security.Cryptography.RandomNumberGenerator.Typ'Class;
   procedure set_Rng(
      This : access Typ;
      value : access MSSyst.Security.Cryptography.RandomNumberGenerator.Typ'Class);
   procedure SetKey(
      This : access Typ;
      key : access MSSyst.Security.Cryptography.AsymmetricAlgorithm.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_RSAPKCS1KeyExchangeFormatter);
   pragma Import(MSIL,CreateKeyExchange,"CreateKeyExchange");
   pragma Import(MSIL,get_Parameters,"get_Parameters");
   pragma Import(MSIL,get_Rng,"get_Rng");
   pragma Import(MSIL,set_Rng,"set_Rng");
   pragma Import(MSIL,SetKey,"SetKey");
end MSSyst.Security.Cryptography.RSAPKCS1KeyExchangeFormatter;
pragma Import(MSIL,MSSyst.Security.Cryptography.RSAPKCS1KeyExchangeFormatter,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter");
