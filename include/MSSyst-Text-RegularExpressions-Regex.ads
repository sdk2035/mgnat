-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Reflection.AssemblyName;
limited with MSSyst.Reflection.Emit.CustomAttributeBuilder;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.String;
limited with MSSyst.Text.RegularExpressions.MatchCollection;
limited with MSSyst.Text.RegularExpressions.MatchEvaluator;
limited with MSSyst.Text.RegularExpressions.Match;
limited with MSSyst.Text.RegularExpressions.RegexCompilationInfo;
limited with MSSyst.Text.RegularExpressions.RegexOptions;
limited with MSSyst.Type_k;
package MSSyst.Text.RegularExpressions.Regex is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Regex(
      This : Ref := null;
      pattern : access MSSyst.String.Typ'Class) return Ref;
   function new_Regex(
      This : Ref := null;
      pattern : access MSSyst.String.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return Ref;
   procedure CompileToAssembly(
      regexinfos : access MSSyst.Text.RegularExpressions.RegexCompilationInfo.Ref_arr;
      assemblyname : access MSSyst.Reflection.AssemblyName.Typ'Class;
      attributes : access MSSyst.Reflection.Emit.CustomAttributeBuilder.Ref_arr);
   procedure CompileToAssembly(
      regexinfos : access MSSyst.Text.RegularExpressions.RegexCompilationInfo.Ref_arr;
      assemblyname : access MSSyst.Reflection.AssemblyName.Typ'Class);
   procedure CompileToAssembly(
      regexinfos : access MSSyst.Text.RegularExpressions.RegexCompilationInfo.Ref_arr;
      assemblyname : access MSSyst.Reflection.AssemblyName.Typ'Class;
      attributes : access MSSyst.Reflection.Emit.CustomAttributeBuilder.Ref_arr;
      resourceFile : access MSSyst.String.Typ'Class);
   function Escape(
      str : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   function get_CacheSize return Integer;
   function get_Options(
      This : access Typ) return MSSyst.Text.RegularExpressions.RegexOptions.Valuetype;
   function get_RightToLeft(
      This : access Typ) return Standard.Boolean;
   function GetGroupNames(
      This : access Typ) return access MSSyst.String.Ref_arr;
   function GetGroupNumbers(
      This : access Typ) return MSIL_Types.Int32_Array;
   function GroupNameFromNumber(
      This : access Typ;
      i : Integer) return access MSSyst.String.Typ'Class;
   function GroupNumberFromName(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return Integer;
   function IsMatch(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      startat : Integer) return Standard.Boolean;
   function IsMatch(
      This : access Typ;
      input : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function IsMatch(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return Standard.Boolean;
   function IsMatch(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function Match(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      beginning : Integer;
      length : Integer) return access MSSyst.Text.RegularExpressions.Match.Typ'Class;
   function Match(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return access MSSyst.Text.RegularExpressions.Match.Typ'Class;
   function Match(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class) return access MSSyst.Text.RegularExpressions.Match.Typ'Class;
   function Match(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      startat : Integer) return access MSSyst.Text.RegularExpressions.Match.Typ'Class;
   function Match(
      This : access Typ;
      input : access MSSyst.String.Typ'Class) return access MSSyst.Text.RegularExpressions.Match.Typ'Class;
   function Matches(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      startat : Integer) return access MSSyst.Text.RegularExpressions.MatchCollection.Typ'Class;
   function Matches(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class) return access MSSyst.Text.RegularExpressions.MatchCollection.Typ'Class;
   function Matches(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return access MSSyst.Text.RegularExpressions.MatchCollection.Typ'Class;
   function Matches(
      This : access Typ;
      input : access MSSyst.String.Typ'Class) return access MSSyst.Text.RegularExpressions.MatchCollection.Typ'Class;
   function Replace(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      evaluator : access MSSyst.Text.RegularExpressions.MatchEvaluator.Typ'Class) return access MSSyst.String.Typ'Class;
   function Replace(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      evaluator : access MSSyst.Text.RegularExpressions.MatchEvaluator.Typ'Class;
      count : Integer) return access MSSyst.String.Typ'Class;
   function Replace(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      evaluator : access MSSyst.Text.RegularExpressions.MatchEvaluator.Typ'Class;
      count : Integer;
      startat : Integer) return access MSSyst.String.Typ'Class;
   function Replace(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      evaluator : access MSSyst.Text.RegularExpressions.MatchEvaluator.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return access MSSyst.String.Typ'Class;
   function Replace(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      replacement : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   function Replace(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      replacement : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   function Replace(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      replacement : access MSSyst.String.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return access MSSyst.String.Typ'Class;
   function Replace(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      evaluator : access MSSyst.Text.RegularExpressions.MatchEvaluator.Typ'Class) return access MSSyst.String.Typ'Class;
   function Replace(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      replacement : access MSSyst.String.Typ'Class;
      count : Integer;
      startat : Integer) return access MSSyst.String.Typ'Class;
   function Replace(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      replacement : access MSSyst.String.Typ'Class;
      count : Integer) return access MSSyst.String.Typ'Class;
   procedure set_CacheSize(
      value : Integer);
   function Split(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      count : Integer;
      startat : Integer) return access MSSyst.String.Ref_arr;
   function Split(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class;
      options : MSSyst.Text.RegularExpressions.RegexOptions.Valuetype) return access MSSyst.String.Ref_arr;
   function Split(
      input : access MSSyst.String.Typ'Class;
      pattern : access MSSyst.String.Typ'Class) return access MSSyst.String.Ref_arr;
   function Split(
      This : access Typ;
      input : access MSSyst.String.Typ'Class;
      count : Integer) return access MSSyst.String.Ref_arr;
   function Split(
      This : access Typ;
      input : access MSSyst.String.Typ'Class) return access MSSyst.String.Ref_arr;
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function Unescape(
      str : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Regex);
   pragma Import(MSIL,CompileToAssembly,"CompileToAssembly");
   pragma Import(MSIL,Escape,"Escape");
   pragma Import(MSIL,get_CacheSize,"get_CacheSize");
   pragma Import(MSIL,get_Options,"get_Options");
   pragma Import(MSIL,get_RightToLeft,"get_RightToLeft");
   pragma Import(MSIL,GetGroupNames,"GetGroupNames");
   pragma Import(MSIL,GetGroupNumbers,"GetGroupNumbers");
   pragma Import(MSIL,GroupNameFromNumber,"GroupNameFromNumber");
   pragma Import(MSIL,GroupNumberFromName,"GroupNumberFromName");
   pragma Import(MSIL,IsMatch,"IsMatch");
   pragma Import(MSIL,Match,"Match");
   pragma Import(MSIL,Matches,"Matches");
   pragma Import(MSIL,Replace,"Replace");
   pragma Import(MSIL,set_CacheSize,"set_CacheSize");
   pragma Import(MSIL,Split,"Split");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,Unescape,"Unescape");
end MSSyst.Text.RegularExpressions.Regex;
pragma Import(MSIL,MSSyst.Text.RegularExpressions.Regex,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Text.RegularExpressions.Regex");
