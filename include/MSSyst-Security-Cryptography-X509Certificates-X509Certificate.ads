-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Runtime.Serialization.IDeserializationCallback;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
limited with MSSyst.Security.Cryptography.X509Certificates.X509ContentType;
limited with MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags;
limited with MSSyst.Security.SecureString;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Cryptography.X509Certificates.X509Certificate is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.Serialization.IDeserializationCallback.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_X509Certificate(
      This : Ref := null) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      data : MSIL_Types.unsigned_int8_Arr) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : access MSSyst.String.Typ'Class) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : access MSSyst.Security.SecureString.Typ'Class) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : access MSSyst.String.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : access MSSyst.Security.SecureString.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class;
      password : access MSSyst.String.Typ'Class) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class;
      password : access MSSyst.Security.SecureString.Typ'Class) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class;
      password : access MSSyst.String.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class;
      password : access MSSyst.Security.SecureString.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      handle : MSIL_Types.native_int) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      cert : access MSSyst.Security.Cryptography.X509Certificates.X509Certificate.Typ'Class) return Ref;
   function new_X509Certificate(
      This : Ref := null;
      info : access MSSyst.Runtime.Serialization.SerializationInfo.Typ'Class;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype) return Ref;
   function CreateFromCertFile(
      filename : access MSSyst.String.Typ'Class) return access MSSyst.Security.Cryptography.X509Certificates.X509Certificate.Typ'Class;
   function CreateFromSignedFile(
      filename : access MSSyst.String.Typ'Class) return access MSSyst.Security.Cryptography.X509Certificates.X509Certificate.Typ'Class;
   function Equals(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function Equals(
      This : access Typ;
      other : access MSSyst.Security.Cryptography.X509Certificates.X509Certificate.Typ'Class) return Standard.Boolean;
   function Export(
      This : access Typ;
      contentType : MSSyst.Security.Cryptography.X509Certificates.X509ContentType.Valuetype) return MSIL_Types.unsigned_int8_Array;
   function Export(
      This : access Typ;
      contentType : MSSyst.Security.Cryptography.X509Certificates.X509ContentType.Valuetype;
      password : access MSSyst.String.Typ'Class) return MSIL_Types.unsigned_int8_Array;
   function Export(
      This : access Typ;
      contentType : MSSyst.Security.Cryptography.X509Certificates.X509ContentType.Valuetype;
      password : access MSSyst.Security.SecureString.Typ'Class) return MSIL_Types.unsigned_int8_Array;
   function get_Handle(
      This : access Typ) return MSIL_Types.native_int;
   function get_Issuer(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Subject(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetCertHash(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetCertHashString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetEffectiveDateString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetExpirationDateString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetFormat(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetIssuerName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetKeyAlgorithm(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetKeyAlgorithmParameters(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetKeyAlgorithmParametersString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetPublicKey(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetPublicKeyString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetRawCertData(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetRawCertDataString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function GetSerialNumber(
      This : access Typ) return MSIL_Types.unsigned_int8_Array;
   function GetSerialNumberString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   procedure Import(
      This : access Typ;
      fileName : access MSSyst.String.Typ'Class;
      password : access MSSyst.String.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype);
   procedure Import(
      This : access Typ;
      fileName : access MSSyst.String.Typ'Class;
      password : access MSSyst.Security.SecureString.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype);
   procedure Import(
      This : access Typ;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : access MSSyst.String.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype);
   procedure Import(
      This : access Typ;
      rawData : MSIL_Types.unsigned_int8_Arr);
   procedure Import(
      This : access Typ;
      fileName : access MSSyst.String.Typ'Class);
   procedure Import(
      This : access Typ;
      rawData : MSIL_Types.unsigned_int8_Arr;
      password : access MSSyst.Security.SecureString.Typ'Class;
      keyStorageFlags : MSSyst.Security.Cryptography.X509Certificates.X509KeyStorageFlags.Valuetype);
   procedure Reset(
      This : access Typ);
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function ToString(
      This : access Typ;
      fVerbose : Standard.Boolean) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_X509Certificate);
   pragma Import(MSIL,CreateFromCertFile,"CreateFromCertFile");
   pragma Import(MSIL,CreateFromSignedFile,"CreateFromSignedFile");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,Export,"Export");
   pragma Import(MSIL,get_Handle,"get_Handle");
   pragma Import(MSIL,get_Issuer,"get_Issuer");
   pragma Import(MSIL,get_Subject,"get_Subject");
   pragma Import(MSIL,GetCertHash,"GetCertHash");
   pragma Import(MSIL,GetCertHashString,"GetCertHashString");
   pragma Import(MSIL,GetEffectiveDateString,"GetEffectiveDateString");
   pragma Import(MSIL,GetExpirationDateString,"GetExpirationDateString");
   pragma Import(MSIL,GetFormat,"GetFormat");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetIssuerName,"GetIssuerName");
   pragma Import(MSIL,GetKeyAlgorithm,"GetKeyAlgorithm");
   pragma Import(MSIL,GetKeyAlgorithmParameters,"GetKeyAlgorithmParameters");
   pragma Import(MSIL,GetKeyAlgorithmParametersString,"GetKeyAlgorithmParametersString");
   pragma Import(MSIL,GetName,"GetName");
   pragma Import(MSIL,GetPublicKey,"GetPublicKey");
   pragma Import(MSIL,GetPublicKeyString,"GetPublicKeyString");
   pragma Import(MSIL,GetRawCertData,"GetRawCertData");
   pragma Import(MSIL,GetRawCertDataString,"GetRawCertDataString");
   pragma Import(MSIL,GetSerialNumber,"GetSerialNumber");
   pragma Import(MSIL,GetSerialNumberString,"GetSerialNumberString");
   pragma Import(MSIL,Import,"Import");
   pragma Import(MSIL,Reset,"Reset");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Security.Cryptography.X509Certificates.X509Certificate;
pragma Import(MSIL,MSSyst.Security.Cryptography.X509Certificates.X509Certificate,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Cryptography.X509Certificates.X509Certificate");
