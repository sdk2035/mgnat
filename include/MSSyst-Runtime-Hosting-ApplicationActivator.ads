-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.ActivationContext;
limited with MSSyst.Runtime.Remoting.ObjectHandle;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Runtime.Hosting.ApplicationActivator is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_ApplicationActivator(
      This : Ref := null) return Ref;
   function CreateInstance(
      This : access Typ;
      activationContext : access MSSyst.ActivationContext.Typ'Class;
      activationCustomData : access MSSyst.String.Ref_arr) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      This : access Typ;
      activationContext : access MSSyst.ActivationContext.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_ApplicationActivator);
   pragma Import(MSIL,CreateInstance,"CreateInstance");
end MSSyst.Runtime.Hosting.ApplicationActivator;
pragma Import(MSIL,MSSyst.Runtime.Hosting.ApplicationActivator,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Runtime.Hosting.ApplicationActivator");
