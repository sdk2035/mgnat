-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Attribute;
with MSSyst.Runtime.InteropServices.uAttribute;
limited with MSSyst.Security.IPermission;
with MSSyst.Security.Permissions.CodeAccessSecurityAttribute;
limited with MSSyst.Security.Permissions.ReflectionPermissionFlag;
limited with MSSyst.Security.Permissions.SecurityAction;
with MSSyst.Security.Permissions.SecurityAttribute;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Permissions.ReflectionPermissionAttribute is
   type Typ is new MSSyst.Security.Permissions.CodeAccessSecurityAttribute.Typ
         and MSSyst.Runtime.InteropServices.uAttribute.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_ReflectionPermissionAttribute(
      This : Ref := null;
      action : MSSyst.Security.Permissions.SecurityAction.Valuetype) return Ref;
   function CreatePermission(
      This : access Typ) return access MSSyst.Security.IPermission.Typ'Class;
   function get_Flags(
      This : access Typ) return MSSyst.Security.Permissions.ReflectionPermissionFlag.Valuetype;
   function get_MemberAccess(
      This : access Typ) return Standard.Boolean;
   function get_ReflectionEmit(
      This : access Typ) return Standard.Boolean;
   function get_TypeInformation(
      This : access Typ) return Standard.Boolean;
   procedure set_Flags(
      This : access Typ;
      value : MSSyst.Security.Permissions.ReflectionPermissionFlag.Valuetype);
   procedure set_MemberAccess(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_ReflectionEmit(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_TypeInformation(
      This : access Typ;
      value : Standard.Boolean);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_ReflectionPermissionAttribute);
   pragma Import(MSIL,CreatePermission,"CreatePermission");
   pragma Import(MSIL,get_Flags,"get_Flags");
   pragma Import(MSIL,get_MemberAccess,"get_MemberAccess");
   pragma Import(MSIL,get_ReflectionEmit,"get_ReflectionEmit");
   pragma Import(MSIL,get_TypeInformation,"get_TypeInformation");
   pragma Import(MSIL,set_Flags,"set_Flags");
   pragma Import(MSIL,set_MemberAccess,"set_MemberAccess");
   pragma Import(MSIL,set_ReflectionEmit,"set_ReflectionEmit");
   pragma Import(MSIL,set_TypeInformation,"set_TypeInformation");
end MSSyst.Security.Permissions.ReflectionPermissionAttribute;
pragma Import(MSIL,MSSyst.Security.Permissions.ReflectionPermissionAttribute,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Permissions.ReflectionPermissionAttribute");
