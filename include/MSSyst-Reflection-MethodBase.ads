-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.CallingConventions;
with MSSyst.Reflection.ICustomAttributeProvider;
with MSSyst.Reflection.MemberInfo;
limited with MSSyst.Reflection.MemberTypes;
limited with MSSyst.Reflection.MethodAttributes;
limited with MSSyst.Reflection.MethodBody;
limited with MSSyst.Reflection.MethodImplAttributes;
limited with MSSyst.Reflection.Module;
limited with MSSyst.Reflection.ParameterInfo;
with MSSyst.Runtime.InteropServices.uMemberInfo;
with MSSyst.Runtime.InteropServices.uMethodBase;
limited with MSSyst.RuntimeMethodHandle;
limited with MSSyst.RuntimeTypeHandle;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Reflection.MethodBase is
   type Typ is abstract new MSSyst.Reflection.MemberInfo.Typ
         and MSSyst.Reflection.ICustomAttributeProvider.Typ
         and MSSyst.Runtime.InteropServices.uMemberInfo.Typ
         and MSSyst.Runtime.InteropServices.uMethodBase.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_Attributes(
      This : access Typ) return MSSyst.Reflection.MethodAttributes.Valuetype;
   function get_CallingConvention(
      This : access Typ) return MSSyst.Reflection.CallingConventions.Valuetype;
   function get_ContainsGenericParameters(
      This : access Typ) return Standard.Boolean;
   function get_IsAbstract(
      This : access Typ) return Standard.Boolean;
   function get_IsAssembly(
      This : access Typ) return Standard.Boolean;
   function get_IsConstructor(
      This : access Typ) return Standard.Boolean;
   function get_IsFamily(
      This : access Typ) return Standard.Boolean;
   function get_IsFamilyAndAssembly(
      This : access Typ) return Standard.Boolean;
   function get_IsFamilyOrAssembly(
      This : access Typ) return Standard.Boolean;
   function get_IsFinal(
      This : access Typ) return Standard.Boolean;
   function get_IsGenericMethod(
      This : access Typ) return Standard.Boolean;
   function get_IsGenericMethodDefinition(
      This : access Typ) return Standard.Boolean;
   function get_IsHideBySig(
      This : access Typ) return Standard.Boolean;
   function get_IsPrivate(
      This : access Typ) return Standard.Boolean;
   function get_IsPublic(
      This : access Typ) return Standard.Boolean;
   function get_IsSpecialName(
      This : access Typ) return Standard.Boolean;
   function get_IsStatic(
      This : access Typ) return Standard.Boolean;
   function get_IsVirtual(
      This : access Typ) return Standard.Boolean;
   function get_MethodHandle(
      This : access Typ) return MSSyst.RuntimeMethodHandle.Valuetype;
   function GetCurrentMethod return access MSSyst.Reflection.MethodBase.Typ'Class;
   function GetGenericArguments(
      This : access Typ) return access MSSyst.Type_k.Ref_arr;
   function GetMethodBody(
      This : access Typ) return access MSSyst.Reflection.MethodBody.Typ'Class;
   function GetMethodFromHandle(
      handle : MSSyst.RuntimeMethodHandle.Valuetype) return access MSSyst.Reflection.MethodBase.Typ'Class;
   function GetMethodFromHandle(
      handle : MSSyst.RuntimeMethodHandle.Valuetype;
      declaringType : MSSyst.RuntimeTypeHandle.Valuetype) return access MSSyst.Reflection.MethodBase.Typ'Class;
   function GetMethodImplementationFlags(
      This : access Typ) return MSSyst.Reflection.MethodImplAttributes.Valuetype;
   function GetParameters(
      This : access Typ) return access MSSyst.Reflection.ParameterInfo.Ref_arr;
   function Invoke(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class;
      invokeAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      parameters : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Object.Typ'Class;
   function Invoke(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class;
      parameters : access MSSyst.Object.Ref_arr) return access MSSyst.Object.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,get_Attributes,"get_Attributes");
   pragma Import(MSIL,get_CallingConvention,"get_CallingConvention");
   pragma Import(MSIL,get_ContainsGenericParameters,"get_ContainsGenericParameters");
   pragma Import(MSIL,get_IsAbstract,"get_IsAbstract");
   pragma Import(MSIL,get_IsAssembly,"get_IsAssembly");
   pragma Import(MSIL,get_IsConstructor,"get_IsConstructor");
   pragma Import(MSIL,get_IsFamily,"get_IsFamily");
   pragma Import(MSIL,get_IsFamilyAndAssembly,"get_IsFamilyAndAssembly");
   pragma Import(MSIL,get_IsFamilyOrAssembly,"get_IsFamilyOrAssembly");
   pragma Import(MSIL,get_IsFinal,"get_IsFinal");
   pragma Import(MSIL,get_IsGenericMethod,"get_IsGenericMethod");
   pragma Import(MSIL,get_IsGenericMethodDefinition,"get_IsGenericMethodDefinition");
   pragma Import(MSIL,get_IsHideBySig,"get_IsHideBySig");
   pragma Import(MSIL,get_IsPrivate,"get_IsPrivate");
   pragma Import(MSIL,get_IsPublic,"get_IsPublic");
   pragma Import(MSIL,get_IsSpecialName,"get_IsSpecialName");
   pragma Import(MSIL,get_IsStatic,"get_IsStatic");
   pragma Import(MSIL,get_IsVirtual,"get_IsVirtual");
   pragma Import(MSIL,get_MethodHandle,"get_MethodHandle");
   pragma Import(MSIL,GetCurrentMethod,"GetCurrentMethod");
   pragma Import(MSIL,GetGenericArguments,"GetGenericArguments");
   pragma Import(MSIL,GetMethodBody,"GetMethodBody");
   pragma Import(MSIL,GetMethodFromHandle,"GetMethodFromHandle");
   pragma Import(MSIL,GetMethodImplementationFlags,"GetMethodImplementationFlags");
   pragma Import(MSIL,GetParameters,"GetParameters");
   pragma Import(MSIL,Invoke,"Invoke");
end MSSyst.Reflection.MethodBase;
pragma Import(MSIL,MSSyst.Reflection.MethodBase,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.MethodBase");
