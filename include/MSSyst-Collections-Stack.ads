-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Array_k;
with MSSyst.Collections.ICollection;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Collections.IEnumerator;
with MSSyst.ICloneable;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Collections.Stack is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
         and MSSyst.ICloneable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Stack(
      This : Ref := null) return Ref;
   function new_Stack(
      This : Ref := null;
      initialCapacity : Integer) return Ref;
   function new_Stack(
      This : Ref := null;
      col : access MSSyst.Collections.ICollection.Typ'Class) return Ref;
   procedure Clear(
      This : access Typ);
   function Clone(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function Contains(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   procedure CopyTo(
      This : access Typ;
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer);
   function get_Count(
      This : access Typ) return Integer;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_SyncRoot(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function GetEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function Peek(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function Pop(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   procedure Push(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class);
   function Synchronized_k(
      stack : access MSSyst.Collections.Stack.Typ'Class) return access MSSyst.Collections.Stack.Typ'Class;
   function ToArray(
      This : access Typ) return access MSSyst.Object.Ref_array;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Stack);
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Contains,"Contains");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,Peek,"Peek");
   pragma Import(MSIL,Pop,"Pop");
   pragma Import(MSIL,Push,"Push");
   pragma Import(MSIL,Synchronized_k,"Synchronized");
   pragma Import(MSIL,ToArray,"ToArray");
end MSSyst.Collections.Stack;
pragma Import(MSIL,MSSyst.Collections.Stack,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Collections.Stack");
