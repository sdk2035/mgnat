-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Drawing.Drawing2D.GraphicsPath;
limited with MSSyst.Drawing.Drawing2D.Matrix;
limited with MSSyst.Drawing.Drawing2D.RegionData;
limited with MSSyst.Drawing.Graphics;
limited with MSSyst.Drawing.PointF;
limited with MSSyst.Drawing.Point;
with MSSyst.Drawing.RectangleF;
limited with MSSyst.Drawing.Rectangle;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Drawing.Region is
   type Typ is new MSSyst.MarshalByRefObject.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Region(
      This : Ref := null) return Ref;
   function new_Region(
      This : Ref := null;
      rect : MSSyst.Drawing.RectangleF.Valuetype) return Ref;
   function new_Region(
      This : Ref := null;
      rect : MSSyst.Drawing.Rectangle.Valuetype) return Ref;
   function new_Region(
      This : Ref := null;
      path : access MSSyst.Drawing.Drawing2D.GraphicsPath.Typ'Class) return Ref;
   function new_Region(
      This : Ref := null;
      rgnData : access MSSyst.Drawing.Drawing2D.RegionData.Typ'Class) return Ref;
   function Clone(
      This : access Typ) return access MSSyst.Drawing.Region.Typ'Class;
   procedure Complement(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype);
   procedure Complement(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype);
   procedure Complement(
      This : access Typ;
      region : access MSSyst.Drawing.Region.Typ'Class);
   procedure Complement(
      This : access Typ;
      path : access MSSyst.Drawing.Drawing2D.GraphicsPath.Typ'Class);
   procedure Dispose(
      This : access Typ);
   function Equals(
      This : access Typ;
      region : access MSSyst.Drawing.Region.Typ'Class;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   procedure Exclude(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype);
   procedure Exclude(
      This : access Typ;
      region : access MSSyst.Drawing.Region.Typ'Class);
   procedure Exclude(
      This : access Typ;
      path : access MSSyst.Drawing.Drawing2D.GraphicsPath.Typ'Class);
   procedure Exclude(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype);
   function FromHrgn(
      hrgn : MSIL_Types.native_int) return access MSSyst.Drawing.Region.Typ'Class;
   function GetBounds(
      This : access Typ;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return MSSyst.Drawing.RectangleF.Valuetype;
   function GetHrgn(
      This : access Typ;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return MSIL_Types.native_int;
   function GetRegionData(
      This : access Typ) return access MSSyst.Drawing.Drawing2D.RegionData.Typ'Class;
   function GetRegionScans(
      This : access Typ;
      matrix : access MSSyst.Drawing.Drawing2D.Matrix.Typ'Class) return access MSSyst.Drawing.RectangleF.Valuetype_arr;
   procedure Intersect(
      This : access Typ;
      region : access MSSyst.Drawing.Region.Typ'Class);
   procedure Intersect(
      This : access Typ;
      path : access MSSyst.Drawing.Drawing2D.GraphicsPath.Typ'Class);
   procedure Intersect(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype);
   procedure Intersect(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype);
   function IsEmpty(
      This : access Typ;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsInfinite(
      This : access Typ;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      point : MSSyst.Drawing.PointF.Valuetype;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Float;
      y : Float;
      width : Float;
      height : Float) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      point : MSSyst.Drawing.Point.Valuetype) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      point : MSSyst.Drawing.Point.Valuetype;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Integer;
      y : Integer;
      width : Integer;
      height : Integer) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Float;
      y : Float;
      width : Float;
      height : Float;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Integer;
      y : Integer;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Float;
      y : Float;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Integer;
      y : Integer;
      width : Integer;
      height : Integer;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype;
      g : access MSSyst.Drawing.Graphics.Typ'Class) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      point : MSSyst.Drawing.PointF.Valuetype) return Standard.Boolean;
   function IsVisible(
      This : access Typ;
      x : Float;
      y : Float) return Standard.Boolean;
   procedure MakeEmpty(
      This : access Typ);
   procedure MakeInfinite(
      This : access Typ);
   procedure ReleaseHrgn(
      This : access Typ;
      regionHandle : MSIL_Types.native_int);
   procedure Transform(
      This : access Typ;
      matrix : access MSSyst.Drawing.Drawing2D.Matrix.Typ'Class);
   procedure Translate(
      This : access Typ;
      dx : Float;
      dy : Float);
   procedure Translate(
      This : access Typ;
      dx : Integer;
      dy : Integer);
   procedure Union(
      This : access Typ;
      path : access MSSyst.Drawing.Drawing2D.GraphicsPath.Typ'Class);
   procedure Union(
      This : access Typ;
      region : access MSSyst.Drawing.Region.Typ'Class);
   procedure Union(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype);
   procedure Union(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype);
   procedure Xor_k(
      This : access Typ;
      path : access MSSyst.Drawing.Drawing2D.GraphicsPath.Typ'Class);
   procedure Xor_k(
      This : access Typ;
      region : access MSSyst.Drawing.Region.Typ'Class);
   procedure Xor_k(
      This : access Typ;
      rect : MSSyst.Drawing.RectangleF.Valuetype);
   procedure Xor_k(
      This : access Typ;
      rect : MSSyst.Drawing.Rectangle.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Region);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Complement,"Complement");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,Exclude,"Exclude");
   pragma Import(MSIL,FromHrgn,"FromHrgn");
   pragma Import(MSIL,GetBounds,"GetBounds");
   pragma Import(MSIL,GetHrgn,"GetHrgn");
   pragma Import(MSIL,GetRegionData,"GetRegionData");
   pragma Import(MSIL,GetRegionScans,"GetRegionScans");
   pragma Import(MSIL,Intersect,"Intersect");
   pragma Import(MSIL,IsEmpty,"IsEmpty");
   pragma Import(MSIL,IsInfinite,"IsInfinite");
   pragma Import(MSIL,IsVisible,"IsVisible");
   pragma Import(MSIL,MakeEmpty,"MakeEmpty");
   pragma Import(MSIL,MakeInfinite,"MakeInfinite");
   pragma Import(MSIL,ReleaseHrgn,"ReleaseHrgn");
   pragma Import(MSIL,Transform,"Transform");
   pragma Import(MSIL,Translate,"Translate");
   pragma Import(MSIL,Union,"Union");
   pragma Import(MSIL,Xor_k,"Xor");
end MSSyst.Drawing.Region;
pragma Import(MSIL,MSSyst.Drawing.Region,
   ".ver 2:0:0:0 .publickeytoken=( b0 3f 5f 7f 11 d5 0a 3a )",
   "[System.Drawing]System.Drawing.Region");
