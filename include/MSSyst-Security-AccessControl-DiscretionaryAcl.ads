-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Collections.ICollection;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Guid;
limited with MSSyst.Security.AccessControl.AccessControlType;
limited with MSSyst.Security.AccessControl.AceEnumerator;
with MSSyst.Security.AccessControl.CommonAcl;
limited with MSSyst.Security.AccessControl.GenericAce;
with MSSyst.Security.AccessControl.GenericAcl;
limited with MSSyst.Security.AccessControl.InheritanceFlags;
limited with MSSyst.Security.AccessControl.ObjectAceFlags;
limited with MSSyst.Security.AccessControl.PropagationFlags;
limited with MSSyst.Security.AccessControl.RawAcl;
limited with MSSyst.Security.Principal.SecurityIdentifier;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.AccessControl.DiscretionaryAcl is
   type Typ is new MSSyst.Security.AccessControl.CommonAcl.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_DiscretionaryAcl(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      capacity : Integer) return Ref;
   function new_DiscretionaryAcl(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      revision : MSIL_Types.unsigned_int8;
      capacity : Integer) return Ref;
   function new_DiscretionaryAcl(
      This : Ref := null;
      isContainer : Standard.Boolean;
      isDS : Standard.Boolean;
      rawAcl : access MSSyst.Security.AccessControl.RawAcl.Typ'Class) return Ref;
   procedure AddAccess(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype;
      objectFlags : MSSyst.Security.AccessControl.ObjectAceFlags.Valuetype;
      objectType : MSSyst.Guid.Valuetype;
      inheritedObjectType : MSSyst.Guid.Valuetype);
   procedure AddAccess(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype);
   function RemoveAccess(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype;
      objectFlags : MSSyst.Security.AccessControl.ObjectAceFlags.Valuetype;
      objectType : MSSyst.Guid.Valuetype;
      inheritedObjectType : MSSyst.Guid.Valuetype) return Standard.Boolean;
   function RemoveAccess(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype) return Standard.Boolean;
   procedure RemoveAccessSpecific(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype;
      objectFlags : MSSyst.Security.AccessControl.ObjectAceFlags.Valuetype;
      objectType : MSSyst.Guid.Valuetype;
      inheritedObjectType : MSSyst.Guid.Valuetype);
   procedure RemoveAccessSpecific(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype);
   procedure SetAccess(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype);
   procedure SetAccess(
      This : access Typ;
      accessType : MSSyst.Security.AccessControl.AccessControlType.Valuetype;
      sid : access MSSyst.Security.Principal.SecurityIdentifier.Typ'Class;
      accessMask : Integer;
      inheritanceFlags : MSSyst.Security.AccessControl.InheritanceFlags.Valuetype;
      propagationFlags : MSSyst.Security.AccessControl.PropagationFlags.Valuetype;
      objectFlags : MSSyst.Security.AccessControl.ObjectAceFlags.Valuetype;
      objectType : MSSyst.Guid.Valuetype;
      inheritedObjectType : MSSyst.Guid.Valuetype);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_DiscretionaryAcl);
   pragma Import(MSIL,AddAccess,"AddAccess");
   pragma Import(MSIL,RemoveAccess,"RemoveAccess");
   pragma Import(MSIL,RemoveAccessSpecific,"RemoveAccessSpecific");
   pragma Import(MSIL,SetAccess,"SetAccess");
end MSSyst.Security.AccessControl.DiscretionaryAcl;
pragma Import(MSIL,MSSyst.Security.AccessControl.DiscretionaryAcl,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.AccessControl.DiscretionaryAcl");
