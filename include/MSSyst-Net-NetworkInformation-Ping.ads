-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
limited with MSSyst.ComponentModel.IContainer;
limited with MSSyst.ComponentModel.ISite;
limited with MSSyst.EventHandler;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Net.IPAddress;
limited with MSSyst.Net.NetworkInformation.PingCompletedEventHandler;
limited with MSSyst.Net.NetworkInformation.PingOptions;
limited with MSSyst.Net.NetworkInformation.PingReply;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Net.NetworkInformation.Ping is
   type Typ is new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Ping(
      This : Ref := null) return Ref;
   procedure add_PingCompleted(
      This : access Typ;
      value : access MSSyst.Net.NetworkInformation.PingCompletedEventHandler.Typ'Class);
   procedure remove_PingCompleted(
      This : access Typ;
      value : access MSSyst.Net.NetworkInformation.PingCompletedEventHandler.Typ'Class);
   function Send(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      timeout : Integer) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      timeout : Integer) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : access MSSyst.Net.NetworkInformation.PingOptions.Typ'Class) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : access MSSyst.Net.NetworkInformation.PingOptions.Typ'Class) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   function Send(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Net.NetworkInformation.PingReply.Typ'Class;
   procedure SendAsync(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      timeout : Integer;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      timeout : Integer;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      hostNameOrAddress : access MSSyst.String.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : access MSSyst.Net.NetworkInformation.PingOptions.Typ'Class;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      options : access MSSyst.Net.NetworkInformation.PingOptions.Typ'Class;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsync(
      This : access Typ;
      address : access MSSyst.Net.IPAddress.Typ'Class;
      timeout : Integer;
      buffer : MSIL_Types.unsigned_int8_Arr;
      userToken : access MSSyst.Object.Typ'Class);
   procedure SendAsyncCancel(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Ping);
   pragma Import(MSIL,add_PingCompleted,"add_PingCompleted");
   pragma Import(MSIL,remove_PingCompleted,"remove_PingCompleted");
   pragma Import(MSIL,Send,"Send");
   pragma Import(MSIL,SendAsync,"SendAsync");
   pragma Import(MSIL,SendAsyncCancel,"SendAsyncCancel");
end MSSyst.Net.NetworkInformation.Ping;
pragma Import(MSIL,MSSyst.Net.NetworkInformation.Ping,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.NetworkInformation.Ping");
