-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with Microsoft.Win32.SafeHandles.SafeWaitHandle;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.TimeSpan;
limited with MSSyst.Type_k;
package MSSyst.Threading.WaitHandle is
   type Typ is abstract new MSSyst.MarshalByRefObject.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   WaitTimeout : Integer;
   pragma Import(MSIL,WaitTimeout,"WaitTimeout");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Close(
      This : access Typ);
   function get_Handle(
      This : access Typ) return MSIL_Types.native_int;
   function get_SafeWaitHandle(
      This : access Typ) return access Microsoft.Win32.SafeHandles.SafeWaitHandle.Typ'Class;
   procedure set_Handle(
      This : access Typ;
      value : MSIL_Types.native_int);
   procedure set_SafeWaitHandle(
      This : access Typ;
      value : access Microsoft.Win32.SafeHandles.SafeWaitHandle.Typ'Class);
   function SignalAndWait(
      toSignal : access MSSyst.Threading.WaitHandle.Typ'Class;
      toWaitOn : access MSSyst.Threading.WaitHandle.Typ'Class) return Standard.Boolean;
   function SignalAndWait(
      toSignal : access MSSyst.Threading.WaitHandle.Typ'Class;
      toWaitOn : access MSSyst.Threading.WaitHandle.Typ'Class;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function SignalAndWait(
      toSignal : access MSSyst.Threading.WaitHandle.Typ'Class;
      toWaitOn : access MSSyst.Threading.WaitHandle.Typ'Class;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitAll(
      waitHandles : access MSSyst.Threading.WaitHandle.Ref_arr;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitAll(
      waitHandles : access MSSyst.Threading.WaitHandle.Ref_arr;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitAll(
      waitHandles : access MSSyst.Threading.WaitHandle.Ref_arr) return Standard.Boolean;
   function WaitAny(
      waitHandles : access MSSyst.Threading.WaitHandle.Ref_arr;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Integer;
   function WaitAny(
      waitHandles : access MSSyst.Threading.WaitHandle.Ref_arr;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Integer;
   function WaitAny(
      waitHandles : access MSSyst.Threading.WaitHandle.Ref_arr) return Integer;
   function WaitOne(
      This : access Typ;
      millisecondsTimeout : Integer;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitOne(
      This : access Typ;
      timeout : MSSyst.TimeSpan.Valuetype;
      exitContext : Standard.Boolean) return Standard.Boolean;
   function WaitOne(
      This : access Typ) return Standard.Boolean;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,get_Handle,"get_Handle");
   pragma Import(MSIL,get_SafeWaitHandle,"get_SafeWaitHandle");
   pragma Import(MSIL,set_Handle,"set_Handle");
   pragma Import(MSIL,set_SafeWaitHandle,"set_SafeWaitHandle");
   pragma Import(MSIL,SignalAndWait,"SignalAndWait");
   pragma Import(MSIL,WaitAll,"WaitAll");
   pragma Import(MSIL,WaitAny,"WaitAny");
   pragma Import(MSIL,WaitOne,"WaitOne");
end MSSyst.Threading.WaitHandle;
pragma Import(MSIL,MSSyst.Threading.WaitHandle,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Threading.WaitHandle");
