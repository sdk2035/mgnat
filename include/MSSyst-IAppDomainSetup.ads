-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.String;
package MSSyst.IAppDomainSetup is
   type Typ is interface;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_ApplicationBase(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_ApplicationName(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_CachePath(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_ConfigurationFile(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_DynamicBase(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_LicenseFile(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_PrivateBinPath(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_PrivateBinPathProbe(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_ShadowCopyDirectories(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_ShadowCopyFiles(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   procedure set_ApplicationBase(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_ApplicationName(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_CachePath(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_ConfigurationFile(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_DynamicBase(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_LicenseFile(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_PrivateBinPath(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_PrivateBinPathProbe(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_ShadowCopyDirectories(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
   procedure set_ShadowCopyFiles(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
private
   pragma Import(MSIL,get_ApplicationBase,"get_ApplicationBase");
   pragma Import(MSIL,get_ApplicationName,"get_ApplicationName");
   pragma Import(MSIL,get_CachePath,"get_CachePath");
   pragma Import(MSIL,get_ConfigurationFile,"get_ConfigurationFile");
   pragma Import(MSIL,get_DynamicBase,"get_DynamicBase");
   pragma Import(MSIL,get_LicenseFile,"get_LicenseFile");
   pragma Import(MSIL,get_PrivateBinPath,"get_PrivateBinPath");
   pragma Import(MSIL,get_PrivateBinPathProbe,"get_PrivateBinPathProbe");
   pragma Import(MSIL,get_ShadowCopyDirectories,"get_ShadowCopyDirectories");
   pragma Import(MSIL,get_ShadowCopyFiles,"get_ShadowCopyFiles");
   pragma Import(MSIL,set_ApplicationBase,"set_ApplicationBase");
   pragma Import(MSIL,set_ApplicationName,"set_ApplicationName");
   pragma Import(MSIL,set_CachePath,"set_CachePath");
   pragma Import(MSIL,set_ConfigurationFile,"set_ConfigurationFile");
   pragma Import(MSIL,set_DynamicBase,"set_DynamicBase");
   pragma Import(MSIL,set_LicenseFile,"set_LicenseFile");
   pragma Import(MSIL,set_PrivateBinPath,"set_PrivateBinPath");
   pragma Import(MSIL,set_PrivateBinPathProbe,"set_PrivateBinPathProbe");
   pragma Import(MSIL,set_ShadowCopyDirectories,"set_ShadowCopyDirectories");
   pragma Import(MSIL,set_ShadowCopyFiles,"set_ShadowCopyFiles");
end MSSyst.IAppDomainSetup;
pragma Import(MSIL,MSSyst.IAppDomainSetup,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.IAppDomainSetup");
