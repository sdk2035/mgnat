-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Decimal;
with MSSyst.IDisposable;
limited with MSSyst.IFormatProvider;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Text.Encoding;
limited with MSSyst.Type_k;
package MSSyst.IO.TextWriter is
   type Typ is abstract new MSSyst.MarshalByRefObject.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   Null_k : access MSSyst.IO.TextWriter.Typ'Class;
   pragma Import(MSIL,Null_k,"Null");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure Close(
      This : access Typ);
   procedure Dispose(
      This : access Typ);
   procedure Flush(
      This : access Typ);
   function get_Encoding(
      This : access Typ) return access MSSyst.Text.Encoding.Typ'Class;
   function get_FormatProvider(
      This : access Typ) return access MSSyst.IFormatProvider.Typ'Class;
   function get_NewLine(
      This : access Typ) return access MSSyst.String.Typ'Class;
   procedure set_NewLine(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   function Synchronized_k(
      writer : access MSSyst.IO.TextWriter.Typ'Class) return access MSSyst.IO.TextWriter.Typ'Class;
   procedure Write(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class);
   procedure Write(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class);
   procedure Write(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class;
      arg1 : access MSSyst.Object.Typ'Class);
   procedure Write(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg : access MSSyst.Object.Ref_arr);
   procedure Write(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class;
      arg1 : access MSSyst.Object.Typ'Class;
      arg2 : access MSSyst.Object.Typ'Class);
   procedure Write(
      This : access Typ;
      value : Standard.Boolean);
   procedure Write(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer);
   procedure Write(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr);
   procedure Write(
      This : access Typ;
      value : Long_Long_Integer);
   procedure Write(
      This : access Typ;
      value : MSIL_Types.Unsigned_Integer);
   procedure Write(
      This : access Typ;
      value : Integer);
   procedure Write(
      This : access Typ;
      value : Long_Float);
   procedure Write(
      This : access Typ;
      value : MSSyst.Decimal.Valuetype);
   procedure Write(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure Write(
      This : access Typ;
      value : Wide_Character);
   procedure Write(
      This : access Typ;
      value : MSIL_Types.Unsigned_Long_Long_Integer);
   procedure Write(
      This : access Typ;
      value : Float);
   procedure WriteLine(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class;
      arg1 : access MSSyst.Object.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg : access MSSyst.Object.Ref_arr);
   procedure WriteLine(
      This : access Typ;
      format : access MSSyst.String.Typ'Class;
      arg0 : access MSSyst.Object.Typ'Class;
      arg1 : access MSSyst.Object.Typ'Class;
      arg2 : access MSSyst.Object.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure WriteLine(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer);
   procedure WriteLine(
      This : access Typ;
      value : Standard.Boolean);
   procedure WriteLine(
      This : access Typ;
      value : Integer);
   procedure WriteLine(
      This : access Typ);
   procedure WriteLine(
      This : access Typ;
      value : Wide_Character);
   procedure WriteLine(
      This : access Typ;
      buffer : MSIL_Types.Char_Arr);
   procedure WriteLine(
      This : access Typ;
      value : Float);
   procedure WriteLine(
      This : access Typ;
      value : Long_Float);
   procedure WriteLine(
      This : access Typ;
      value : MSSyst.Decimal.Valuetype);
   procedure WriteLine(
      This : access Typ;
      value : MSIL_Types.Unsigned_Integer);
   procedure WriteLine(
      This : access Typ;
      value : Long_Long_Integer);
   procedure WriteLine(
      This : access Typ;
      value : MSIL_Types.Unsigned_Long_Long_Integer);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,Dispose,"Dispose");
   pragma Import(MSIL,Flush,"Flush");
   pragma Import(MSIL,get_Encoding,"get_Encoding");
   pragma Import(MSIL,get_FormatProvider,"get_FormatProvider");
   pragma Import(MSIL,get_NewLine,"get_NewLine");
   pragma Import(MSIL,set_NewLine,"set_NewLine");
   pragma Import(MSIL,Synchronized_k,"Synchronized");
   pragma Import(MSIL,Write,"Write");
   pragma Import(MSIL,WriteLine,"WriteLine");
end MSSyst.IO.TextWriter;
pragma Import(MSIL,MSSyst.IO.TextWriter,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.IO.TextWriter");
