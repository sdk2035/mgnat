-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Array_k;
with MSSyst.Collections.ICollection;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Collections.IEnumerator;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Security.Policy.Evidence is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Evidence(
      This : Ref := null) return Ref;
   function new_Evidence(
      This : Ref := null;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class) return Ref;
   function new_Evidence(
      This : Ref := null;
      hostEvidence : access MSSyst.Object.Ref_arr;
      assemblyEvidence : access MSSyst.Object.Ref_arr) return Ref;
   procedure AddAssembly(
      This : access Typ;
      id : access MSSyst.Object.Typ'Class);
   procedure AddHost(
      This : access Typ;
      id : access MSSyst.Object.Typ'Class);
   procedure Clear(
      This : access Typ);
   procedure CopyTo(
      This : access Typ;
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer);
   function Equals(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function get_Count(
      This : access Typ) return Integer;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_Locked(
      This : access Typ) return Standard.Boolean;
   function get_SyncRoot(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function GetAssemblyEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function GetEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetHostEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   procedure Merge(
      This : access Typ;
      evidence : access MSSyst.Security.Policy.Evidence.Typ'Class);
   procedure RemoveType(
      This : access Typ;
      t : access MSSyst.Type_k.Typ'Class);
   procedure set_Locked(
      This : access Typ;
      value : Standard.Boolean);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Evidence);
   pragma Import(MSIL,AddAssembly,"AddAssembly");
   pragma Import(MSIL,AddHost,"AddHost");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_Locked,"get_Locked");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetAssemblyEnumerator,"GetAssemblyEnumerator");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetHostEnumerator,"GetHostEnumerator");
   pragma Import(MSIL,Merge,"Merge");
   pragma Import(MSIL,RemoveType,"RemoveType");
   pragma Import(MSIL,set_Locked,"set_Locked");
end MSSyst.Security.Policy.Evidence;
pragma Import(MSIL,MSSyst.Security.Policy.Evidence,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Security.Policy.Evidence");
