-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.IO.FileStream;
limited with MSSyst.IO.Stream;
with MSSyst.Reflection.Assembly;
limited with MSSyst.Reflection.AssemblyName;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.ConstructorInfo;
limited with MSSyst.Reflection.Emit.CustomAttributeBuilder;
limited with MSSyst.Reflection.Emit.ModuleBuilder;
limited with MSSyst.Reflection.Emit.PEFileKinds;
with MSSyst.Reflection.ICustomAttributeProvider;
limited with MSSyst.Reflection.ImageFileMachine;
limited with MSSyst.Reflection.ManifestResourceInfo;
limited with MSSyst.Reflection.MethodInfo;
limited with MSSyst.Reflection.ModuleResolveEventHandler;
limited with MSSyst.Reflection.Module;
limited with MSSyst.Reflection.PortableExecutableKinds;
limited with MSSyst.Reflection.ResourceAttributes;
limited with MSSyst.Resources.IResourceWriter;
with MSSyst.Runtime.InteropServices.uAssembly;
with MSSyst.Runtime.InteropServices.uAssemblyBuilder;
with MSSyst.Runtime.Serialization.ISerializable;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
with MSSyst.Security.IEvidenceFactory;
limited with MSSyst.Security.Policy.Evidence;
limited with MSSyst.String;
limited with MSSyst.Type_k;
limited with MSSyst.Version;
package MSSyst.Reflection.Emit.AssemblyBuilder is
   type Typ is new MSSyst.Reflection.Assembly.Typ
         and MSSyst.Runtime.InteropServices.uAssembly.Typ
         and MSSyst.Security.IEvidenceFactory.Typ
         and MSSyst.Reflection.ICustomAttributeProvider.Typ
         and MSSyst.Runtime.Serialization.ISerializable.Typ
         and MSSyst.Runtime.InteropServices.uAssemblyBuilder.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure AddResourceFile(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      fileName : access MSSyst.String.Typ'Class);
   procedure AddResourceFile(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      fileName : access MSSyst.String.Typ'Class;
      attribute : MSSyst.Reflection.ResourceAttributes.Valuetype);
   function DefineDynamicModule(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      fileName : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Emit.ModuleBuilder.Typ'Class;
   function DefineDynamicModule(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      fileName : access MSSyst.String.Typ'Class;
      emitSymbolInfo : Standard.Boolean) return access MSSyst.Reflection.Emit.ModuleBuilder.Typ'Class;
   function DefineDynamicModule(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Emit.ModuleBuilder.Typ'Class;
   function DefineDynamicModule(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      emitSymbolInfo : Standard.Boolean) return access MSSyst.Reflection.Emit.ModuleBuilder.Typ'Class;
   function DefineResource(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      description : access MSSyst.String.Typ'Class;
      fileName : access MSSyst.String.Typ'Class;
      attribute : MSSyst.Reflection.ResourceAttributes.Valuetype) return access MSSyst.Resources.IResourceWriter.Typ'Class;
   function DefineResource(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      description : access MSSyst.String.Typ'Class;
      fileName : access MSSyst.String.Typ'Class) return access MSSyst.Resources.IResourceWriter.Typ'Class;
   procedure DefineUnmanagedResource(
      This : access Typ;
      resource : MSIL_Types.unsigned_int8_Arr);
   procedure DefineUnmanagedResource(
      This : access Typ;
      resourceFileName : access MSSyst.String.Typ'Class);
   procedure DefineVersionInfoResource(
      This : access Typ);
   procedure DefineVersionInfoResource(
      This : access Typ;
      product : access MSSyst.String.Typ'Class;
      productVersion : access MSSyst.String.Typ'Class;
      company : access MSSyst.String.Typ'Class;
      copyright : access MSSyst.String.Typ'Class;
      trademark : access MSSyst.String.Typ'Class);
   function get_CodeBase(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_EntryPoint(
      This : access Typ) return access MSSyst.Reflection.MethodInfo.Typ'Class;
   function get_ImageRuntimeVersion(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Location(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_ReflectionOnly(
      This : access Typ) return Standard.Boolean;
   function GetDynamicModule(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Emit.ModuleBuilder.Typ'Class;
   function GetExportedTypes(
      This : access Typ) return access MSSyst.Type_k.Ref_arr;
   function GetFile(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.FileStream.Typ'Class;
   function GetFiles(
      This : access Typ;
      getResourceModules : Standard.Boolean) return access MSSyst.IO.FileStream.Ref_arr;
   function GetManifestResourceInfo(
      This : access Typ;
      resourceName : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.ManifestResourceInfo.Typ'Class;
   function GetManifestResourceNames(
      This : access Typ) return access MSSyst.String.Ref_arr;
   function GetManifestResourceStream(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.Stream.Typ'Class;
   function GetManifestResourceStream(
      This : access Typ;
      type_k : access MSSyst.Type_k.Typ'Class;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.Stream.Typ'Class;
   procedure Save(
      This : access Typ;
      assemblyFileName : access MSSyst.String.Typ'Class);
   procedure Save(
      This : access Typ;
      assemblyFileName : access MSSyst.String.Typ'Class;
      portableExecutableKind : MSSyst.Reflection.PortableExecutableKinds.Valuetype;
      imageFileMachine : MSSyst.Reflection.ImageFileMachine.Valuetype);
   procedure SetCustomAttribute(
      This : access Typ;
      con : access MSSyst.Reflection.ConstructorInfo.Typ'Class;
      binaryAttribute : MSIL_Types.unsigned_int8_Arr);
   procedure SetCustomAttribute(
      This : access Typ;
      customBuilder : access MSSyst.Reflection.Emit.CustomAttributeBuilder.Typ'Class);
   procedure SetEntryPoint(
      This : access Typ;
      entryMethod : access MSSyst.Reflection.MethodInfo.Typ'Class;
      fileKind : MSSyst.Reflection.Emit.PEFileKinds.Valuetype);
   procedure SetEntryPoint(
      This : access Typ;
      entryMethod : access MSSyst.Reflection.MethodInfo.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,AddResourceFile,"AddResourceFile");
   pragma Import(MSIL,DefineDynamicModule,"DefineDynamicModule");
   pragma Import(MSIL,DefineResource,"DefineResource");
   pragma Import(MSIL,DefineUnmanagedResource,"DefineUnmanagedResource");
   pragma Import(MSIL,DefineVersionInfoResource,"DefineVersionInfoResource");
   pragma Import(MSIL,get_CodeBase,"get_CodeBase");
   pragma Import(MSIL,get_EntryPoint,"get_EntryPoint");
   pragma Import(MSIL,get_ImageRuntimeVersion,"get_ImageRuntimeVersion");
   pragma Import(MSIL,get_Location,"get_Location");
   pragma Import(MSIL,get_ReflectionOnly,"get_ReflectionOnly");
   pragma Import(MSIL,GetDynamicModule,"GetDynamicModule");
   pragma Import(MSIL,GetExportedTypes,"GetExportedTypes");
   pragma Import(MSIL,GetFile,"GetFile");
   pragma Import(MSIL,GetFiles,"GetFiles");
   pragma Import(MSIL,GetManifestResourceInfo,"GetManifestResourceInfo");
   pragma Import(MSIL,GetManifestResourceNames,"GetManifestResourceNames");
   pragma Import(MSIL,GetManifestResourceStream,"GetManifestResourceStream");
   pragma Import(MSIL,Save,"Save");
   pragma Import(MSIL,SetCustomAttribute,"SetCustomAttribute");
   pragma Import(MSIL,SetEntryPoint,"SetEntryPoint");
end MSSyst.Reflection.Emit.AssemblyBuilder;
pragma Import(MSIL,MSSyst.Reflection.Emit.AssemblyBuilder,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.Emit.AssemblyBuilder");
