-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.AsyncCallback;
limited with MSSyst.IAsyncResult;
with MSSyst.IDisposable;
limited with MSSyst.IO.FileAccess;
limited with MSSyst.IO.SeekOrigin;
with MSSyst.IO.Stream;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Net.Sockets.Socket;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Net.Sockets.NetworkStream is
   type Typ is new MSSyst.IO.Stream.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_NetworkStream(
      This : Ref := null;
      socket : access MSSyst.Net.Sockets.Socket.Typ'Class) return Ref;
   function new_NetworkStream(
      This : Ref := null;
      socket : access MSSyst.Net.Sockets.Socket.Typ'Class;
      ownsSocket : Standard.Boolean) return Ref;
   function new_NetworkStream(
      This : Ref := null;
      socket : access MSSyst.Net.Sockets.Socket.Typ'Class;
      access_k : MSSyst.IO.FileAccess.Valuetype) return Ref;
   function new_NetworkStream(
      This : Ref := null;
      socket : access MSSyst.Net.Sockets.Socket.Typ'Class;
      access_k : MSSyst.IO.FileAccess.Valuetype;
      ownsSocket : Standard.Boolean) return Ref;
   function BeginRead(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      size : Integer;
      callback : access MSSyst.AsyncCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return access MSSyst.IAsyncResult.Typ'Class;
   function BeginWrite(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      size : Integer;
      callback : access MSSyst.AsyncCallback.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return access MSSyst.IAsyncResult.Typ'Class;
   procedure Close(
      This : access Typ;
      timeout : Integer);
   function EndRead(
      This : access Typ;
      asyncResult : access MSSyst.IAsyncResult.Typ'Class) return Integer;
   procedure EndWrite(
      This : access Typ;
      asyncResult : access MSSyst.IAsyncResult.Typ'Class);
   procedure Flush(
      This : access Typ);
   function get_CanRead(
      This : access Typ) return Standard.Boolean;
   function get_CanSeek(
      This : access Typ) return Standard.Boolean;
   function get_CanTimeout(
      This : access Typ) return Standard.Boolean;
   function get_CanWrite(
      This : access Typ) return Standard.Boolean;
   function get_DataAvailable(
      This : access Typ) return Standard.Boolean;
   function get_Length(
      This : access Typ) return Long_Long_Integer;
   function get_Position(
      This : access Typ) return Long_Long_Integer;
   function get_ReadTimeout(
      This : access Typ) return Integer;
   function get_WriteTimeout(
      This : access Typ) return Integer;
   function Read(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      size : Integer) return Integer;
   function Seek(
      This : access Typ;
      offset : Long_Long_Integer;
      origin : MSSyst.IO.SeekOrigin.Valuetype) return Long_Long_Integer;
   procedure set_Position(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_ReadTimeout(
      This : access Typ;
      value : Integer);
   procedure set_WriteTimeout(
      This : access Typ;
      value : Integer);
   procedure SetLength(
      This : access Typ;
      value : Long_Long_Integer);
   procedure Write(
      This : access Typ;
      buffer : MSIL_Types.unsigned_int8_Arr;
      offset : Integer;
      size : Integer);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_NetworkStream);
   pragma Import(MSIL,BeginRead,"BeginRead");
   pragma Import(MSIL,BeginWrite,"BeginWrite");
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,EndRead,"EndRead");
   pragma Import(MSIL,EndWrite,"EndWrite");
   pragma Import(MSIL,Flush,"Flush");
   pragma Import(MSIL,get_CanRead,"get_CanRead");
   pragma Import(MSIL,get_CanSeek,"get_CanSeek");
   pragma Import(MSIL,get_CanTimeout,"get_CanTimeout");
   pragma Import(MSIL,get_CanWrite,"get_CanWrite");
   pragma Import(MSIL,get_DataAvailable,"get_DataAvailable");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,get_Position,"get_Position");
   pragma Import(MSIL,get_ReadTimeout,"get_ReadTimeout");
   pragma Import(MSIL,get_WriteTimeout,"get_WriteTimeout");
   pragma Import(MSIL,Read,"Read");
   pragma Import(MSIL,Seek,"Seek");
   pragma Import(MSIL,set_Position,"set_Position");
   pragma Import(MSIL,set_ReadTimeout,"set_ReadTimeout");
   pragma Import(MSIL,set_WriteTimeout,"set_WriteTimeout");
   pragma Import(MSIL,SetLength,"SetLength");
   pragma Import(MSIL,Write,"Write");
end MSSyst.Net.Sockets.NetworkStream;
pragma Import(MSIL,MSSyst.Net.Sockets.NetworkStream,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Sockets.NetworkStream");
