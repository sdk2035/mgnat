-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Net.ICertificatePolicy;
limited with MSSyst.Net.IWebProxy;
limited with MSSyst.Net.Security.RemoteCertificateValidationCallback;
limited with MSSyst.Net.SecurityProtocolType;
limited with MSSyst.Net.ServicePoint;
limited with MSSyst.String;
limited with MSSyst.Type_k;
limited with MSSyst.Uri;
package MSSyst.Net.ServicePointManager is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   DefaultNonPersistentConnectionLimit : Integer;
   pragma Import(MSIL,DefaultNonPersistentConnectionLimit,"DefaultNonPersistentConnectionLimit");
   DefaultPersistentConnectionLimit : Integer;
   pragma Import(MSIL,DefaultPersistentConnectionLimit,"DefaultPersistentConnectionLimit");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function FindServicePoint(
      address : access MSSyst.Uri.Typ'Class) return access MSSyst.Net.ServicePoint.Typ'Class;
   function FindServicePoint(
      uriString : access MSSyst.String.Typ'Class;
      proxy : access MSSyst.Net.IWebProxy.Typ'Class) return access MSSyst.Net.ServicePoint.Typ'Class;
   function FindServicePoint(
      address : access MSSyst.Uri.Typ'Class;
      proxy : access MSSyst.Net.IWebProxy.Typ'Class) return access MSSyst.Net.ServicePoint.Typ'Class;
   function get_CertificatePolicy return access MSSyst.Net.ICertificatePolicy.Typ'Class;
   function get_CheckCertificateRevocationList return Standard.Boolean;
   function get_DefaultConnectionLimit return Integer;
   function get_DnsRefreshTimeout return Integer;
   function get_EnableDnsRoundRobin return Standard.Boolean;
   function get_Expect100Continue return Standard.Boolean;
   function get_MaxServicePointIdleTime return Integer;
   function get_MaxServicePoints return Integer;
   function get_SecurityProtocol return MSSyst.Net.SecurityProtocolType.Valuetype;
   function get_ServerCertificateValidationCallback return access MSSyst.Net.Security.RemoteCertificateValidationCallback.Typ'Class;
   function get_UseNagleAlgorithm return Standard.Boolean;
   procedure set_CertificatePolicy(
      value : access MSSyst.Net.ICertificatePolicy.Typ'Class);
   procedure set_CheckCertificateRevocationList(
      value : Standard.Boolean);
   procedure set_DefaultConnectionLimit(
      value : Integer);
   procedure set_DnsRefreshTimeout(
      value : Integer);
   procedure set_EnableDnsRoundRobin(
      value : Standard.Boolean);
   procedure set_Expect100Continue(
      value : Standard.Boolean);
   procedure set_MaxServicePointIdleTime(
      value : Integer);
   procedure set_MaxServicePoints(
      value : Integer);
   procedure set_SecurityProtocol(
      value : MSSyst.Net.SecurityProtocolType.Valuetype);
   procedure set_ServerCertificateValidationCallback(
      value : access MSSyst.Net.Security.RemoteCertificateValidationCallback.Typ'Class);
   procedure set_UseNagleAlgorithm(
      value : Standard.Boolean);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,FindServicePoint,"FindServicePoint");
   pragma Import(MSIL,get_CertificatePolicy,"get_CertificatePolicy");
   pragma Import(MSIL,get_CheckCertificateRevocationList,"get_CheckCertificateRevocationList");
   pragma Import(MSIL,get_DefaultConnectionLimit,"get_DefaultConnectionLimit");
   pragma Import(MSIL,get_DnsRefreshTimeout,"get_DnsRefreshTimeout");
   pragma Import(MSIL,get_EnableDnsRoundRobin,"get_EnableDnsRoundRobin");
   pragma Import(MSIL,get_Expect100Continue,"get_Expect100Continue");
   pragma Import(MSIL,get_MaxServicePointIdleTime,"get_MaxServicePointIdleTime");
   pragma Import(MSIL,get_MaxServicePoints,"get_MaxServicePoints");
   pragma Import(MSIL,get_SecurityProtocol,"get_SecurityProtocol");
   pragma Import(MSIL,get_ServerCertificateValidationCallback,"get_ServerCertificateValidationCallback");
   pragma Import(MSIL,get_UseNagleAlgorithm,"get_UseNagleAlgorithm");
   pragma Import(MSIL,set_CertificatePolicy,"set_CertificatePolicy");
   pragma Import(MSIL,set_CheckCertificateRevocationList,"set_CheckCertificateRevocationList");
   pragma Import(MSIL,set_DefaultConnectionLimit,"set_DefaultConnectionLimit");
   pragma Import(MSIL,set_DnsRefreshTimeout,"set_DnsRefreshTimeout");
   pragma Import(MSIL,set_EnableDnsRoundRobin,"set_EnableDnsRoundRobin");
   pragma Import(MSIL,set_Expect100Continue,"set_Expect100Continue");
   pragma Import(MSIL,set_MaxServicePointIdleTime,"set_MaxServicePointIdleTime");
   pragma Import(MSIL,set_MaxServicePoints,"set_MaxServicePoints");
   pragma Import(MSIL,set_SecurityProtocol,"set_SecurityProtocol");
   pragma Import(MSIL,set_ServerCertificateValidationCallback,"set_ServerCertificateValidationCallback");
   pragma Import(MSIL,set_UseNagleAlgorithm,"set_UseNagleAlgorithm");
end MSSyst.Net.ServicePointManager;
pragma Import(MSIL,MSSyst.Net.ServicePointManager,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.ServicePointManager");
