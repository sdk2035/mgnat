-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.AppDomain;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.LocalDataStoreSlot;
with MSSyst.Runtime.ConstrainedExecution.CriticalFinalizerObject;
with MSSyst.Runtime.InteropServices.uThread;
limited with MSSyst.Runtime.Remoting.Contexts.Context;
with MSSyst.SByte;
limited with MSSyst.Security.Principal.IPrincipal;
limited with MSSyst.String;
limited with MSSyst.Threading.ApartmentState;
limited with MSSyst.Threading.CompressedStack;
limited with MSSyst.Threading.ExecutionContext;
limited with MSSyst.Threading.ParameterizedThreadStart;
limited with MSSyst.Threading.ThreadPriority;
limited with MSSyst.Threading.ThreadStart;
limited with MSSyst.Threading.ThreadState;
limited with MSSyst.TimeSpan;
limited with MSSyst.Type_k;
with MSSyst.UIntPtr;
package MSSyst.Threading.Thread is
   type Typ is new MSSyst.Runtime.ConstrainedExecution.CriticalFinalizerObject.Typ
         and MSSyst.Runtime.InteropServices.uThread.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Thread(
      This : Ref := null;
      start : access MSSyst.Threading.ThreadStart.Typ'Class) return Ref;
   function new_Thread(
      This : Ref := null;
      start : access MSSyst.Threading.ThreadStart.Typ'Class;
      maxStackSize : Integer) return Ref;
   function new_Thread(
      This : Ref := null;
      start : access MSSyst.Threading.ParameterizedThreadStart.Typ'Class) return Ref;
   function new_Thread(
      This : Ref := null;
      start : access MSSyst.Threading.ParameterizedThreadStart.Typ'Class;
      maxStackSize : Integer) return Ref;
   procedure Abort_k(
      This : access Typ;
      stateInfo : access MSSyst.Object.Typ'Class);
   procedure Abort_k(
      This : access Typ);
   function AllocateDataSlot return access MSSyst.LocalDataStoreSlot.Typ'Class;
   function AllocateNamedDataSlot(
      name : access MSSyst.String.Typ'Class) return access MSSyst.LocalDataStoreSlot.Typ'Class;
   procedure BeginCriticalRegion;
   procedure BeginThreadAffinity;
   procedure EndCriticalRegion;
   procedure EndThreadAffinity;
   procedure FreeNamedDataSlot(
      name : access MSSyst.String.Typ'Class);
   function get_ApartmentState(
      This : access Typ) return MSSyst.Threading.ApartmentState.Valuetype;
   function get_CurrentContext return access MSSyst.Runtime.Remoting.Contexts.Context.Typ'Class;
   function get_CurrentCulture(
      This : access Typ) return access MSSyst.Globalization.CultureInfo.Typ'Class;
   function get_CurrentPrincipal return access MSSyst.Security.Principal.IPrincipal.Typ'Class;
   function get_CurrentThread return access MSSyst.Threading.Thread.Typ'Class;
   function get_CurrentUICulture(
      This : access Typ) return access MSSyst.Globalization.CultureInfo.Typ'Class;
   function get_ExecutionContext(
      This : access Typ) return access MSSyst.Threading.ExecutionContext.Typ'Class;
   function get_IsAlive(
      This : access Typ) return Standard.Boolean;
   function get_IsBackground(
      This : access Typ) return Standard.Boolean;
   function get_IsThreadPoolThread(
      This : access Typ) return Standard.Boolean;
   function get_ManagedThreadId(
      This : access Typ) return Integer;
   function get_Name(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_Priority(
      This : access Typ) return MSSyst.Threading.ThreadPriority.Valuetype;
   function get_ThreadState(
      This : access Typ) return MSSyst.Threading.ThreadState.Valuetype;
   function GetApartmentState(
      This : access Typ) return MSSyst.Threading.ApartmentState.Valuetype;
   function GetCompressedStack(
      This : access Typ) return access MSSyst.Threading.CompressedStack.Typ'Class;
   function GetData(
      slot : access MSSyst.LocalDataStoreSlot.Typ'Class) return access MSSyst.Object.Typ'Class;
   function GetDomain return access MSSyst.AppDomain.Typ'Class;
   function GetDomainID return Integer;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetNamedDataSlot(
      name : access MSSyst.String.Typ'Class) return access MSSyst.LocalDataStoreSlot.Typ'Class;
   procedure Interrupt(
      This : access Typ);
   function Join(
      This : access Typ;
      millisecondsTimeout : Integer) return Standard.Boolean;
   procedure Join(
      This : access Typ);
   function Join(
      This : access Typ;
      timeout : MSSyst.TimeSpan.Valuetype) return Standard.Boolean;
   procedure MemoryBarrier;
   procedure ResetAbort;
   procedure Resume(
      This : access Typ);
   procedure set_ApartmentState(
      This : access Typ;
      value : MSSyst.Threading.ApartmentState.Valuetype);
   procedure set_CurrentCulture(
      This : access Typ;
      value : access MSSyst.Globalization.CultureInfo.Typ'Class);
   procedure set_CurrentPrincipal(
      value : access MSSyst.Security.Principal.IPrincipal.Typ'Class);
   procedure set_CurrentUICulture(
      This : access Typ;
      value : access MSSyst.Globalization.CultureInfo.Typ'Class);
   procedure set_IsBackground(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Name(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_Priority(
      This : access Typ;
      value : MSSyst.Threading.ThreadPriority.Valuetype);
   procedure SetApartmentState(
      This : access Typ;
      state : MSSyst.Threading.ApartmentState.Valuetype);
   procedure SetCompressedStack(
      This : access Typ;
      stack : access MSSyst.Threading.CompressedStack.Typ'Class);
   procedure SetData(
      slot : access MSSyst.LocalDataStoreSlot.Typ'Class;
      data : access MSSyst.Object.Typ'Class);
   procedure Sleep(
      millisecondsTimeout : Integer);
   procedure Sleep(
      timeout : MSSyst.TimeSpan.Valuetype);
   procedure SpinWait(
      iterations : Integer);
   procedure Start(
      This : access Typ;
      parameter : access MSSyst.Object.Typ'Class);
   procedure Start(
      This : access Typ);
   procedure Suspend(
      This : access Typ);
   function TrySetApartmentState(
      This : access Typ;
      state : MSSyst.Threading.ApartmentState.Valuetype) return Standard.Boolean;
   function VolatileRead(
      address : MSIL_Types.Unsigned_Long_Long_Integer_addrof) return MSIL_Types.Unsigned_Long_Long_Integer;
   function VolatileRead(
      address : access MSSyst.UIntPtr.Valuetype) return MSSyst.UIntPtr.Valuetype;
   function VolatileRead(
      address : MSIL_Types.Float32_addrof) return Float;
   function VolatileRead(
      address : access MSSyst.Object.Ref) return access MSSyst.Object.Typ'Class;
   function VolatileRead(
      address : MSIL_Types.Float64_addrof) return Long_Float;
   function VolatileRead(
      address : MSIL_Types.unsigned_int8_addrof) return MSIL_Types.unsigned_int8;
   function VolatileRead(
      address : MSIL_Types.Int64_addrof) return Long_Long_Integer;
   function VolatileRead(
      address : MSIL_Types.Int32_addrof) return Integer;
   function VolatileRead(
      address : MSIL_Types.Int16_addrof) return MSIL_Types.int16;
   function VolatileRead(
      address : MSIL_Types.Unsigned_Integer_addrof) return MSIL_Types.Unsigned_Integer;
   function VolatileRead(
      address : MSIL_Types.native_int_addrof) return MSIL_Types.native_int;
   function VolatileRead(
      address : access MSSyst.SByte.Valuetype) return MSSyst.SByte.Valuetype;
   function VolatileRead(
      address : MSIL_Types.unsigned_int16_addrof) return MSIL_Types.unsigned_int16;
   procedure VolatileWrite(
      address : MSIL_Types.Unsigned_Long_Long_Integer_addrof;
      value : MSIL_Types.Unsigned_Long_Long_Integer);
   procedure VolatileWrite(
      address : access MSSyst.UIntPtr.Valuetype;
      value : MSSyst.UIntPtr.Valuetype);
   procedure VolatileWrite(
      address : MSIL_Types.Float32_addrof;
      value : Float);
   procedure VolatileWrite(
      address : access MSSyst.Object.Ref;
      value : access MSSyst.Object.Typ'Class);
   procedure VolatileWrite(
      address : MSIL_Types.Float64_addrof;
      value : Long_Float);
   procedure VolatileWrite(
      address : MSIL_Types.Int32_addrof;
      value : Integer);
   procedure VolatileWrite(
      address : MSIL_Types.Int64_addrof;
      value : Long_Long_Integer);
   procedure VolatileWrite(
      address : MSIL_Types.unsigned_int8_addrof;
      value : MSIL_Types.unsigned_int8);
   procedure VolatileWrite(
      address : MSIL_Types.Int16_addrof;
      value : MSIL_Types.int16);
   procedure VolatileWrite(
      address : MSIL_Types.Unsigned_Integer_addrof;
      value : MSIL_Types.Unsigned_Integer);
   procedure VolatileWrite(
      address : MSIL_Types.native_int_addrof;
      value : MSIL_Types.native_int);
   procedure VolatileWrite(
      address : access MSSyst.SByte.Valuetype;
      value : MSSyst.SByte.Valuetype);
   procedure VolatileWrite(
      address : MSIL_Types.unsigned_int16_addrof;
      value : MSIL_Types.unsigned_int16);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Thread);
   pragma Import(MSIL,Abort_k,"Abort");
   pragma Import(MSIL,AllocateDataSlot,"AllocateDataSlot");
   pragma Import(MSIL,AllocateNamedDataSlot,"AllocateNamedDataSlot");
   pragma Import(MSIL,BeginCriticalRegion,"BeginCriticalRegion");
   pragma Import(MSIL,BeginThreadAffinity,"BeginThreadAffinity");
   pragma Import(MSIL,EndCriticalRegion,"EndCriticalRegion");
   pragma Import(MSIL,EndThreadAffinity,"EndThreadAffinity");
   pragma Import(MSIL,FreeNamedDataSlot,"FreeNamedDataSlot");
   pragma Import(MSIL,get_ApartmentState,"get_ApartmentState");
   pragma Import(MSIL,get_CurrentContext,"get_CurrentContext");
   pragma Import(MSIL,get_CurrentCulture,"get_CurrentCulture");
   pragma Import(MSIL,get_CurrentPrincipal,"get_CurrentPrincipal");
   pragma Import(MSIL,get_CurrentThread,"get_CurrentThread");
   pragma Import(MSIL,get_CurrentUICulture,"get_CurrentUICulture");
   pragma Import(MSIL,get_ExecutionContext,"get_ExecutionContext");
   pragma Import(MSIL,get_IsAlive,"get_IsAlive");
   pragma Import(MSIL,get_IsBackground,"get_IsBackground");
   pragma Import(MSIL,get_IsThreadPoolThread,"get_IsThreadPoolThread");
   pragma Import(MSIL,get_ManagedThreadId,"get_ManagedThreadId");
   pragma Import(MSIL,get_Name,"get_Name");
   pragma Import(MSIL,get_Priority,"get_Priority");
   pragma Import(MSIL,get_ThreadState,"get_ThreadState");
   pragma Import(MSIL,GetApartmentState,"GetApartmentState");
   pragma Import(MSIL,GetCompressedStack,"GetCompressedStack");
   pragma Import(MSIL,GetData,"GetData");
   pragma Import(MSIL,GetDomain,"GetDomain");
   pragma Import(MSIL,GetDomainID,"GetDomainID");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetNamedDataSlot,"GetNamedDataSlot");
   pragma Import(MSIL,Interrupt,"Interrupt");
   pragma Import(MSIL,Join,"Join");
   pragma Import(MSIL,MemoryBarrier,"MemoryBarrier");
   pragma Import(MSIL,ResetAbort,"ResetAbort");
   pragma Import(MSIL,Resume,"Resume");
   pragma Import(MSIL,set_ApartmentState,"set_ApartmentState");
   pragma Import(MSIL,set_CurrentCulture,"set_CurrentCulture");
   pragma Import(MSIL,set_CurrentPrincipal,"set_CurrentPrincipal");
   pragma Import(MSIL,set_CurrentUICulture,"set_CurrentUICulture");
   pragma Import(MSIL,set_IsBackground,"set_IsBackground");
   pragma Import(MSIL,set_Name,"set_Name");
   pragma Import(MSIL,set_Priority,"set_Priority");
   pragma Import(MSIL,SetApartmentState,"SetApartmentState");
   pragma Import(MSIL,SetCompressedStack,"SetCompressedStack");
   pragma Import(MSIL,SetData,"SetData");
   pragma Import(MSIL,Sleep,"Sleep");
   pragma Import(MSIL,SpinWait,"SpinWait");
   pragma Import(MSIL,Start,"Start");
   pragma Import(MSIL,Suspend,"Suspend");
   pragma Import(MSIL,TrySetApartmentState,"TrySetApartmentState");
   pragma Import(MSIL,VolatileRead,"VolatileRead");
   pragma Import(MSIL,VolatileWrite,"VolatileWrite");
end MSSyst.Threading.Thread;
pragma Import(MSIL,MSSyst.Threading.Thread,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Threading.Thread");
