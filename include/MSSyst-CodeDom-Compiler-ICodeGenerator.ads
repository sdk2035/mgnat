-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.CodeDom.CodeCompileUnit;
limited with MSSyst.CodeDom.CodeExpression;
limited with MSSyst.CodeDom.CodeNamespace;
limited with MSSyst.CodeDom.CodeStatement;
limited with MSSyst.CodeDom.CodeTypeDeclaration;
limited with MSSyst.CodeDom.CodeTypeReference;
limited with MSSyst.CodeDom.Compiler.CodeGeneratorOptions;
limited with MSSyst.CodeDom.Compiler.GeneratorSupport;
limited with MSSyst.IO.TextWriter;
limited with MSSyst.String;
package MSSyst.CodeDom.Compiler.ICodeGenerator is
   type Typ is interface;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function CreateEscapedIdentifier(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class is abstract;
   function CreateValidIdentifier(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class is abstract;
   procedure GenerateCodeFromCompileUnit(
      This : access Typ;
      e : access MSSyst.CodeDom.CodeCompileUnit.Typ'Class;
      w : access MSSyst.IO.TextWriter.Typ'Class;
      o : access MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Typ'Class) is abstract;
   procedure GenerateCodeFromExpression(
      This : access Typ;
      e : access MSSyst.CodeDom.CodeExpression.Typ'Class;
      w : access MSSyst.IO.TextWriter.Typ'Class;
      o : access MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Typ'Class) is abstract;
   procedure GenerateCodeFromNamespace(
      This : access Typ;
      e : access MSSyst.CodeDom.CodeNamespace.Typ'Class;
      w : access MSSyst.IO.TextWriter.Typ'Class;
      o : access MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Typ'Class) is abstract;
   procedure GenerateCodeFromStatement(
      This : access Typ;
      e : access MSSyst.CodeDom.CodeStatement.Typ'Class;
      w : access MSSyst.IO.TextWriter.Typ'Class;
      o : access MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Typ'Class) is abstract;
   procedure GenerateCodeFromType(
      This : access Typ;
      e : access MSSyst.CodeDom.CodeTypeDeclaration.Typ'Class;
      w : access MSSyst.IO.TextWriter.Typ'Class;
      o : access MSSyst.CodeDom.Compiler.CodeGeneratorOptions.Typ'Class) is abstract;
   function GetTypeOutput(
      This : access Typ;
      type_k : access MSSyst.CodeDom.CodeTypeReference.Typ'Class) return access MSSyst.String.Typ'Class is abstract;
   function IsValidIdentifier(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) return Standard.Boolean is abstract;
   function Supports(
      This : access Typ;
      supports : MSSyst.CodeDom.Compiler.GeneratorSupport.Valuetype) return Standard.Boolean is abstract;
   procedure ValidateIdentifier(
      This : access Typ;
      value : access MSSyst.String.Typ'Class) is abstract;
private
   pragma Import(MSIL,CreateEscapedIdentifier,"CreateEscapedIdentifier");
   pragma Import(MSIL,CreateValidIdentifier,"CreateValidIdentifier");
   pragma Import(MSIL,GenerateCodeFromCompileUnit,"GenerateCodeFromCompileUnit");
   pragma Import(MSIL,GenerateCodeFromExpression,"GenerateCodeFromExpression");
   pragma Import(MSIL,GenerateCodeFromNamespace,"GenerateCodeFromNamespace");
   pragma Import(MSIL,GenerateCodeFromStatement,"GenerateCodeFromStatement");
   pragma Import(MSIL,GenerateCodeFromType,"GenerateCodeFromType");
   pragma Import(MSIL,GetTypeOutput,"GetTypeOutput");
   pragma Import(MSIL,IsValidIdentifier,"IsValidIdentifier");
   pragma Import(MSIL,Supports,"Supports");
   pragma Import(MSIL,ValidateIdentifier,"ValidateIdentifier");
end MSSyst.CodeDom.Compiler.ICodeGenerator;
pragma Import(MSIL,MSSyst.CodeDom.Compiler.ICodeGenerator,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.CodeDom.Compiler.ICodeGenerator");
