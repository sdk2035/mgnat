-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.ActivationContext;
limited with MSSyst.AppDomain;
limited with MSSyst.Configuration.Assemblies.AssemblyHashAlgorithm;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
with MSSyst.Runtime.InteropServices.uActivator;
limited with MSSyst.Runtime.Remoting.ObjectHandle;
limited with MSSyst.Security.Policy.Evidence;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Activator is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Runtime.InteropServices.uActivator.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function CreateComInstanceFrom(
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateComInstanceFrom(
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      hashValue : MSIL_Types.unsigned_int8_Arr;
      hashAlgorithm : MSSyst.Configuration.Assemblies.AssemblyHashAlgorithm.Valuetype) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      domain : access MSSyst.AppDomain.Typ'Class;
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr;
      securityInfo : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      activationContext : access MSSyst.ActivationContext.Typ'Class;
      activationCustomData : access MSSyst.String.Ref_arr) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      activationContext : access MSSyst.ActivationContext.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      domain : access MSSyst.AppDomain.Typ'Class;
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr;
      securityAttributes : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance(
      type_k : access MSSyst.Type_k.Typ'Class;
      nonPublic : Standard.Boolean) return access MSSyst.Object.Typ'Class;
   function CreateInstance(
      type_k : access MSSyst.Type_k.Typ'Class;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Object.Typ'Class;
   function CreateInstance(
      assemblyName : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstance return T;
   function CreateInstance(
      type_k : access MSSyst.Type_k.Typ'Class;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Object.Typ'Class;
   function CreateInstance(
      type_k : access MSSyst.Type_k.Typ'Class;
      args : access MSSyst.Object.Ref_arr) return access MSSyst.Object.Typ'Class;
   function CreateInstance(
      type_k : access MSSyst.Type_k.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Object.Typ'Class;
   function CreateInstance(
      type_k : access MSSyst.Type_k.Typ'Class) return access MSSyst.Object.Typ'Class;
   function CreateInstanceFrom(
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstanceFrom(
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr;
      securityInfo : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstanceFrom(
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstanceFrom(
      domain : access MSSyst.AppDomain.Typ'Class;
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr;
      securityAttributes : access MSSyst.Security.Policy.Evidence.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function CreateInstanceFrom(
      domain : access MSSyst.AppDomain.Typ'Class;
      assemblyFile : access MSSyst.String.Typ'Class;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Runtime.Remoting.ObjectHandle.Typ'Class;
   function GetObject(
      type_k : access MSSyst.Type_k.Typ'Class;
      url : access MSSyst.String.Typ'Class;
      state : access MSSyst.Object.Typ'Class) return access MSSyst.Object.Typ'Class;
   function GetObject(
      type_k : access MSSyst.Type_k.Typ'Class;
      url : access MSSyst.String.Typ'Class) return access MSSyst.Object.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,CreateComInstanceFrom,"CreateComInstanceFrom");
   pragma Import(MSIL,CreateInstance,"CreateInstance");
   pragma Import(MSIL,CreateInstanceFrom,"CreateInstanceFrom");
   pragma Import(MSIL,GetObject,"GetObject");
end MSSyst.Activator;
pragma Import(MSIL,MSSyst.Activator,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Activator");
