-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Collections.Specialized.StringDictionary;
with MSSyst.Diagnostics.TextWriterTraceListener;
limited with MSSyst.Diagnostics.TraceEventCache;
limited with MSSyst.Diagnostics.TraceEventType;
limited with MSSyst.Diagnostics.TraceFilter;
with MSSyst.Diagnostics.TraceListener;
limited with MSSyst.Diagnostics.TraceOptions;
limited with MSSyst.Guid;
with MSSyst.IDisposable;
limited with MSSyst.IO.Stream;
limited with MSSyst.IO.TextWriter;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Diagnostics.DelimitedListTraceListener is
   type Typ is new MSSyst.Diagnostics.TextWriterTraceListener.Typ
         and MSSyst.IDisposable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_DelimitedListTraceListener(
      This : Ref := null;
      stream : access MSSyst.IO.Stream.Typ'Class) return Ref;
   function new_DelimitedListTraceListener(
      This : Ref := null;
      stream : access MSSyst.IO.Stream.Typ'Class;
      name : access MSSyst.String.Typ'Class) return Ref;
   function new_DelimitedListTraceListener(
      This : Ref := null;
      writer : access MSSyst.IO.TextWriter.Typ'Class) return Ref;
   function new_DelimitedListTraceListener(
      This : Ref := null;
      writer : access MSSyst.IO.TextWriter.Typ'Class;
      name : access MSSyst.String.Typ'Class) return Ref;
   function new_DelimitedListTraceListener(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class) return Ref;
   function new_DelimitedListTraceListener(
      This : Ref := null;
      fileName : access MSSyst.String.Typ'Class;
      name : access MSSyst.String.Typ'Class) return Ref;
   function get_Delimiter(
      This : access Typ) return access MSSyst.String.Typ'Class;
   procedure set_Delimiter(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure TraceData(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      data : access MSSyst.Object.Typ'Class);
   procedure TraceData(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      data : access MSSyst.Object.Ref_arr);
   procedure TraceEvent(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      format : access MSSyst.String.Typ'Class;
      args : access MSSyst.Object.Ref_arr);
   procedure TraceEvent(
      This : access Typ;
      eventCache : access MSSyst.Diagnostics.TraceEventCache.Typ'Class;
      source : access MSSyst.String.Typ'Class;
      eventType : MSSyst.Diagnostics.TraceEventType.Valuetype;
      id : Integer;
      message : access MSSyst.String.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_DelimitedListTraceListener);
   pragma Import(MSIL,get_Delimiter,"get_Delimiter");
   pragma Import(MSIL,set_Delimiter,"set_Delimiter");
   pragma Import(MSIL,TraceData,"TraceData");
   pragma Import(MSIL,TraceEvent,"TraceEvent");
end MSSyst.Diagnostics.DelimitedListTraceListener;
pragma Import(MSIL,MSSyst.Diagnostics.DelimitedListTraceListener,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Diagnostics.DelimitedListTraceListener");
