-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
limited with MSSyst.ComponentModel.IContainer;
limited with MSSyst.ComponentModel.ISite;
with MSSyst.ComponentModel.ISupportInitialize;
limited with MSSyst.ComponentModel.ISynchronizeInvoke;
limited with MSSyst.Diagnostics.EntryWrittenEventHandler;
limited with MSSyst.Diagnostics.EventInstance;
limited with MSSyst.Diagnostics.EventLogEntryCollection;
limited with MSSyst.Diagnostics.EventLogEntryType;
limited with MSSyst.Diagnostics.EventSourceCreationData;
limited with MSSyst.Diagnostics.OverflowAction;
limited with MSSyst.EventHandler;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Diagnostics.EventLog is
   type Typ is new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
         and MSSyst.IDisposable.Typ
         and MSSyst.ComponentModel.ISupportInitialize.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_EventLog(
      This : Ref := null) return Ref;
   function new_EventLog(
      This : Ref := null;
      logName : access MSSyst.String.Typ'Class) return Ref;
   function new_EventLog(
      This : Ref := null;
      logName : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class) return Ref;
   function new_EventLog(
      This : Ref := null;
      logName : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class;
      source : access MSSyst.String.Typ'Class) return Ref;
   procedure add_EntryWritten(
      This : access Typ;
      value : access MSSyst.Diagnostics.EntryWrittenEventHandler.Typ'Class);
   procedure BeginInit(
      This : access Typ);
   procedure Clear(
      This : access Typ);
   procedure Close(
      This : access Typ);
   procedure CreateEventSource(
      sourceData : access MSSyst.Diagnostics.EventSourceCreationData.Typ'Class);
   procedure CreateEventSource(
      source : access MSSyst.String.Typ'Class;
      logName : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class);
   procedure CreateEventSource(
      source : access MSSyst.String.Typ'Class;
      logName : access MSSyst.String.Typ'Class);
   procedure Delete(
      logName : access MSSyst.String.Typ'Class);
   procedure Delete(
      logName : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class);
   procedure DeleteEventSource(
      source : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class);
   procedure DeleteEventSource(
      source : access MSSyst.String.Typ'Class);
   procedure EndInit(
      This : access Typ);
   function Exists(
      logName : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function Exists(
      logName : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function get_EnableRaisingEvents(
      This : access Typ) return Standard.Boolean;
   function get_Entries(
      This : access Typ) return access MSSyst.Diagnostics.EventLogEntryCollection.Typ'Class;
   function get_Log(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_LogDisplayName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_MachineName(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_MaximumKilobytes(
      This : access Typ) return Long_Long_Integer;
   function get_MinimumRetentionDays(
      This : access Typ) return Integer;
   function get_OverflowAction(
      This : access Typ) return MSSyst.Diagnostics.OverflowAction.Valuetype;
   function get_Source(
      This : access Typ) return access MSSyst.String.Typ'Class;
   function get_SynchronizingObject(
      This : access Typ) return access MSSyst.ComponentModel.ISynchronizeInvoke.Typ'Class;
   function GetEventLogs(
      machineName : access MSSyst.String.Typ'Class) return access MSSyst.Diagnostics.EventLog.Ref_arr;
   function GetEventLogs return access MSSyst.Diagnostics.EventLog.Ref_arr;
   function LogNameFromSourceName(
      source : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   procedure ModifyOverflowPolicy(
      This : access Typ;
      action : MSSyst.Diagnostics.OverflowAction.Valuetype;
      retentionDays : Integer);
   procedure RegisterDisplayName(
      This : access Typ;
      resourceFile : access MSSyst.String.Typ'Class;
      resourceId : Long_Long_Integer);
   procedure remove_EntryWritten(
      This : access Typ;
      value : access MSSyst.Diagnostics.EntryWrittenEventHandler.Typ'Class);
   procedure set_EnableRaisingEvents(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Log(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_MachineName(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_MaximumKilobytes(
      This : access Typ;
      value : Long_Long_Integer);
   procedure set_Source(
      This : access Typ;
      value : access MSSyst.String.Typ'Class);
   procedure set_SynchronizingObject(
      This : access Typ;
      value : access MSSyst.ComponentModel.ISynchronizeInvoke.Typ'Class);
   function SourceExists(
      source : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function SourceExists(
      source : access MSSyst.String.Typ'Class;
      machineName : access MSSyst.String.Typ'Class) return Standard.Boolean;
   procedure WriteEntry(
      source : access MSSyst.String.Typ'Class;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype);
   procedure WriteEntry(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype;
      eventID : Integer);
   procedure WriteEntry(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype);
   procedure WriteEntry(
      This : access Typ;
      message : access MSSyst.String.Typ'Class);
   procedure WriteEntry(
      source : access MSSyst.String.Typ'Class;
      message : access MSSyst.String.Typ'Class);
   procedure WriteEntry(
      source : access MSSyst.String.Typ'Class;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype;
      eventID : Integer;
      category : MSIL_Types.int16;
      rawData : MSIL_Types.unsigned_int8_Arr);
   procedure WriteEntry(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype;
      eventID : Integer;
      category : MSIL_Types.int16;
      rawData : MSIL_Types.unsigned_int8_Arr);
   procedure WriteEntry(
      source : access MSSyst.String.Typ'Class;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype;
      eventID : Integer;
      category : MSIL_Types.int16);
   procedure WriteEntry(
      source : access MSSyst.String.Typ'Class;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype;
      eventID : Integer);
   procedure WriteEntry(
      This : access Typ;
      message : access MSSyst.String.Typ'Class;
      type_k : MSSyst.Diagnostics.EventLogEntryType.Valuetype;
      eventID : Integer;
      category : MSIL_Types.int16);
   procedure WriteEvent(
      This : access Typ;
      instance : access MSSyst.Diagnostics.EventInstance.Typ'Class;
      data : MSIL_Types.unsigned_int8_Arr;
      values : access MSSyst.Object.Ref_arr);
   procedure WriteEvent(
      This : access Typ;
      instance : access MSSyst.Diagnostics.EventInstance.Typ'Class;
      values : access MSSyst.Object.Ref_arr);
   procedure WriteEvent(
      source : access MSSyst.String.Typ'Class;
      instance : access MSSyst.Diagnostics.EventInstance.Typ'Class;
      data : MSIL_Types.unsigned_int8_Arr;
      values : access MSSyst.Object.Ref_arr);
   procedure WriteEvent(
      source : access MSSyst.String.Typ'Class;
      instance : access MSSyst.Diagnostics.EventInstance.Typ'Class;
      values : access MSSyst.Object.Ref_arr);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_EventLog);
   pragma Import(MSIL,add_EntryWritten,"add_EntryWritten");
   pragma Import(MSIL,BeginInit,"BeginInit");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,CreateEventSource,"CreateEventSource");
   pragma Import(MSIL,Delete,"Delete");
   pragma Import(MSIL,DeleteEventSource,"DeleteEventSource");
   pragma Import(MSIL,EndInit,"EndInit");
   pragma Import(MSIL,Exists,"Exists");
   pragma Import(MSIL,get_EnableRaisingEvents,"get_EnableRaisingEvents");
   pragma Import(MSIL,get_Entries,"get_Entries");
   pragma Import(MSIL,get_Log,"get_Log");
   pragma Import(MSIL,get_LogDisplayName,"get_LogDisplayName");
   pragma Import(MSIL,get_MachineName,"get_MachineName");
   pragma Import(MSIL,get_MaximumKilobytes,"get_MaximumKilobytes");
   pragma Import(MSIL,get_MinimumRetentionDays,"get_MinimumRetentionDays");
   pragma Import(MSIL,get_OverflowAction,"get_OverflowAction");
   pragma Import(MSIL,get_Source,"get_Source");
   pragma Import(MSIL,get_SynchronizingObject,"get_SynchronizingObject");
   pragma Import(MSIL,GetEventLogs,"GetEventLogs");
   pragma Import(MSIL,LogNameFromSourceName,"LogNameFromSourceName");
   pragma Import(MSIL,ModifyOverflowPolicy,"ModifyOverflowPolicy");
   pragma Import(MSIL,RegisterDisplayName,"RegisterDisplayName");
   pragma Import(MSIL,remove_EntryWritten,"remove_EntryWritten");
   pragma Import(MSIL,set_EnableRaisingEvents,"set_EnableRaisingEvents");
   pragma Import(MSIL,set_Log,"set_Log");
   pragma Import(MSIL,set_MachineName,"set_MachineName");
   pragma Import(MSIL,set_MaximumKilobytes,"set_MaximumKilobytes");
   pragma Import(MSIL,set_Source,"set_Source");
   pragma Import(MSIL,set_SynchronizingObject,"set_SynchronizingObject");
   pragma Import(MSIL,SourceExists,"SourceExists");
   pragma Import(MSIL,WriteEntry,"WriteEntry");
   pragma Import(MSIL,WriteEvent,"WriteEvent");
end MSSyst.Diagnostics.EventLog;
pragma Import(MSIL,MSSyst.Diagnostics.EventLog,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Diagnostics.EventLog");
