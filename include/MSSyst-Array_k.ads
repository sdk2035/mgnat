-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.Collections.ICollection;
limited with MSSyst.Collections.IComparer;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Collections.IEnumerator;
with MSSyst.Collections.IList;
with MSSyst.ICloneable;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Array_k is
   type Typ is abstract new MSSyst.Object.Typ
         and MSSyst.ICloneable.Typ
         and MSSyst.Collections.IList.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function BinarySearch(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class) return Integer;
   function BinarySearch(
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer;
      value : access MSSyst.Object.Typ'Class) return Integer;
   function BinarySearch(
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer;
      value : access MSSyst.Object.Typ'Class;
      comparer : access MSSyst.Collections.IComparer.Typ'Class) return Integer;
   function BinarySearch(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class;
      comparer : access MSSyst.Collections.IComparer.Typ'Class) return Integer;
   procedure Clear(
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer);
   function Clone(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   procedure ConstrainedCopy(
      sourceArray : access MSSyst.Array_k.Typ'Class;
      sourceIndex : Integer;
      destinationArray : access MSSyst.Array_k.Typ'Class;
      destinationIndex : Integer;
      length : Integer);
   procedure Copy(
      sourceArray : access MSSyst.Array_k.Typ'Class;
      destinationArray : access MSSyst.Array_k.Typ'Class;
      length : Integer);
   procedure Copy(
      sourceArray : access MSSyst.Array_k.Typ'Class;
      sourceIndex : Integer;
      destinationArray : access MSSyst.Array_k.Typ'Class;
      destinationIndex : Integer;
      length : Integer);
   procedure Copy(
      sourceArray : access MSSyst.Array_k.Typ'Class;
      destinationArray : access MSSyst.Array_k.Typ'Class;
      length : Long_Long_Integer);
   procedure Copy(
      sourceArray : access MSSyst.Array_k.Typ'Class;
      sourceIndex : Long_Long_Integer;
      destinationArray : access MSSyst.Array_k.Typ'Class;
      destinationIndex : Long_Long_Integer;
      length : Long_Long_Integer);
   procedure CopyTo(
      This : access Typ;
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Long_Long_Integer);
   procedure CopyTo(
      This : access Typ;
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer);
   function CreateInstance(
      elementType : access MSSyst.Type_k.Typ'Class;
      lengths : MSIL_Types.Int32_Arr;
      lowerBounds : MSIL_Types.Int32_Arr) return access MSSyst.Array_k.Typ'Class;
   function CreateInstance(
      elementType : access MSSyst.Type_k.Typ'Class;
      length : Integer) return access MSSyst.Array_k.Typ'Class;
   function CreateInstance(
      elementType : access MSSyst.Type_k.Typ'Class;
      lengths : MSIL_Types.Int64_Arr) return access MSSyst.Array_k.Typ'Class;
   function CreateInstance(
      elementType : access MSSyst.Type_k.Typ'Class;
      length1 : Integer;
      length2 : Integer;
      length3 : Integer) return access MSSyst.Array_k.Typ'Class;
   function CreateInstance(
      elementType : access MSSyst.Type_k.Typ'Class;
      length1 : Integer;
      length2 : Integer) return access MSSyst.Array_k.Typ'Class;
   function CreateInstance(
      elementType : access MSSyst.Type_k.Typ'Class;
      lengths : MSIL_Types.Int32_Arr) return access MSSyst.Array_k.Typ'Class;
   function get_IsFixedSize(
      This : access Typ) return Standard.Boolean;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_Length(
      This : access Typ) return Integer;
   function get_LongLength(
      This : access Typ) return Long_Long_Integer;
   function get_Rank(
      This : access Typ) return Integer;
   function get_SyncRoot(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function GetEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function GetLength(
      This : access Typ;
      dimension : Integer) return Integer;
   function GetLongLength(
      This : access Typ;
      dimension : Integer) return Long_Long_Integer;
   function GetLowerBound(
      This : access Typ;
      dimension : Integer) return Integer;
   function GetUpperBound(
      This : access Typ;
      dimension : Integer) return Integer;
   function GetValue(
      This : access Typ;
      index1 : Long_Long_Integer;
      index2 : Long_Long_Integer) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      index : Long_Long_Integer) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      indices : MSIL_Types.Int64_Arr) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      index1 : Long_Long_Integer;
      index2 : Long_Long_Integer;
      index3 : Long_Long_Integer) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      index1 : Integer;
      index2 : Integer;
      index3 : Integer) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      indices : MSIL_Types.Int32_Arr) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      index : Integer) return access MSSyst.Object.Typ'Class;
   function GetValue(
      This : access Typ;
      index1 : Integer;
      index2 : Integer) return access MSSyst.Object.Typ'Class;
   function IndexOf(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class;
      startIndex : Integer) return Integer;
   function IndexOf(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class) return Integer;
   function IndexOf(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class;
      startIndex : Integer;
      count : Integer) return Integer;
   procedure Initialize(
      This : access Typ);
   function LastIndexOf(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class) return Integer;
   function LastIndexOf(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class;
      startIndex : Integer) return Integer;
   function LastIndexOf(
      array_k : access MSSyst.Array_k.Typ'Class;
      value : access MSSyst.Object.Typ'Class;
      startIndex : Integer;
      count : Integer) return Integer;
   procedure Reverse_k(
      array_k : access MSSyst.Array_k.Typ'Class);
   procedure Reverse_k(
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      index : Integer);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      index1 : Integer;
      index2 : Integer);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      index1 : Integer;
      index2 : Integer;
      index3 : Integer);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      indices : MSIL_Types.Int32_Arr);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      index1 : Long_Long_Integer;
      index2 : Long_Long_Integer;
      index3 : Long_Long_Integer);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      indices : MSIL_Types.Int64_Arr);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      index1 : Long_Long_Integer;
      index2 : Long_Long_Integer);
   procedure SetValue(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      index : Long_Long_Integer);
   procedure Sort(
      keys : access MSSyst.Array_k.Typ'Class;
      items : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer);
   procedure Sort(
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer);
   procedure Sort(
      keys : access MSSyst.Array_k.Typ'Class;
      items : access MSSyst.Array_k.Typ'Class);
   procedure Sort(
      array_k : access MSSyst.Array_k.Typ'Class;
      comparer : access MSSyst.Collections.IComparer.Typ'Class);
   procedure Sort(
      keys : access MSSyst.Array_k.Typ'Class;
      items : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer;
      comparer : access MSSyst.Collections.IComparer.Typ'Class);
   procedure Sort(
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer;
      length : Integer;
      comparer : access MSSyst.Collections.IComparer.Typ'Class);
   procedure Sort(
      keys : access MSSyst.Array_k.Typ'Class;
      items : access MSSyst.Array_k.Typ'Class;
      comparer : access MSSyst.Collections.IComparer.Typ'Class);
   procedure Sort(
      array_k : access MSSyst.Array_k.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,BinarySearch,"BinarySearch");
   pragma Import(MSIL,Clear,"Clear");
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,ConstrainedCopy,"ConstrainedCopy");
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,CreateInstance,"CreateInstance");
   pragma Import(MSIL,get_IsFixedSize,"get_IsFixedSize");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,get_LongLength,"get_LongLength");
   pragma Import(MSIL,get_Rank,"get_Rank");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetLength,"GetLength");
   pragma Import(MSIL,GetLongLength,"GetLongLength");
   pragma Import(MSIL,GetLowerBound,"GetLowerBound");
   pragma Import(MSIL,GetUpperBound,"GetUpperBound");
   pragma Import(MSIL,GetValue,"GetValue");
   pragma Import(MSIL,IndexOf,"IndexOf");
   pragma Import(MSIL,Initialize,"Initialize");
   pragma Import(MSIL,LastIndexOf,"LastIndexOf");
   pragma Import(MSIL,Reverse_k,"Reverse");
   pragma Import(MSIL,SetValue,"SetValue");
   pragma Import(MSIL,Sort,"Sort");
end MSSyst.Array_k;
pragma Import(MSIL,MSSyst.Array_k,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Array");
