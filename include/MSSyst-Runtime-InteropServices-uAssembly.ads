-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.IO.FileStream;
limited with MSSyst.IO.Stream;
limited with MSSyst.Reflection.AssemblyName;
limited with MSSyst.Reflection.Assembly;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.ManifestResourceInfo;
limited with MSSyst.Reflection.MethodInfo;
limited with MSSyst.Reflection.ModuleResolveEventHandler;
limited with MSSyst.Reflection.Module;
limited with MSSyst.Runtime.Serialization.SerializationInfo;
limited with MSSyst.Runtime.Serialization.StreamingContext;
limited with MSSyst.Security.Policy.Evidence;
limited with MSSyst.String;
limited with MSSyst.Type_k;
limited with MSSyst.Version;
package MSSyst.Runtime.InteropServices.uAssembly is
   type Typ is interface;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure add_ModuleResolve(
      This : access Typ;
      value : access MSSyst.Reflection.ModuleResolveEventHandler.Typ'Class) is abstract;
   function CreateInstance(
      This : access Typ;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean) return access MSSyst.Object.Typ'Class is abstract;
   function CreateInstance(
      This : access Typ;
      typeName : access MSSyst.String.Typ'Class) return access MSSyst.Object.Typ'Class is abstract;
   function CreateInstance(
      This : access Typ;
      typeName : access MSSyst.String.Typ'Class;
      ignoreCase : Standard.Boolean;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      args : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      activationAttributes : access MSSyst.Object.Ref_arr) return access MSSyst.Object.Typ'Class is abstract;
   function Equals(
      This : access Typ;
      other : access MSSyst.Object.Typ'Class) return Standard.Boolean is abstract;
   function get_CodeBase(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_EntryPoint(
      This : access Typ) return access MSSyst.Reflection.MethodInfo.Typ'Class is abstract;
   function get_EscapedCodeBase(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_Evidence(
      This : access Typ) return access MSSyst.Security.Policy.Evidence.Typ'Class is abstract;
   function get_FullName(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function get_GlobalAssemblyCache(
      This : access Typ) return Standard.Boolean is abstract;
   function get_Location(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
   function GetCustomAttributes(
      This : access Typ;
      inherit : Standard.Boolean) return access MSSyst.Object.Ref_array is abstract;
   function GetCustomAttributes(
      This : access Typ;
      attributeType : access MSSyst.Type_k.Typ'Class;
      inherit : Standard.Boolean) return access MSSyst.Object.Ref_array is abstract;
   function GetExportedTypes(
      This : access Typ) return access MSSyst.Type_k.Ref_arr is abstract;
   function GetFile(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.FileStream.Typ'Class is abstract;
   function GetFiles(
      This : access Typ;
      getResourceModules : Standard.Boolean) return access MSSyst.IO.FileStream.Ref_arr is abstract;
   function GetFiles(
      This : access Typ) return access MSSyst.IO.FileStream.Ref_arr is abstract;
   function GetHashCode(
      This : access Typ) return Integer is abstract;
   function GetLoadedModules(
      This : access Typ) return access MSSyst.Reflection.Module.Ref_arr is abstract;
   function GetLoadedModules(
      This : access Typ;
      getResourceModules : Standard.Boolean) return access MSSyst.Reflection.Module.Ref_arr is abstract;
   function GetManifestResourceInfo(
      This : access Typ;
      resourceName : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.ManifestResourceInfo.Typ'Class is abstract;
   function GetManifestResourceNames(
      This : access Typ) return access MSSyst.String.Ref_arr is abstract;
   function GetManifestResourceStream(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.Stream.Typ'Class is abstract;
   function GetManifestResourceStream(
      This : access Typ;
      type_k : access MSSyst.Type_k.Typ'Class;
      name : access MSSyst.String.Typ'Class) return access MSSyst.IO.Stream.Typ'Class is abstract;
   function GetModule(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Reflection.Module.Typ'Class is abstract;
   function GetModules(
      This : access Typ) return access MSSyst.Reflection.Module.Ref_arr is abstract;
   function GetModules(
      This : access Typ;
      getResourceModules : Standard.Boolean) return access MSSyst.Reflection.Module.Ref_arr is abstract;
   function GetName(
      This : access Typ) return access MSSyst.Reflection.AssemblyName.Typ'Class is abstract;
   function GetName(
      This : access Typ;
      copiedName : Standard.Boolean) return access MSSyst.Reflection.AssemblyName.Typ'Class is abstract;
   procedure GetObjectData(
      This : access Typ;
      info : access MSSyst.Runtime.Serialization.SerializationInfo.Typ'Class;
      context : MSSyst.Runtime.Serialization.StreamingContext.Valuetype) is abstract;
   function GetReferencedAssemblies(
      This : access Typ) return access MSSyst.Reflection.AssemblyName.Ref_arr is abstract;
   function GetSatelliteAssembly(
      This : access Typ;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function GetSatelliteAssembly(
      This : access Typ;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      version : access MSSyst.Version.Typ'Class) return access MSSyst.Reflection.Assembly.Typ'Class is abstract;
   function GetType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class) return access MSSyst.Type_k.Typ'Class is abstract;
   function GetType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      throwOnError : Standard.Boolean) return access MSSyst.Type_k.Typ'Class is abstract;
   function GetType(
      This : access Typ;
      name : access MSSyst.String.Typ'Class;
      throwOnError : Standard.Boolean;
      ignoreCase : Standard.Boolean) return access MSSyst.Type_k.Typ'Class is abstract;
   function GetType(
      This : access Typ) return access MSSyst.Type_k.Typ'Class is abstract;
   function GetTypes(
      This : access Typ) return access MSSyst.Type_k.Ref_arr is abstract;
   function IsDefined(
      This : access Typ;
      attributeType : access MSSyst.Type_k.Typ'Class;
      inherit : Standard.Boolean) return Standard.Boolean is abstract;
   function LoadModule(
      This : access Typ;
      moduleName : access MSSyst.String.Typ'Class;
      rawModule : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Reflection.Module.Typ'Class is abstract;
   function LoadModule(
      This : access Typ;
      moduleName : access MSSyst.String.Typ'Class;
      rawModule : MSIL_Types.unsigned_int8_Arr;
      rawSymbolStore : MSIL_Types.unsigned_int8_Arr) return access MSSyst.Reflection.Module.Typ'Class is abstract;
   procedure remove_ModuleResolve(
      This : access Typ;
      value : access MSSyst.Reflection.ModuleResolveEventHandler.Typ'Class) is abstract;
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class is abstract;
private
   pragma Import(MSIL,add_ModuleResolve,"add_ModuleResolve");
   pragma Import(MSIL,CreateInstance,"CreateInstance");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,get_CodeBase,"get_CodeBase");
   pragma Import(MSIL,get_EntryPoint,"get_EntryPoint");
   pragma Import(MSIL,get_EscapedCodeBase,"get_EscapedCodeBase");
   pragma Import(MSIL,get_Evidence,"get_Evidence");
   pragma Import(MSIL,get_FullName,"get_FullName");
   pragma Import(MSIL,get_GlobalAssemblyCache,"get_GlobalAssemblyCache");
   pragma Import(MSIL,get_Location,"get_Location");
   pragma Import(MSIL,GetCustomAttributes,"GetCustomAttributes");
   pragma Import(MSIL,GetExportedTypes,"GetExportedTypes");
   pragma Import(MSIL,GetFile,"GetFile");
   pragma Import(MSIL,GetFiles,"GetFiles");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetLoadedModules,"GetLoadedModules");
   pragma Import(MSIL,GetManifestResourceInfo,"GetManifestResourceInfo");
   pragma Import(MSIL,GetManifestResourceNames,"GetManifestResourceNames");
   pragma Import(MSIL,GetManifestResourceStream,"GetManifestResourceStream");
   pragma Import(MSIL,GetModule,"GetModule");
   pragma Import(MSIL,GetModules,"GetModules");
   pragma Import(MSIL,GetName,"GetName");
   pragma Import(MSIL,GetObjectData,"GetObjectData");
   pragma Import(MSIL,GetReferencedAssemblies,"GetReferencedAssemblies");
   pragma Import(MSIL,GetSatelliteAssembly,"GetSatelliteAssembly");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypes,"GetTypes");
   pragma Import(MSIL,IsDefined,"IsDefined");
   pragma Import(MSIL,LoadModule,"LoadModule");
   pragma Import(MSIL,remove_ModuleResolve,"remove_ModuleResolve");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Runtime.InteropServices.uAssembly;
pragma Import(MSIL,MSSyst.Runtime.InteropServices.uAssembly,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Runtime.InteropServices._Assembly");
