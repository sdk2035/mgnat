-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.DateTime;
limited with MSSyst.IO.FileAccess;
limited with MSSyst.IO.FileAttributes;
limited with MSSyst.IO.FileMode;
limited with MSSyst.IO.FileOptions;
limited with MSSyst.IO.FileShare;
limited with MSSyst.IO.FileStream;
limited with MSSyst.IO.StreamReader;
limited with MSSyst.IO.StreamWriter;
limited with MSSyst.Security.AccessControl.AccessControlSections;
limited with MSSyst.Security.AccessControl.FileSecurity;
limited with MSSyst.String;
limited with MSSyst.Text.Encoding;
limited with MSSyst.Type_k;
package MSSyst.IO.File is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   procedure AppendAllText(
      path : access MSSyst.String.Typ'Class;
      contents : access MSSyst.String.Typ'Class;
      encoding : access MSSyst.Text.Encoding.Typ'Class);
   procedure AppendAllText(
      path : access MSSyst.String.Typ'Class;
      contents : access MSSyst.String.Typ'Class);
   function AppendText(
      path : access MSSyst.String.Typ'Class) return access MSSyst.IO.StreamWriter.Typ'Class;
   procedure Copy(
      sourceFileName : access MSSyst.String.Typ'Class;
      destFileName : access MSSyst.String.Typ'Class);
   procedure Copy(
      sourceFileName : access MSSyst.String.Typ'Class;
      destFileName : access MSSyst.String.Typ'Class;
      overwrite : Standard.Boolean);
   function Create(
      path : access MSSyst.String.Typ'Class;
      bufferSize : Integer) return access MSSyst.IO.FileStream.Typ'Class;
   function Create(
      path : access MSSyst.String.Typ'Class;
      bufferSize : Integer;
      options : MSSyst.IO.FileOptions.Valuetype) return access MSSyst.IO.FileStream.Typ'Class;
   function Create(
      path : access MSSyst.String.Typ'Class;
      bufferSize : Integer;
      options : MSSyst.IO.FileOptions.Valuetype;
      fileSecurity : access MSSyst.Security.AccessControl.FileSecurity.Typ'Class) return access MSSyst.IO.FileStream.Typ'Class;
   function Create(
      path : access MSSyst.String.Typ'Class) return access MSSyst.IO.FileStream.Typ'Class;
   function CreateText(
      path : access MSSyst.String.Typ'Class) return access MSSyst.IO.StreamWriter.Typ'Class;
   procedure Decrypt(
      path : access MSSyst.String.Typ'Class);
   procedure Delete(
      path : access MSSyst.String.Typ'Class);
   procedure Encrypt(
      path : access MSSyst.String.Typ'Class);
   function Exists(
      path : access MSSyst.String.Typ'Class) return Standard.Boolean;
   function GetAccessControl(
      path : access MSSyst.String.Typ'Class) return access MSSyst.Security.AccessControl.FileSecurity.Typ'Class;
   function GetAccessControl(
      path : access MSSyst.String.Typ'Class;
      includeSections : MSSyst.Security.AccessControl.AccessControlSections.Valuetype) return access MSSyst.Security.AccessControl.FileSecurity.Typ'Class;
   function GetAttributes(
      path : access MSSyst.String.Typ'Class) return MSSyst.IO.FileAttributes.Valuetype;
   function GetCreationTime(
      path : access MSSyst.String.Typ'Class) return MSSyst.DateTime.Valuetype;
   function GetCreationTimeUtc(
      path : access MSSyst.String.Typ'Class) return MSSyst.DateTime.Valuetype;
   function GetLastAccessTime(
      path : access MSSyst.String.Typ'Class) return MSSyst.DateTime.Valuetype;
   function GetLastAccessTimeUtc(
      path : access MSSyst.String.Typ'Class) return MSSyst.DateTime.Valuetype;
   function GetLastWriteTime(
      path : access MSSyst.String.Typ'Class) return MSSyst.DateTime.Valuetype;
   function GetLastWriteTimeUtc(
      path : access MSSyst.String.Typ'Class) return MSSyst.DateTime.Valuetype;
   procedure Move(
      sourceFileName : access MSSyst.String.Typ'Class;
      destFileName : access MSSyst.String.Typ'Class);
   function Open(
      path : access MSSyst.String.Typ'Class;
      mode : MSSyst.IO.FileMode.Valuetype) return access MSSyst.IO.FileStream.Typ'Class;
   function Open(
      path : access MSSyst.String.Typ'Class;
      mode : MSSyst.IO.FileMode.Valuetype;
      access_k : MSSyst.IO.FileAccess.Valuetype;
      share : MSSyst.IO.FileShare.Valuetype) return access MSSyst.IO.FileStream.Typ'Class;
   function Open(
      path : access MSSyst.String.Typ'Class;
      mode : MSSyst.IO.FileMode.Valuetype;
      access_k : MSSyst.IO.FileAccess.Valuetype) return access MSSyst.IO.FileStream.Typ'Class;
   function OpenRead(
      path : access MSSyst.String.Typ'Class) return access MSSyst.IO.FileStream.Typ'Class;
   function OpenText(
      path : access MSSyst.String.Typ'Class) return access MSSyst.IO.StreamReader.Typ'Class;
   function OpenWrite(
      path : access MSSyst.String.Typ'Class) return access MSSyst.IO.FileStream.Typ'Class;
   function ReadAllBytes(
      path : access MSSyst.String.Typ'Class) return MSIL_Types.unsigned_int8_Array;
   function ReadAllLines(
      path : access MSSyst.String.Typ'Class;
      encoding : access MSSyst.Text.Encoding.Typ'Class) return access MSSyst.String.Ref_arr;
   function ReadAllLines(
      path : access MSSyst.String.Typ'Class) return access MSSyst.String.Ref_arr;
   function ReadAllText(
      path : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
   function ReadAllText(
      path : access MSSyst.String.Typ'Class;
      encoding : access MSSyst.Text.Encoding.Typ'Class) return access MSSyst.String.Typ'Class;
   procedure Replace(
      sourceFileName : access MSSyst.String.Typ'Class;
      destinationFileName : access MSSyst.String.Typ'Class;
      destinationBackupFileName : access MSSyst.String.Typ'Class);
   procedure Replace(
      sourceFileName : access MSSyst.String.Typ'Class;
      destinationFileName : access MSSyst.String.Typ'Class;
      destinationBackupFileName : access MSSyst.String.Typ'Class;
      ignoreMetadataErrors : Standard.Boolean);
   procedure SetAccessControl(
      path : access MSSyst.String.Typ'Class;
      fileSecurity : access MSSyst.Security.AccessControl.FileSecurity.Typ'Class);
   procedure SetAttributes(
      path : access MSSyst.String.Typ'Class;
      fileAttributes : MSSyst.IO.FileAttributes.Valuetype);
   procedure SetCreationTime(
      path : access MSSyst.String.Typ'Class;
      creationTime : MSSyst.DateTime.Valuetype);
   procedure SetCreationTimeUtc(
      path : access MSSyst.String.Typ'Class;
      creationTimeUtc : MSSyst.DateTime.Valuetype);
   procedure SetLastAccessTime(
      path : access MSSyst.String.Typ'Class;
      lastAccessTime : MSSyst.DateTime.Valuetype);
   procedure SetLastAccessTimeUtc(
      path : access MSSyst.String.Typ'Class;
      lastAccessTimeUtc : MSSyst.DateTime.Valuetype);
   procedure SetLastWriteTime(
      path : access MSSyst.String.Typ'Class;
      lastWriteTime : MSSyst.DateTime.Valuetype);
   procedure SetLastWriteTimeUtc(
      path : access MSSyst.String.Typ'Class;
      lastWriteTimeUtc : MSSyst.DateTime.Valuetype);
   procedure WriteAllBytes(
      path : access MSSyst.String.Typ'Class;
      bytes : MSIL_Types.unsigned_int8_Arr);
   procedure WriteAllLines(
      path : access MSSyst.String.Typ'Class;
      contents : access MSSyst.String.Ref_arr);
   procedure WriteAllLines(
      path : access MSSyst.String.Typ'Class;
      contents : access MSSyst.String.Ref_arr;
      encoding : access MSSyst.Text.Encoding.Typ'Class);
   procedure WriteAllText(
      path : access MSSyst.String.Typ'Class;
      contents : access MSSyst.String.Typ'Class);
   procedure WriteAllText(
      path : access MSSyst.String.Typ'Class;
      contents : access MSSyst.String.Typ'Class;
      encoding : access MSSyst.Text.Encoding.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,AppendAllText,"AppendAllText");
   pragma Import(MSIL,AppendText,"AppendText");
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,Create,"Create");
   pragma Import(MSIL,CreateText,"CreateText");
   pragma Import(MSIL,Decrypt,"Decrypt");
   pragma Import(MSIL,Delete,"Delete");
   pragma Import(MSIL,Encrypt,"Encrypt");
   pragma Import(MSIL,Exists,"Exists");
   pragma Import(MSIL,GetAccessControl,"GetAccessControl");
   pragma Import(MSIL,GetAttributes,"GetAttributes");
   pragma Import(MSIL,GetCreationTime,"GetCreationTime");
   pragma Import(MSIL,GetCreationTimeUtc,"GetCreationTimeUtc");
   pragma Import(MSIL,GetLastAccessTime,"GetLastAccessTime");
   pragma Import(MSIL,GetLastAccessTimeUtc,"GetLastAccessTimeUtc");
   pragma Import(MSIL,GetLastWriteTime,"GetLastWriteTime");
   pragma Import(MSIL,GetLastWriteTimeUtc,"GetLastWriteTimeUtc");
   pragma Import(MSIL,Move,"Move");
   pragma Import(MSIL,Open,"Open");
   pragma Import(MSIL,OpenRead,"OpenRead");
   pragma Import(MSIL,OpenText,"OpenText");
   pragma Import(MSIL,OpenWrite,"OpenWrite");
   pragma Import(MSIL,ReadAllBytes,"ReadAllBytes");
   pragma Import(MSIL,ReadAllLines,"ReadAllLines");
   pragma Import(MSIL,ReadAllText,"ReadAllText");
   pragma Import(MSIL,Replace,"Replace");
   pragma Import(MSIL,SetAccessControl,"SetAccessControl");
   pragma Import(MSIL,SetAttributes,"SetAttributes");
   pragma Import(MSIL,SetCreationTime,"SetCreationTime");
   pragma Import(MSIL,SetCreationTimeUtc,"SetCreationTimeUtc");
   pragma Import(MSIL,SetLastAccessTime,"SetLastAccessTime");
   pragma Import(MSIL,SetLastAccessTimeUtc,"SetLastAccessTimeUtc");
   pragma Import(MSIL,SetLastWriteTime,"SetLastWriteTime");
   pragma Import(MSIL,SetLastWriteTimeUtc,"SetLastWriteTimeUtc");
   pragma Import(MSIL,WriteAllBytes,"WriteAllBytes");
   pragma Import(MSIL,WriteAllLines,"WriteAllLines");
   pragma Import(MSIL,WriteAllText,"WriteAllText");
end MSSyst.IO.File;
pragma Import(MSIL,MSSyst.IO.File,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.IO.File");
