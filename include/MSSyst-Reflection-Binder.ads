-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.FieldInfo;
limited with MSSyst.Reflection.MethodBase;
with MSSyst.Reflection.ParameterModifier;
limited with MSSyst.Reflection.PropertyInfo;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Reflection.Binder is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function BindToField(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : access MSSyst.Reflection.FieldInfo.Ref_arr;
      value : access MSSyst.Object.Typ'Class;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Reflection.FieldInfo.Typ'Class;
   function BindToMethod(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : access MSSyst.Reflection.MethodBase.Ref_arr;
      args : access MSSyst.Object.Ref_array;
      modifiers : access MSSyst.Reflection.ParameterModifier.Valuetype_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class;
      names : access MSSyst.String.Ref_arr;
      state : access MSSyst.Object.Ref) return access MSSyst.Reflection.MethodBase.Typ'Class;
   function ChangeType(
      This : access Typ;
      value : access MSSyst.Object.Typ'Class;
      type_k : access MSSyst.Type_k.Typ'Class;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Object.Typ'Class;
   procedure ReorderArgumentArray(
      This : access Typ;
      args : access MSSyst.Object.Ref_array;
      state : access MSSyst.Object.Typ'Class);
   function SelectMethod(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : access MSSyst.Reflection.MethodBase.Ref_arr;
      types : access MSSyst.Type_k.Ref_arr;
      modifiers : access MSSyst.Reflection.ParameterModifier.Valuetype_arr) return access MSSyst.Reflection.MethodBase.Typ'Class;
   function SelectProperty(
      This : access Typ;
      bindingAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      match : access MSSyst.Reflection.PropertyInfo.Ref_arr;
      returnType : access MSSyst.Type_k.Typ'Class;
      indexes : access MSSyst.Type_k.Ref_arr;
      modifiers : access MSSyst.Reflection.ParameterModifier.Valuetype_arr) return access MSSyst.Reflection.PropertyInfo.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,BindToField,"BindToField");
   pragma Import(MSIL,BindToMethod,"BindToMethod");
   pragma Import(MSIL,ChangeType,"ChangeType");
   pragma Import(MSIL,ReorderArgumentArray,"ReorderArgumentArray");
   pragma Import(MSIL,SelectMethod,"SelectMethod");
   pragma Import(MSIL,SelectProperty,"SelectProperty");
end MSSyst.Reflection.Binder;
pragma Import(MSIL,MSSyst.Reflection.Binder,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.Binder");
