-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.CallingConventions;
with MSSyst.Reflection.ICustomAttributeProvider;
with MSSyst.Reflection.MemberInfo;
limited with MSSyst.Reflection.MemberTypes;
limited with MSSyst.Reflection.MethodAttributes;
with MSSyst.Reflection.MethodBase;
limited with MSSyst.Reflection.MethodBody;
limited with MSSyst.Reflection.MethodImplAttributes;
limited with MSSyst.Reflection.Module;
limited with MSSyst.Reflection.ParameterInfo;
with MSSyst.Runtime.InteropServices.uConstructorInfo;
with MSSyst.Runtime.InteropServices.uMemberInfo;
with MSSyst.Runtime.InteropServices.uMethodBase;
limited with MSSyst.RuntimeMethodHandle;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Reflection.ConstructorInfo is
   type Typ is abstract new MSSyst.Reflection.MethodBase.Typ
         and MSSyst.Reflection.ICustomAttributeProvider.Typ
         and MSSyst.Runtime.InteropServices.uMemberInfo.Typ
         and MSSyst.Runtime.InteropServices.uMethodBase.Typ
         and MSSyst.Runtime.InteropServices.uConstructorInfo.Typ
   with record
      null;
   end record;
   ConstructorName : access MSSyst.String.Typ'Class;
   pragma Import(MSIL,ConstructorName,"ConstructorName");
   TypeConstructorName : access MSSyst.String.Typ'Class;
   pragma Import(MSIL,TypeConstructorName,"TypeConstructorName");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_MemberType(
      This : access Typ) return MSSyst.Reflection.MemberTypes.Valuetype;
   function Invoke(
      This : access Typ;
      parameters : access MSSyst.Object.Ref_arr) return access MSSyst.Object.Typ'Class;
   function Invoke(
      This : access Typ;
      invokeAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      parameters : access MSSyst.Object.Ref_arr;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class) return access MSSyst.Object.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,get_MemberType,"get_MemberType");
   pragma Import(MSIL,Invoke,"Invoke");
end MSSyst.Reflection.ConstructorInfo;
pragma Import(MSIL,MSSyst.Reflection.ConstructorInfo,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.ConstructorInfo");
