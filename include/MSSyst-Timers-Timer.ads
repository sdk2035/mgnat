-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with MSSyst.ComponentModel.Component;
with MSSyst.ComponentModel.IComponent;
limited with MSSyst.ComponentModel.IContainer;
limited with MSSyst.ComponentModel.ISite;
with MSSyst.ComponentModel.ISupportInitialize;
limited with MSSyst.ComponentModel.ISynchronizeInvoke;
limited with MSSyst.EventHandler;
with MSSyst.IDisposable;
with MSSyst.MarshalByRefObject;
limited with MSSyst.Runtime.Remoting.ObjRef;
limited with MSSyst.String;
limited with MSSyst.Timers.ElapsedEventHandler;
limited with MSSyst.Type_k;
package MSSyst.Timers.Timer is
   type Typ is new MSSyst.ComponentModel.Component.Typ
         and MSSyst.ComponentModel.IComponent.Typ
         and MSSyst.IDisposable.Typ
         and MSSyst.ComponentModel.ISupportInitialize.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_Timer(
      This : Ref := null) return Ref;
   function new_Timer(
      This : Ref := null;
      interval : Long_Float) return Ref;
   procedure add_Elapsed(
      This : access Typ;
      value : access MSSyst.Timers.ElapsedEventHandler.Typ'Class);
   procedure BeginInit(
      This : access Typ);
   procedure Close(
      This : access Typ);
   procedure EndInit(
      This : access Typ);
   function get_AutoReset(
      This : access Typ) return Standard.Boolean;
   function get_Enabled(
      This : access Typ) return Standard.Boolean;
   function get_Interval(
      This : access Typ) return Long_Float;
   function get_Site(
      This : access Typ) return access MSSyst.ComponentModel.ISite.Typ'Class;
   function get_SynchronizingObject(
      This : access Typ) return access MSSyst.ComponentModel.ISynchronizeInvoke.Typ'Class;
   procedure remove_Elapsed(
      This : access Typ;
      value : access MSSyst.Timers.ElapsedEventHandler.Typ'Class);
   procedure set_AutoReset(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Enabled(
      This : access Typ;
      value : Standard.Boolean);
   procedure set_Interval(
      This : access Typ;
      value : Long_Float);
   procedure set_Site(
      This : access Typ;
      value : access MSSyst.ComponentModel.ISite.Typ'Class);
   procedure set_SynchronizingObject(
      This : access Typ;
      value : access MSSyst.ComponentModel.ISynchronizeInvoke.Typ'Class);
   procedure Start(
      This : access Typ);
   procedure Stop(
      This : access Typ);
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_Timer);
   pragma Import(MSIL,add_Elapsed,"add_Elapsed");
   pragma Import(MSIL,BeginInit,"BeginInit");
   pragma Import(MSIL,Close,"Close");
   pragma Import(MSIL,EndInit,"EndInit");
   pragma Import(MSIL,get_AutoReset,"get_AutoReset");
   pragma Import(MSIL,get_Enabled,"get_Enabled");
   pragma Import(MSIL,get_Interval,"get_Interval");
   pragma Import(MSIL,get_Site,"get_Site");
   pragma Import(MSIL,get_SynchronizingObject,"get_SynchronizingObject");
   pragma Import(MSIL,remove_Elapsed,"remove_Elapsed");
   pragma Import(MSIL,set_AutoReset,"set_AutoReset");
   pragma Import(MSIL,set_Enabled,"set_Enabled");
   pragma Import(MSIL,set_Interval,"set_Interval");
   pragma Import(MSIL,set_Site,"set_Site");
   pragma Import(MSIL,set_SynchronizingObject,"set_SynchronizingObject");
   pragma Import(MSIL,Start,"Start");
   pragma Import(MSIL,Stop,"Stop");
end MSSyst.Timers.Timer;
pragma Import(MSIL,MSSyst.Timers.Timer,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Timers.Timer");
