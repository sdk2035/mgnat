-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Diagnostics.StackFrame;
limited with MSSyst.Exception_k;
limited with MSSyst.String;
limited with MSSyst.Threading.Thread;
limited with MSSyst.Type_k;
package MSSyst.Diagnostics.StackTrace is
   type Typ is new MSSyst.Object.Typ   with record
      null;
   end record;
   METHODS_TO_SKIP : Integer;
   pragma Import(MSIL,METHODS_TO_SKIP,"METHODS_TO_SKIP");
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_StackTrace(
      This : Ref := null) return Ref;
   function new_StackTrace(
      This : Ref := null;
      fNeedFileInfo : Standard.Boolean) return Ref;
   function new_StackTrace(
      This : Ref := null;
      skipFrames : Integer) return Ref;
   function new_StackTrace(
      This : Ref := null;
      skipFrames : Integer;
      fNeedFileInfo : Standard.Boolean) return Ref;
   function new_StackTrace(
      This : Ref := null;
      e : access MSSyst.Exception_k.Typ'Class) return Ref;
   function new_StackTrace(
      This : Ref := null;
      e : access MSSyst.Exception_k.Typ'Class;
      fNeedFileInfo : Standard.Boolean) return Ref;
   function new_StackTrace(
      This : Ref := null;
      e : access MSSyst.Exception_k.Typ'Class;
      skipFrames : Integer) return Ref;
   function new_StackTrace(
      This : Ref := null;
      e : access MSSyst.Exception_k.Typ'Class;
      skipFrames : Integer;
      fNeedFileInfo : Standard.Boolean) return Ref;
   function new_StackTrace(
      This : Ref := null;
      frame : access MSSyst.Diagnostics.StackFrame.Typ'Class) return Ref;
   function new_StackTrace(
      This : Ref := null;
      targetThread : access MSSyst.Threading.Thread.Typ'Class;
      needFileInfo : Standard.Boolean) return Ref;
   function get_FrameCount(
      This : access Typ) return Integer;
   function GetFrame(
      This : access Typ;
      index : Integer) return access MSSyst.Diagnostics.StackFrame.Typ'Class;
   function GetFrames(
      This : access Typ) return access MSSyst.Diagnostics.StackFrame.Ref_arr;
   function ToString(
      This : access Typ) return access MSSyst.String.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_StackTrace);
   pragma Import(MSIL,get_FrameCount,"get_FrameCount");
   pragma Import(MSIL,GetFrame,"GetFrame");
   pragma Import(MSIL,GetFrames,"GetFrames");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Diagnostics.StackTrace;
pragma Import(MSIL,MSSyst.Diagnostics.StackTrace,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Diagnostics.StackTrace");
