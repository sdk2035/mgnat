-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Threading.Interlocked is
   type Typ is abstract new MSSyst.Object.Typ   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function Add(
      location1 : MSIL_Types.Int32_addrof;
      value : Integer) return Integer;
   function Add(
      location1 : MSIL_Types.Int64_addrof;
      value : Long_Long_Integer) return Long_Long_Integer;
   function CompareExchange(
      location1 : MSIL_Types.Float32_addrof;
      value : Float;
      comparand : Float) return Float;
   function CompareExchange(
      location1 : MSIL_Types.Int64_addrof;
      value : Long_Long_Integer;
      comparand : Long_Long_Integer) return Long_Long_Integer;
   function CompareExchange(
      location1 : MSIL_Types.Int32_addrof;
      value : Integer;
      comparand : Integer) return Integer;
   function CompareExchange(
      location1 : MSIL_Types.native_int_addrof;
      value : MSIL_Types.native_int;
      comparand : MSIL_Types.native_int) return MSIL_Types.native_int;
   function CompareExchange(
      location1 : access MSSyst.Object.Ref;
      value : access MSSyst.Object.Typ'Class;
      comparand : access MSSyst.Object.Typ'Class) return access MSSyst.Object.Typ'Class;
   function CompareExchange(
      location1 : MSIL_Types.Float64_addrof;
      value : Long_Float;
      comparand : Long_Float) return Long_Float;
   function Decrement(
      location : MSIL_Types.Int64_addrof) return Long_Long_Integer;
   function Decrement(
      location : MSIL_Types.Int32_addrof) return Integer;
   function Exchange(
      location1 : MSIL_Types.Float64_addrof;
      value : Long_Float) return Long_Float;
   function Exchange(
      location1 : MSIL_Types.Float32_addrof;
      value : Float) return Float;
   function Exchange(
      location1 : MSIL_Types.Int64_addrof;
      value : Long_Long_Integer) return Long_Long_Integer;
   function Exchange(
      location1 : MSIL_Types.native_int_addrof;
      value : MSIL_Types.native_int) return MSIL_Types.native_int;
   function Exchange(
      location1 : MSIL_Types.Int32_addrof;
      value : Integer) return Integer;
   function Exchange(
      location1 : access MSSyst.Object.Ref;
      value : access MSSyst.Object.Typ'Class) return access MSSyst.Object.Typ'Class;
   function Increment(
      location : MSIL_Types.Int32_addrof) return Integer;
   function Increment(
      location : MSIL_Types.Int64_addrof) return Long_Long_Integer;
   function Read(
      location : MSIL_Types.Int64_addrof) return Long_Long_Integer;
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,Add,"Add");
   pragma Import(MSIL,CompareExchange,"CompareExchange");
   pragma Import(MSIL,Decrement,"Decrement");
   pragma Import(MSIL,Exchange,"Exchange");
   pragma Import(MSIL,Increment,"Increment");
   pragma Import(MSIL,Read,"Read");
end MSSyst.Threading.Interlocked;
pragma Import(MSIL,MSSyst.Threading.Interlocked,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Threading.Interlocked");
