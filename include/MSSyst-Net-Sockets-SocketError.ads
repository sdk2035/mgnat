-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.IFormatProvider;
limited with MSSyst.String;
limited with MSSyst.TypeCode;
limited with MSSyst.Type_k;
package MSSyst.Net.Sockets.SocketError is
   type ValueType is (
      SocketError,
      Success,
      OperationAborted,
      IOPending,
      Interrupted,
      AccessDenied,
      Fault,
      InvalidArgument,
      TooManyOpenSockets,
      WouldBlock,
      InProgress,
      AlreadyInProgress,
      NotSocket,
      DestinationAddressRequired,
      MessageSize,
      ProtocolType,
      ProtocolOption,
      ProtocolNotSupported,
      SocketNotSupported,
      OperationNotSupported,
      ProtocolFamilyNotSupported,
      AddressFamilyNotSupported,
      AddressAlreadyInUse,
      AddressNotAvailable,
      NetworkDown,
      NetworkUnreachable,
      NetworkReset,
      ConnectionAborted,
      ConnectionReset,
      NoBufferSpaceAvailable,
      IsConnected,
      NotConnected,
      Shutdown,
      TimedOut,
      ConnectionRefused,
      HostDown,
      HostUnreachable,
      ProcessLimit,
      SystemNotReady,
      VersionNotSupported,
      NotInitialized,
      Disconnecting,
      TypeNotFound,
      HostNotFound,
      TryAgain,
      NoRecovery,
      NoData);
   pragma Convention (MSIL, ValueType);
   for ValueType use (
      SocketError => -1,
      Success =>  0,
      OperationAborted =>  995,
      IOPending =>  997,
      Interrupted =>  10004,
      AccessDenied =>  10013,
      Fault =>  10014,
      InvalidArgument =>  10022,
      TooManyOpenSockets =>  10024,
      WouldBlock =>  10035,
      InProgress =>  10036,
      AlreadyInProgress =>  10037,
      NotSocket =>  10038,
      DestinationAddressRequired =>  10039,
      MessageSize =>  10040,
      ProtocolType =>  10041,
      ProtocolOption =>  10042,
      ProtocolNotSupported =>  10043,
      SocketNotSupported =>  10044,
      OperationNotSupported =>  10045,
      ProtocolFamilyNotSupported =>  10046,
      AddressFamilyNotSupported =>  10047,
      AddressAlreadyInUse =>  10048,
      AddressNotAvailable =>  10049,
      NetworkDown =>  10050,
      NetworkUnreachable =>  10051,
      NetworkReset =>  10052,
      ConnectionAborted =>  10053,
      ConnectionReset =>  10054,
      NoBufferSpaceAvailable =>  10055,
      IsConnected =>  10056,
      NotConnected =>  10057,
      Shutdown =>  10058,
      TimedOut =>  10060,
      ConnectionRefused =>  10061,
      HostDown =>  10064,
      HostUnreachable =>  10065,
      ProcessLimit =>  10067,
      SystemNotReady =>  10091,
      VersionNotSupported =>  10092,
      NotInitialized =>  10093,
      Disconnecting =>  10101,
      TypeNotFound =>  10109,
      HostNotFound =>  11001,
      TryAgain =>  11002,
      NoRecovery =>  11003,
      NoData =>  11004);
   type ValueType_Arr is array (Natural range <>) of ValueType; -- start at 0
   type ValueType_Array is access all ValueType_Arr;
   type ValueType_addrof is access all ValueType;
   type ValueType_array_addrof is access all ValueType_Array;
   function CompareTo(
      This : Valuetype;
      target : access MSSyst.Object.Typ'Class) return Integer;
   function Equals(
      This : Valuetype;
      obj : access MSSyst.Object.Typ'Class) return Standard.Boolean;
   function GetHashCode(
      This : Valuetype) return Integer;
   function GetType(
      This : Valuetype) return access MSSyst.Type_k.Typ'Class;
   function GetTypeCode(
      This : Valuetype) return MSSyst.TypeCode.Valuetype;
   function ToString(
      This : Valuetype;
      provider : access MSSyst.IFormatProvider.Typ'Class) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype;
      format : access MSSyst.String.Typ'Class;
      provider : access MSSyst.IFormatProvider.Typ'Class) return access MSSyst.String.Typ'Class;
   function ToString(
      This : Valuetype;
      format : access MSSyst.String.Typ'Class) return access MSSyst.String.Typ'Class;
private
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetType,"GetType");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,ToString,"ToString");
end MSSyst.Net.Sockets.SocketError;
pragma Import(MSIL,MSSyst.Net.Sockets.SocketError,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[System]System.Net.Sockets.SocketError");
