-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Array_k;
with MSSyst.Collections.ICollection;
with MSSyst.Collections.IEnumerable;
limited with MSSyst.Collections.IEnumerator;
with MSSyst.ICloneable;
limited with MSSyst.String;
limited with MSSyst.Type_k;
package MSSyst.Collections.BitArray is
   type Typ is new MSSyst.Object.Typ
         and MSSyst.Collections.ICollection.Typ
         and MSSyst.Collections.IEnumerable.Typ
         and MSSyst.ICloneable.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function new_BitArray(
      This : Ref := null;
      length : Integer) return Ref;
   function new_BitArray(
      This : Ref := null;
      length : Integer;
      defaultValue : Standard.Boolean) return Ref;
   function new_BitArray(
      This : Ref := null;
      bytes : MSIL_Types.unsigned_int8_Arr) return Ref;
   function new_BitArray(
      This : Ref := null;
      values : MSIL_Types.Bool_Arr) return Ref;
   function new_BitArray(
      This : Ref := null;
      values : MSIL_Types.Int32_Arr) return Ref;
   function new_BitArray(
      This : Ref := null;
      bits : access MSSyst.Collections.BitArray.Typ'Class) return Ref;
   function And_k(
      This : access Typ;
      value : access MSSyst.Collections.BitArray.Typ'Class) return access MSSyst.Collections.BitArray.Typ'Class;
   function Clone(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   procedure CopyTo(
      This : access Typ;
      array_k : access MSSyst.Array_k.Typ'Class;
      index : Integer);
   function Get(
      This : access Typ;
      index : Integer) return Standard.Boolean;
   function get_Count(
      This : access Typ) return Integer;
   function get_IsReadOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsSynchronized(
      This : access Typ) return Standard.Boolean;
   function get_Item(
      This : access Typ;
      index : Integer) return Standard.Boolean;
   function get_Length(
      This : access Typ) return Integer;
   function get_SyncRoot(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function GetEnumerator(
      This : access Typ) return access MSSyst.Collections.IEnumerator.Typ'Class;
   function Not_k(
      This : access Typ) return access MSSyst.Collections.BitArray.Typ'Class;
   function Or_k(
      This : access Typ;
      value : access MSSyst.Collections.BitArray.Typ'Class) return access MSSyst.Collections.BitArray.Typ'Class;
   procedure Set(
      This : access Typ;
      index : Integer;
      value : Standard.Boolean);
   procedure set_Item(
      This : access Typ;
      index : Integer;
      value : Standard.Boolean);
   procedure set_Length(
      This : access Typ;
      value : Integer);
   procedure SetAll(
      This : access Typ;
      value : Standard.Boolean);
   function Xor_k(
      This : access Typ;
      value : access MSSyst.Collections.BitArray.Typ'Class) return access MSSyst.Collections.BitArray.Typ'Class;
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_BitArray);
   pragma Import(MSIL,And_k,"And");
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,Get,"Get");
   pragma Import(MSIL,get_Count,"get_Count");
   pragma Import(MSIL,get_IsReadOnly,"get_IsReadOnly");
   pragma Import(MSIL,get_IsSynchronized,"get_IsSynchronized");
   pragma Import(MSIL,get_Item,"get_Item");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,get_SyncRoot,"get_SyncRoot");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,Not_k,"Not");
   pragma Import(MSIL,Or_k,"Or");
   pragma Import(MSIL,Set,"Set");
   pragma Import(MSIL,set_Item,"set_Item");
   pragma Import(MSIL,set_Length,"set_Length");
   pragma Import(MSIL,SetAll,"SetAll");
   pragma Import(MSIL,Xor_k,"Xor");
end MSSyst.Collections.BitArray;
pragma Import(MSIL,MSSyst.Collections.BitArray,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Collections.BitArray");
