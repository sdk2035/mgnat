-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
limited with MSSyst.Globalization.CultureInfo;
limited with MSSyst.Reflection.Binder;
limited with MSSyst.Reflection.BindingFlags;
limited with MSSyst.Reflection.FieldAttributes;
with MSSyst.Reflection.ICustomAttributeProvider;
with MSSyst.Reflection.MemberInfo;
limited with MSSyst.Reflection.MemberTypes;
limited with MSSyst.Reflection.Module;
with MSSyst.Runtime.InteropServices.uFieldInfo;
with MSSyst.Runtime.InteropServices.uMemberInfo;
limited with MSSyst.RuntimeFieldHandle;
limited with MSSyst.RuntimeTypeHandle;
limited with MSSyst.String;
limited with MSSyst.Type_k;
limited with MSSyst.TypedReference;
package MSSyst.Reflection.FieldInfo is
   type Typ is abstract new MSSyst.Reflection.MemberInfo.Typ
         and MSSyst.Reflection.ICustomAttributeProvider.Typ
         and MSSyst.Runtime.InteropServices.uMemberInfo.Typ
         and MSSyst.Runtime.InteropServices.uFieldInfo.Typ
   with record
      null;
   end record;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   function get_Attributes(
      This : access Typ) return MSSyst.Reflection.FieldAttributes.Valuetype;
   function get_FieldHandle(
      This : access Typ) return MSSyst.RuntimeFieldHandle.Valuetype;
   function get_FieldType(
      This : access Typ) return access MSSyst.Type_k.Typ'Class;
   function get_IsAssembly(
      This : access Typ) return Standard.Boolean;
   function get_IsFamily(
      This : access Typ) return Standard.Boolean;
   function get_IsFamilyAndAssembly(
      This : access Typ) return Standard.Boolean;
   function get_IsFamilyOrAssembly(
      This : access Typ) return Standard.Boolean;
   function get_IsInitOnly(
      This : access Typ) return Standard.Boolean;
   function get_IsLiteral(
      This : access Typ) return Standard.Boolean;
   function get_IsNotSerialized(
      This : access Typ) return Standard.Boolean;
   function get_IsPinvokeImpl(
      This : access Typ) return Standard.Boolean;
   function get_IsPrivate(
      This : access Typ) return Standard.Boolean;
   function get_IsPublic(
      This : access Typ) return Standard.Boolean;
   function get_IsSpecialName(
      This : access Typ) return Standard.Boolean;
   function get_IsStatic(
      This : access Typ) return Standard.Boolean;
   function get_MemberType(
      This : access Typ) return MSSyst.Reflection.MemberTypes.Valuetype;
   function GetFieldFromHandle(
      handle : MSSyst.RuntimeFieldHandle.Valuetype;
      declaringType : MSSyst.RuntimeTypeHandle.Valuetype) return access MSSyst.Reflection.FieldInfo.Typ'Class;
   function GetFieldFromHandle(
      handle : MSSyst.RuntimeFieldHandle.Valuetype) return access MSSyst.Reflection.FieldInfo.Typ'Class;
   function GetOptionalCustomModifiers(
      This : access Typ) return access MSSyst.Type_k.Ref_arr;
   function GetRawConstantValue(
      This : access Typ) return access MSSyst.Object.Typ'Class;
   function GetRequiredCustomModifiers(
      This : access Typ) return access MSSyst.Type_k.Ref_arr;
   function GetValue(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class) return access MSSyst.Object.Typ'Class;
   function GetValueDirect(
      This : access Typ;
      obj : MSSyst.TypedReference.Valuetype) return access MSSyst.Object.Typ'Class;
   procedure SetValue(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class;
      value : access MSSyst.Object.Typ'Class;
      invokeAttr : MSSyst.Reflection.BindingFlags.Valuetype;
      binder : access MSSyst.Reflection.Binder.Typ'Class;
      culture : access MSSyst.Globalization.CultureInfo.Typ'Class);
   procedure SetValue(
      This : access Typ;
      obj : access MSSyst.Object.Typ'Class;
      value : access MSSyst.Object.Typ'Class);
   procedure SetValueDirect(
      This : access Typ;
      obj : MSSyst.TypedReference.Valuetype;
      value : access MSSyst.Object.Typ'Class);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,get_Attributes,"get_Attributes");
   pragma Import(MSIL,get_FieldHandle,"get_FieldHandle");
   pragma Import(MSIL,get_FieldType,"get_FieldType");
   pragma Import(MSIL,get_IsAssembly,"get_IsAssembly");
   pragma Import(MSIL,get_IsFamily,"get_IsFamily");
   pragma Import(MSIL,get_IsFamilyAndAssembly,"get_IsFamilyAndAssembly");
   pragma Import(MSIL,get_IsFamilyOrAssembly,"get_IsFamilyOrAssembly");
   pragma Import(MSIL,get_IsInitOnly,"get_IsInitOnly");
   pragma Import(MSIL,get_IsLiteral,"get_IsLiteral");
   pragma Import(MSIL,get_IsNotSerialized,"get_IsNotSerialized");
   pragma Import(MSIL,get_IsPinvokeImpl,"get_IsPinvokeImpl");
   pragma Import(MSIL,get_IsPrivate,"get_IsPrivate");
   pragma Import(MSIL,get_IsPublic,"get_IsPublic");
   pragma Import(MSIL,get_IsSpecialName,"get_IsSpecialName");
   pragma Import(MSIL,get_IsStatic,"get_IsStatic");
   pragma Import(MSIL,get_MemberType,"get_MemberType");
   pragma Import(MSIL,GetFieldFromHandle,"GetFieldFromHandle");
   pragma Import(MSIL,GetOptionalCustomModifiers,"GetOptionalCustomModifiers");
   pragma Import(MSIL,GetRawConstantValue,"GetRawConstantValue");
   pragma Import(MSIL,GetRequiredCustomModifiers,"GetRequiredCustomModifiers");
   pragma Import(MSIL,GetValue,"GetValue");
   pragma Import(MSIL,GetValueDirect,"GetValueDirect");
   pragma Import(MSIL,SetValue,"SetValue");
   pragma Import(MSIL,SetValueDirect,"SetValueDirect");
end MSSyst.Reflection.FieldInfo;
pragma Import(MSIL,MSSyst.Reflection.FieldInfo,
   ".ver 2:0:0:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Reflection.FieldInfo");
