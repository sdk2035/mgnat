-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.Object.Ref is access;
with type MSSyst.IO.TextWriter.Ref is access;
with type MSSyst.IO.TextReader.Ref is access;
with type MSSyst.Type_k.Ref is access;
with type MSSyst.IO.Stream.Ref is access;
with type MSSyst.String.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.Decimal.Valuetype is tagged;
with MSSyst.Object;
package MSSyst.Console is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ is new MSSyst.Object.Typ with record
      null;
   end record;
   function get_Error return MSSyst.IO.TextWriter.Ref;
   function get_In return MSSyst.IO.TextReader.Ref;
   function get_Out return MSSyst.IO.TextWriter.Ref;
   function OpenStandardError(
      bufferSize : Integer) return MSSyst.IO.Stream.Ref;
   function OpenStandardError return MSSyst.IO.Stream.Ref;
   function OpenStandardInput(
      bufferSize : Integer) return MSSyst.IO.Stream.Ref;
   function OpenStandardInput return MSSyst.IO.Stream.Ref;
   function OpenStandardOutput(
      bufferSize : Integer) return MSSyst.IO.Stream.Ref;
   function OpenStandardOutput return MSSyst.IO.Stream.Ref;
   function Read return Integer;
   function ReadLine return MSSyst.String.Ref;
   procedure SetError(
      newError : MSSyst.IO.TextWriter.Ref);
   procedure SetIn(
      newIn : MSSyst.IO.TextReader.Ref);
   procedure SetOut(
      newOut : MSSyst.IO.TextWriter.Ref);
   procedure Write(
      value : Wide_Character);
   procedure Write(
      value : Standard.Boolean);
   procedure Write(
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer);
   procedure Write(
      buffer : MSIL_Types.Char_Arr);
   procedure Write(
      format : MSSyst.String.Ref;
      arg : MSSyst.Object.Ref_array);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref;
      arg3 : MSSyst.Object.Ref);
   procedure Write(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref);
   procedure Write(
      value : MSIL_Types.Unsigned_Long_Long_Integer);
   procedure Write(
      value : Long_Long_Integer);
   procedure Write(
      value : MSSyst.String.Ref);
   procedure Write(
      value : MSSyst.Object.Ref);
   procedure Write(
      value : MSIL_Types.Unsigned_Integer);
   procedure Write(
      value : MSSyst.Decimal.Valuetype);
   procedure Write(
      value : Long_Float);
   procedure Write(
      value : Integer);
   procedure Write(
      value : Float);
   procedure WriteLine(
      value : Long_Float);
   procedure WriteLine(
      value : MSSyst.Decimal.Valuetype);
   procedure WriteLine(
      value : Integer);
   procedure WriteLine(
      value : Float);
   procedure WriteLine(
      buffer : MSIL_Types.Char_Arr;
      index : Integer;
      count : Integer);
   procedure WriteLine(
      value : Standard.Boolean);
   procedure WriteLine;
   procedure WriteLine(
      buffer : MSIL_Types.Char_Arr);
   procedure WriteLine(
      value : Wide_Character);
   procedure WriteLine(
      value : MSIL_Types.Unsigned_Integer);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg : MSSyst.Object.Ref_array);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref;
      arg3 : MSSyst.Object.Ref);
   procedure WriteLine(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref);
   procedure WriteLine(
      value : MSIL_Types.Unsigned_Long_Long_Integer);
   procedure WriteLine(
      value : Long_Long_Integer);
   procedure WriteLine(
      value : MSSyst.String.Ref);
   procedure WriteLine(
      value : MSSyst.Object.Ref);
private
   pragma Convention(MSIL,Typ);
   pragma Import(MSIL,get_Error,"get_Error");
   pragma Import(MSIL,get_In,"get_In");
   pragma Import(MSIL,get_Out,"get_Out");
   pragma Import(MSIL,OpenStandardError,"OpenStandardError");
   pragma Import(MSIL,OpenStandardInput,"OpenStandardInput");
   pragma Import(MSIL,OpenStandardOutput,"OpenStandardOutput");
   pragma Import(MSIL,Read,"Read");
   pragma Import(MSIL,ReadLine,"ReadLine");
   pragma Import(MSIL,SetError,"SetError");
   pragma Import(MSIL,SetIn,"SetIn");
   pragma Import(MSIL,SetOut,"SetOut");
   pragma Import(MSIL,Write,"Write");
   pragma Import(MSIL,WriteLine,"WriteLine");
end MSSyst.Console;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.Console,
   ".ver 1:0:5000:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.Console");
