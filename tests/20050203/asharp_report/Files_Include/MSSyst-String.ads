-- Autogenerated by MSIL2Ada v. 2
-- By: Martin C. Carlisle
--     Department of Computer Science
--     US Air Force Academy
--     carlislem@acm.org
pragma Extensions_Allowed(On);
with MSSyst.Object;
with MSIL_Types;
use MSIL_Types;
with type MSSyst.IComparable.Ref is access;
with type MSSyst.ICloneable.Ref is access;
with type MSSyst.IConvertible.Ref is access;
with type MSSyst.Collections.IEnumerable.Ref is access;
with type MSSyst.Object.Ref is access;
with type MSSyst.Globalization.CultureInfo.Ref is access;
with type MSSyst.Object.Ref_array is access;
with type MSSyst.String.Ref_array is access;
with type MSSyst.IFormatProvider.Ref is access;
with type MSSyst.CharEnumerator.Ref is access;
with type MSSyst.Type_k.Ref is access;
with MSSyst.TypeCode;
with MSSyst.SByte;
with type MSSyst.Text.Encoding.Ref is access;
with MSSyst.Object;
package MSSyst.String is
   type Typ;
   type Ref is access all Typ'Class;
   type Ref_addrof is access all Ref;
   type Ref_Arr is array(Natural range <>) of Ref;
   type Ref_Array is access all Ref_Arr;
   type Ref_Array_addrof is access all Ref_Array;
   type Typ(
         I_IComparable : MSSyst.IComparable.Ref;
         I_ICloneable : MSSyst.ICloneable.Ref;
         I_IConvertible : MSSyst.IConvertible.Ref;
         I_IEnumerable : MSSyst.Collections.IEnumerable.Ref
      ) is new MSSyst.Object.Typ with record
      null;
   end record;
   Empty : MSSyst.String.Ref;
   pragma Import(MSIL,Empty,"Empty");
   function new_String(
      This : Ref := null;
      value : MSIL_Types.char_addrof) return Ref;
   function new_String(
      This : Ref := null;
      value : MSIL_Types.char_addrof;
      startIndex : Integer;
      length : Integer) return Ref;
   function new_String(
      This : Ref := null;
      value : MSIL_Types.Int8_addrof) return Ref;
   function new_String(
      This : Ref := null;
      value : MSIL_Types.Int8_addrof;
      startIndex : Integer;
      length : Integer) return Ref;
   function new_String(
      This : Ref := null;
      value : MSIL_Types.Int8_addrof;
      startIndex : Integer;
      length : Integer;
      enc : MSSyst.Text.Encoding.Ref) return Ref;
   function new_String(
      This : Ref := null;
      value : MSIL_Types.Char_Arr;
      startIndex : Integer;
      length : Integer) return Ref;
   function new_String(
      This : Ref := null;
      value : MSIL_Types.Char_Arr) return Ref;
   function new_String(
      This : Ref := null;
      c : Wide_Character;
      count : Integer) return Ref;
   function Clone(
      This : access Typ) return MSSyst.Object.Ref;
   function Compare(
      strA : MSSyst.String.Ref;
      indexA : Integer;
      strB : MSSyst.String.Ref;
      indexB : Integer;
      length : Integer) return Integer;
   function Compare(
      strA : MSSyst.String.Ref;
      indexA : Integer;
      strB : MSSyst.String.Ref;
      indexB : Integer;
      length : Integer;
      ignoreCase : Standard.Boolean) return Integer;
   function Compare(
      strA : MSSyst.String.Ref;
      strB : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean;
      culture : MSSyst.Globalization.CultureInfo.Ref) return Integer;
   function Compare(
      strA : MSSyst.String.Ref;
      strB : MSSyst.String.Ref;
      ignoreCase : Standard.Boolean) return Integer;
   function Compare(
      strA : MSSyst.String.Ref;
      strB : MSSyst.String.Ref) return Integer;
   function Compare(
      strA : MSSyst.String.Ref;
      indexA : Integer;
      strB : MSSyst.String.Ref;
      indexB : Integer;
      length : Integer;
      ignoreCase : Standard.Boolean;
      culture : MSSyst.Globalization.CultureInfo.Ref) return Integer;
   function CompareOrdinal(
      strA : MSSyst.String.Ref;
      strB : MSSyst.String.Ref) return Integer;
   function CompareOrdinal(
      strA : MSSyst.String.Ref;
      indexA : Integer;
      strB : MSSyst.String.Ref;
      indexB : Integer;
      length : Integer) return Integer;
   function CompareTo(
      This : access Typ;
      strB : MSSyst.String.Ref) return Integer;
   function CompareTo(
      This : access Typ;
      value : MSSyst.Object.Ref) return Integer;
   function Concat(
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Concat(
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref;
      arg3 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Concat(
      arg0 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Concat(
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Concat(
      args : MSSyst.Object.Ref_array) return MSSyst.String.Ref;
   function Concat(
      str0 : MSSyst.String.Ref;
      str1 : MSSyst.String.Ref;
      str2 : MSSyst.String.Ref) return MSSyst.String.Ref;
   function Concat(
      str0 : MSSyst.String.Ref;
      str1 : MSSyst.String.Ref;
      str2 : MSSyst.String.Ref;
      str3 : MSSyst.String.Ref) return MSSyst.String.Ref;
   function Concat(
      values : MSSyst.String.Ref_array) return MSSyst.String.Ref;
   function Concat(
      str0 : MSSyst.String.Ref;
      str1 : MSSyst.String.Ref) return MSSyst.String.Ref;
   function Copy(
      str : MSSyst.String.Ref) return MSSyst.String.Ref;
   procedure CopyTo(
      This : access Typ;
      sourceIndex : Integer;
      destination : MSIL_Types.Char_Arr;
      destinationIndex : Integer;
      count : Integer);
   function EndsWith(
      This : access Typ;
      value : MSSyst.String.Ref) return Standard.Boolean;
   function Equals(
      This : access Typ;
      value : MSSyst.String.Ref) return Standard.Boolean;
   function Equals(
      This : access Typ;
      obj : MSSyst.Object.Ref) return Standard.Boolean;
   function Equals(
      a : MSSyst.String.Ref;
      b : MSSyst.String.Ref) return Standard.Boolean;
   function Format(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Format(
      provider : MSSyst.IFormatProvider.Ref;
      format : MSSyst.String.Ref;
      args : MSSyst.Object.Ref_array) return MSSyst.String.Ref;
   function Format(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Format(
      format : MSSyst.String.Ref;
      arg0 : MSSyst.Object.Ref;
      arg1 : MSSyst.Object.Ref;
      arg2 : MSSyst.Object.Ref) return MSSyst.String.Ref;
   function Format(
      format : MSSyst.String.Ref;
      args : MSSyst.Object.Ref_array) return MSSyst.String.Ref;
   function get_Chars(
      This : access Typ;
      index : Integer) return Wide_Character;
   function get_Length(
      This : access Typ) return Integer;
   function GetEnumerator(
      This : access Typ) return MSSyst.CharEnumerator.Ref;
   function GetHashCode(
      This : access Typ) return Integer;
   function GetTypeCode(
      This : access Typ) return MSSyst.TypeCode.Valuetype;
   function IndexOf(
      This : access Typ;
      value : MSSyst.String.Ref) return Integer;
   function IndexOf(
      This : access Typ;
      value : MSSyst.String.Ref;
      startIndex : Integer) return Integer;
   function IndexOf(
      This : access Typ;
      value : MSSyst.String.Ref;
      startIndex : Integer;
      count : Integer) return Integer;
   function IndexOf(
      This : access Typ;
      value : Wide_Character;
      startIndex : Integer;
      count : Integer) return Integer;
   function IndexOf(
      This : access Typ;
      value : Wide_Character;
      startIndex : Integer) return Integer;
   function IndexOf(
      This : access Typ;
      value : Wide_Character) return Integer;
   function IndexOfAny(
      This : access Typ;
      anyOf : MSIL_Types.Char_Arr;
      startIndex : Integer) return Integer;
   function IndexOfAny(
      This : access Typ;
      anyOf : MSIL_Types.Char_Arr;
      startIndex : Integer;
      count : Integer) return Integer;
   function IndexOfAny(
      This : access Typ;
      anyOf : MSIL_Types.Char_Arr) return Integer;
   function Insert(
      This : access Typ;
      startIndex : Integer;
      value : MSSyst.String.Ref) return MSSyst.String.Ref;
   function Intern(
      str : MSSyst.String.Ref) return MSSyst.String.Ref;
   function IsInterned(
      str : MSSyst.String.Ref) return MSSyst.String.Ref;
   function Join(
      separator : MSSyst.String.Ref;
      value : MSSyst.String.Ref_array;
      startIndex : Integer;
      count : Integer) return MSSyst.String.Ref;
   function Join(
      separator : MSSyst.String.Ref;
      value : MSSyst.String.Ref_array) return MSSyst.String.Ref;
   function LastIndexOf(
      This : access Typ;
      value : MSSyst.String.Ref;
      startIndex : Integer;
      count : Integer) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : MSSyst.String.Ref) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : Wide_Character;
      startIndex : Integer;
      count : Integer) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : Wide_Character;
      startIndex : Integer) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : MSSyst.String.Ref;
      startIndex : Integer) return Integer;
   function LastIndexOf(
      This : access Typ;
      value : Wide_Character) return Integer;
   function LastIndexOfAny(
      This : access Typ;
      anyOf : MSIL_Types.Char_Arr) return Integer;
   function LastIndexOfAny(
      This : access Typ;
      anyOf : MSIL_Types.Char_Arr;
      startIndex : Integer) return Integer;
   function LastIndexOfAny(
      This : access Typ;
      anyOf : MSIL_Types.Char_Arr;
      startIndex : Integer;
      count : Integer) return Integer;
   function op_Equality(
      a : MSSyst.String.Ref;
      b : MSSyst.String.Ref) return Standard.Boolean;
   function op_Inequality(
      a : MSSyst.String.Ref;
      b : MSSyst.String.Ref) return Standard.Boolean;
   function PadLeft(
      This : access Typ;
      totalWidth : Integer) return MSSyst.String.Ref;
   function PadLeft(
      This : access Typ;
      totalWidth : Integer;
      paddingChar : Wide_Character) return MSSyst.String.Ref;
   function PadRight(
      This : access Typ;
      totalWidth : Integer) return MSSyst.String.Ref;
   function PadRight(
      This : access Typ;
      totalWidth : Integer;
      paddingChar : Wide_Character) return MSSyst.String.Ref;
   function Remove(
      This : access Typ;
      startIndex : Integer;
      count : Integer) return MSSyst.String.Ref;
   function Replace(
      This : access Typ;
      oldChar : Wide_Character;
      newChar : Wide_Character) return MSSyst.String.Ref;
   function Replace(
      This : access Typ;
      oldValue : MSSyst.String.Ref;
      newValue : MSSyst.String.Ref) return MSSyst.String.Ref;
   function Split(
      This : access Typ;
      separator : MSIL_Types.Char_Arr;
      count : Integer) return MSSyst.String.Ref_array;
   function Split(
      This : access Typ;
      separator : MSIL_Types.Char_Arr) return MSSyst.String.Ref_array;
   function StartsWith(
      This : access Typ;
      value : MSSyst.String.Ref) return Standard.Boolean;
   function Substring(
      This : access Typ;
      startIndex : Integer) return MSSyst.String.Ref;
   function Substring(
      This : access Typ;
      startIndex : Integer;
      length : Integer) return MSSyst.String.Ref;
   function ToCharArray(
      This : access Typ;
      startIndex : Integer;
      length : Integer) return MSIL_Types.Char_Array;
   function ToCharArray(
      This : access Typ) return MSIL_Types.Char_Array;
   function ToLower(
      This : access Typ;
      culture : MSSyst.Globalization.CultureInfo.Ref) return MSSyst.String.Ref;
   function ToLower(
      This : access Typ) return MSSyst.String.Ref;
   function ToString(
      This : access Typ) return MSSyst.String.Ref;
   function ToString(
      This : access Typ;
      provider : MSSyst.IFormatProvider.Ref) return MSSyst.String.Ref;
   function ToUpper(
      This : access Typ) return MSSyst.String.Ref;
   function ToUpper(
      This : access Typ;
      culture : MSSyst.Globalization.CultureInfo.Ref) return MSSyst.String.Ref;
   function Trim(
      This : access Typ) return MSSyst.String.Ref;
   function Trim(
      This : access Typ;
      trimChars : MSIL_Types.Char_Arr) return MSSyst.String.Ref;
   function TrimEnd(
      This : access Typ;
      trimChars : MSIL_Types.Char_Arr) return MSSyst.String.Ref;
   function TrimStart(
      This : access Typ;
      trimChars : MSIL_Types.Char_Arr) return MSSyst.String.Ref;
   function "+"(R : Standard.String) return Mssyst.String.Ref;
   function "+"(R : Mssyst.String.Ref) return Standard.String;
   pragma Convention(Intrinsic,"+");
private
   pragma Convention(MSIL,Typ);
   pragma MSIL_Constructor(new_String);
   pragma Import(MSIL,Clone,"Clone");
   pragma Import(MSIL,Compare,"Compare");
   pragma Import(MSIL,CompareOrdinal,"CompareOrdinal");
   pragma Import(MSIL,CompareTo,"CompareTo");
   pragma Import(MSIL,Concat,"Concat");
   pragma Import(MSIL,Copy,"Copy");
   pragma Import(MSIL,CopyTo,"CopyTo");
   pragma Import(MSIL,EndsWith,"EndsWith");
   pragma Import(MSIL,Equals,"Equals");
   pragma Import(MSIL,Format,"Format");
   pragma Import(MSIL,get_Chars,"get_Chars");
   pragma Import(MSIL,get_Length,"get_Length");
   pragma Import(MSIL,GetEnumerator,"GetEnumerator");
   pragma Import(MSIL,GetHashCode,"GetHashCode");
   pragma Import(MSIL,GetTypeCode,"GetTypeCode");
   pragma Import(MSIL,IndexOf,"IndexOf");
   pragma Import(MSIL,IndexOfAny,"IndexOfAny");
   pragma Import(MSIL,Insert,"Insert");
   pragma Import(MSIL,Intern,"Intern");
   pragma Import(MSIL,IsInterned,"IsInterned");
   pragma Import(MSIL,Join,"Join");
   pragma Import(MSIL,LastIndexOf,"LastIndexOf");
   pragma Import(MSIL,LastIndexOfAny,"LastIndexOfAny");
   pragma Import(MSIL,op_Equality,"op_Equality");
   pragma Import(MSIL,op_Inequality,"op_Inequality");
   pragma Import(MSIL,PadLeft,"PadLeft");
   pragma Import(MSIL,PadRight,"PadRight");
   pragma Import(MSIL,Remove,"Remove");
   pragma Import(MSIL,Replace,"Replace");
   pragma Import(MSIL,Split,"Split");
   pragma Import(MSIL,StartsWith,"StartsWith");
   pragma Import(MSIL,Substring,"Substring");
   pragma Import(MSIL,ToCharArray,"ToCharArray");
   pragma Import(MSIL,ToLower,"ToLower");
   pragma Import(MSIL,ToString,"ToString");
   pragma Import(MSIL,ToUpper,"ToUpper");
   pragma Import(MSIL,Trim,"Trim");
   pragma Import(MSIL,TrimEnd,"TrimEnd");
   pragma Import(MSIL,TrimStart,"TrimStart");
end MSSyst.String;
pragma Extensions_Allowed(Off);
pragma Import(MSIL,MSSyst.String,
   ".ver 1:0:5000:0 .publickeytoken=( b7 7a 5c 56 19 34 e0 89 )",
   "[mscorlib]System.String");
